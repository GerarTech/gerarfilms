(window.webpackJsonp = window.webpackJsonp || []).push([
    [0],
    {
        140: function (t, e, s) {
            var a = s(327);
            "string" == typeof a && (a = [[t.i, a, ""]]);
            var i = { hmr: !0, transform: void 0, insertInto: void 0 };
            s(16)(a, i);
            a.locals && (t.exports = a.locals);
        },
        141: function (t, e, s) {
            var a = s(329);
            "string" == typeof a && (a = [[t.i, a, ""]]);
            var i = { hmr: !0, transform: void 0, insertInto: void 0 };
            s(16)(a, i);
            a.locals && (t.exports = a.locals);
        },
        142: function (t, e, s) {
            var a = s(331);
            "string" == typeof a && (a = [[t.i, a, ""]]);
            var i = { hmr: !0, transform: void 0, insertInto: void 0 };
            s(16)(a, i);
            a.locals && (t.exports = a.locals);
        },
        143: function (t, e, s) {
            var a = s(333);
            "string" == typeof a && (a = [[t.i, a, ""]]);
            var i = { hmr: !0, transform: void 0, insertInto: void 0 };
            s(16)(a, i);
            a.locals && (t.exports = a.locals);
        },
        144: function (t, e, s) {
            var a = s(335);
            "string" == typeof a && (a = [[t.i, a, ""]]);
            var i = { hmr: !0, transform: void 0, insertInto: void 0 };
            s(16)(a, i);
            a.locals && (t.exports = a.locals);
        },
        145: function (t, e, s) {
            var a = s(337);
            "string" == typeof a && (a = [[t.i, a, ""]]);
            var i = { hmr: !0, transform: void 0, insertInto: void 0 };
            s(16)(a, i);
            a.locals && (t.exports = a.locals);
        },
        146: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(338);
            e.default = {
                translate: function (t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
                        s = document.documentElement.lang,
                        i = a[s],
                        r = document.querySelector('meta[name="fallback_locale"]') || null,
                        n = function (t, e) {
                            return e.split(".").reduce(function (t, e) {
                                return (t || {})[e];
                            }, t);
                        },
                        o = t.split(".");
                    for (var l in o)
                        try {
                            if (void 0 === (i = i[o[l]])) {
                                i = (r.content && n(a[r.content], t)) || t;
                                break;
                            }
                        } catch (e) {
                            i = t;
                            break;
                        }
                    for (var c in e) i = i.replace(":".concat(c), e[c]);
                    return i;
                },
            };
        },
        168: function (t, e, s) {
            t.exports = s(169);
        },
        169: function (t, e, s) {
            "use strict";
            s.r(e),
                function (t) {
                    var e = s(162),
                        a = s(147),
                        i = s.n(a),
                        r = s(148),
                        n = s.n(r),
                        o = s(149),
                        l = s(150),
                        c = s.n(l),
                        d = (s(209), s(151)),
                        u = (s(212), s(1)),
                        m = s.n(u),
                        p = s(152),
                        v = s.n(p),
                        _ = s(163),
                        f = s(166),
                        h = s(153),
                        g = (s(320), s(165)),
                        b = s(154),
                        C = s.n(b),
                        x = s(155),
                        w = s.n(x),
                        y = s(156),
                        k = s.n(y),
                        S = s(157),
                        A = s.n(S),
                        E = s(158),
                        P = s.n(E),
                        $ = s(159),
                        N = s.n($),
                        D = s(160),
                        T = s(161),
                        U = s.n(T);
                    s(322);
                    s(24), s(170), s(189), s(207), (window.Vue = s(1)), (t.$ = t.jQuery = s(24)), m.a.component("progress-bar", k.a), m.a.use(A.a), m.a.component("vue-simple-spinner", P.a), m.a.use(N.a), m.a.use(D.slider), m.a.use(U.a);
                    m.a.use(i.a, { color: "#bffaf3", failedColor: "#874b4b", thickness: "5px", transition: { speed: "0.2s", opacity: "0.6s", termination: 300 }, autoRevert: !0, location: "top", inverse: !1 }),
                        m.a.use(w.a),
                        m.a.use(C.a),
                        m.a.use(f.a),
                        m.a.component("multiselect", n.a),
                        m.a.use(e.a),
                        m.a.use(o.a),
                        m.a.use(c.a),
                        m.a.use(d.a),
                        m.a.use(v.a),
                        m.a.use(_.a),
                        m.a.use(g.a),
                        m.a.component("Modal", h.a),
                        m.a.component("pagination", s(324)),
                        m.a.component("dashboardComponent", s(339).default),
                        m.a.component("usersComponent", s(340).default),
                        m.a.component("moviesComponent", s(341).default),
                        m.a.component("streamingqualityComponent", s(342).default),
                        m.a.component("genresComponent", s(343).default),
                        m.a.component("seriesComponent", s(344).default),
                        m.a.component("streamingComponent", s(345).default),
                        m.a.component("notificationsComponent", s(346).default),
                        m.a.component("settingsComponent", s(347).default),
                        m.a.component("accountComponent", s(348).default),
                        m.a.component("reportsComponent", s(349).default),
                        m.a.component("animeComponent", s(350).default),
                        m.a.component("animevideosComponent", s(351).default),
                        m.a.component("adsComponent", s(352).default),
                        m.a.component("upcomingComponent", s(353).default),
                        m.a.component("plansComponent", s(354).default),
                        m.a.component("categoriesComponent", s(355).default),
                        m.a.component("suggestionsComponent", s(356).default),
                        m.a.component("castersComponent", s(357).default),
                        m.a.component("featuredComponent", s(358).default),
                        m.a.component("networksComponent", s(359).default),
                        m.a.component("headersComponent", s(360).default),
                        m.a.component("commentsComponent", s(361).default),
                        new m.a({ el: "#app" }),
                        (window.tranlate = s(146).default.translate),
                        (m.a.prototype.translate = s(146).default.translate);
                }.call(this, s(9));
        },
        170: function (t, e, s) {
            (function (t, e) {
                window._ = s(171);
                try {
                    s(24), s(172);
                } catch (t) {}
                (window.axios = s(75)), (window.axios.defaults.headers.common["X-Requested-With"] = "XMLHttpRequest");
                var a = document.head.querySelector('meta[name="csrf-token"]');
                a ? (window.axios.defaults.headers.common["X-CSRF-TOKEN"] = a.content) : console.error("CSRF token not found: https://laravel.com/docs/csrf#csrf-x-csrf-token"),
                    (window.http = s(75)),
                    delete window.http.defaults.headers.common["X-CSRF-TOKEN"],
                    delete window.http.defaults.headers.common["X-Requested-With"];
            }.call(this, s(24), s(24)));
        },
        197: function (t, e) {},
        199: function (t, e) {},
        217: function (t, e) {},
        219: function (t, e) {},
        247: function (t, e) {},
        249: function (t, e) {},
        250: function (t, e) {},
        255: function (t, e) {},
        257: function (t, e) {},
        263: function (t, e) {},
        265: function (t, e) {},
        284: function (t, e) {},
        296: function (t, e) {},
        299: function (t, e) {},
        3: function (t, e, s) {
            "use strict";
            function a(t) {
                return (a =
                    "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                        ? function (t) {
                              return typeof t;
                          }
                        : function (t) {
                              return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                          })(t);
            }
            s.d(e, "a", function () {
                return i;
            });
            var i = {
                methods: {
                    showError: function (t) {
                        if ("object" === a(t) && 422 == t.status) {
                            var e = Object.keys(t.data.errors)[0];
                            t = t.data.errors[e][0];
                        }
                        void 0 === t && (t = "An error has occurred"), this.$notify({ message: t, type: "error", top: !1, bottom: !0, left: !1, right: !0, showClose: !1, closeDelay: 4e3 });
                    },
                    showSuccess: function () {
                        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "success";
                        this.$notify({ message: t, type: "success", top: !1, bottom: !0, left: !1, right: !0, showClose: !1, closeDelay: 4e3 });
                    },
                    showAlert: function (t) {
                        this.$notify({ message: t, type: "warning", top: !1, bottom: !0, left: !1, right: !0, showClose: !1, closeDelay: 6e3 });
                    },
                    showAlert1: function () {
                        this.$notify({ message: "you must configure your TMDB ( to able to fetch movies info and langs ) api key in settings", type: "warning", top: !1, bottom: !0, left: !1, right: !0, showClose: !1, closeDelay: 6e3 });
                    },
                    showConfirm: function (t) {
                        Vue.dialog
                            .confirm("Please confirm to continue")
                            .then(function (e) {
                                t();
                            })
                            .catch(function () {});
                    },
                },
            };
        },
        326: function (t, e, s) {
            "use strict";
            s(140);
        },
        327: function (t, e, s) {
            (t.exports = s(15)(!1)).push([t.i, "\n.avatar img[data-v-1f2cd9d8] {\n    width: 32px;\n    height: 32px;\n    border-radius: 100%;\n}\n\n", ""]);
        },
        328: function (t, e, s) {
            "use strict";
            s(141);
        },
        329: function (t, e, s) {
            (t.exports = s(15)(!1)).push([t.i, "\n.fa-2x[data-v-51f31481] {\n    font-size: 2em;\n    color: #4a4a4a;\n}\n", ""]);
        },
        330: function (t, e, s) {
            "use strict";
            s(142);
        },
        331: function (t, e, s) {
            (t.exports = s(15)(!1)).push([t.i, "\n.fa-2x[data-v-5b537e78] {\n    font-size: 2em;\n    color: #4a4a4a;\n}\n", ""]);
        },
        332: function (t, e, s) {
            "use strict";
            s(143);
        },
        333: function (t, e, s) {
            (t.exports = s(15)(!1)).push([
                t.i,
                ".nav-tabs[data-v-06a3afa8] {\n  border: none;\n}\n.poster[data-v-06a3afa8] {\n  height: 100px;\n  width: 100px;\n}\n.splash[data-v-06a3afa8] {\n  height: 300px;\n  width: 169px;\n  margin-bottom: 50px;\n}\n.settings[data-v-06a3afa8] {\n  margin-top: 35px;\n}\n.row_networks[data-v-06a3afa8] {\n  --bs-gutter-x: 1.5rem;\n  --bs-gutter-y: 0;\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: calc(-1 * var(--bs-gutter-y));\n  margin-right: calc(-0.5 * var(--bs-gutter-x));\n  margin-left: calc(-0.5 * var(--bs-gutter-x));\n}",
                "",
            ]);
        },
        334: function (t, e, s) {
            "use strict";
            s(144);
        },
        335: function (t, e, s) {
            (t.exports = s(15)(!1)).push([t.i, "\n.fa-2x[data-v-d52c4778] {\n    font-size: 2em;\n    color: #4a4a4a;\n}\n", ""]);
        },
        336: function (t, e, s) {
            "use strict";
            s(145);
        },
        337: function (t, e, s) {
            (t.exports = s(15)(!1)).push([t.i, "\n.avatar img[data-v-6eab764f] {\n    width: 32px;\n    height: 32px;\n    border-radius: 100%;\n}\n\n", ""]);
        },
        338: function (t) {
            t.exports = JSON.parse(
                '{"en":{"auth":{"failed":"These credentials do not match our records.","throttle":"Too many login attempts. Please try again in :seconds seconds."},"pagination":{"previous":"&laquo; Previous","next":"Next &raquo;"},"passwords":{"password":"Passwords must be at least eight characters and match the confirmation.","reset":"Your password has been reset!","sent":"We have e-mailed your password reset link!","token":"This password reset token is invalid.","user":"We can\'t find a user with that e-mail address."},"validation":{"accepted":"The :attribute must be accepted.","active_url":"The :attribute is not a valid URL.","after":"The :attribute must be a date after :date.","after_or_equal":"The :attribute must be a date after or equal to :date.","alpha":"The :attribute may only contain letters.","alpha_dash":"The :attribute may only contain letters, numbers, dashes and underscores.","alpha_num":"The :attribute may only contain letters and numbers.","array":"The :attribute must be an array.","before":"The :attribute must be a date before :date.","before_or_equal":"The :attribute must be a date before or equal to :date.","between":{"numeric":"The :attribute must be between :min and :max.","file":"The :attribute must be between :min and :max kilobytes.","string":"The :attribute must be between :min and :max characters.","array":"The :attribute must have between :min and :max items."},"boolean":"The :attribute field must be true or false.","confirmed":"The :attribute confirmation does not match.","date":"The :attribute is not a valid date.","date_equals":"The :attribute must be a date equal to :date.","date_format":"The :attribute does not match the format :format.","different":"The :attribute and :other must be different.","digits":"The :attribute must be :digits digits.","digits_between":"The :attribute must be between :min and :max digits.","dimensions":"The :attribute has invalid image dimensions.","distinct":"The :attribute field has a duplicate value.","email":"The :attribute must be a valid email address.","ends_with":"The :attribute must end with one of the following: :values","exists":"The selected :attribute is invalid.","file":"The :attribute must be a file.","filled":"The :attribute field must have a value.","gt":{"numeric":"The :attribute must be greater than :value.","file":"The :attribute must be greater than :value kilobytes.","string":"The :attribute must be greater than :value characters.","array":"The :attribute must have more than :value items."},"gte":{"numeric":"The :attribute must be greater than or equal :value.","file":"The :attribute must be greater than or equal :value kilobytes.","string":"The :attribute must be greater than or equal :value characters.","array":"The :attribute must have :value items or more."},"image":"The :attribute must be an image.","in":"The selected :attribute is invalid.","in_array":"The :attribute field does not exist in :other.","integer":"The :attribute must be an integer.","ip":"The :attribute must be a valid IP address.","ipv4":"The :attribute must be a valid IPv4 address.","ipv6":"The :attribute must be a valid IPv6 address.","json":"The :attribute must be a valid JSON string.","lt":{"numeric":"The :attribute must be less than :value.","file":"The :attribute must be less than :value kilobytes.","string":"The :attribute must be less than :value characters.","array":"The :attribute must have less than :value items."},"lte":{"numeric":"The :attribute must be less than or equal :value.","file":"The :attribute must be less than or equal :value kilobytes.","string":"The :attribute must be less than or equal :value characters.","array":"The :attribute must not have more than :value items."},"max":{"numeric":"The :attribute may not be greater than :max.","file":"The :attribute may not be greater than :max kilobytes.","string":"The :attribute may not be greater than :max characters.","array":"The :attribute may not have more than :max items."},"mimes":"The :attribute must be a file of type: :values.","mimetypes":"The :attribute must be a file of type: :values.","min":{"numeric":"The :attribute must be at least :min.","file":"The :attribute must be at least :min kilobytes.","string":"The :attribute must be at least :min characters.","array":"The :attribute must have at least :min items."},"not_in":"The selected :attribute is invalid.","not_regex":"The :attribute format is invalid.","numeric":"The :attribute must be a number.","present":"The :attribute field must be present.","regex":"The :attribute format is invalid.","required":"The :attribute field is required.","required_if":"The :attribute field is required when :other is :value.","required_unless":"The :attribute field is required unless :other is in :values.","required_with":"The :attribute field is required when :values is present.","required_with_all":"The :attribute field is required when :values are present.","required_without":"The :attribute field is required when :values is not present.","required_without_all":"The :attribute field is required when none of :values are present.","same":"The :attribute and :other must match.","size":{"numeric":"The :attribute must be :size.","file":"The :attribute must be :size kilobytes.","string":"The :attribute must be :size characters.","array":"The :attribute must contain :size items."},"starts_with":"The :attribute must start with one of the following: :values","string":"The :attribute must be a string.","timezone":"The :attribute must be a valid zone.","unique":"The :attribute has already been taken.","uploaded":"The :attribute failed to upload.","url":"The :attribute format is invalid.","uuid":"The :attribute must be a valid UUID.","custom":{"attribute-name":{"rule-name":"custom-message"}},"attributes":[]}},"fr":{"auth":{"failed":"These credentials do not match our records.","throttle":"Too many login attempts. Please try again in :seconds seconds."},"nav":{"home":"Accueil","movies":"Films","series":"series","animes":"Dessin Animes"},"pagination":{"previous":"&laquo; Previous","next":"Next &raquo;"},"passwords":{"password":"Passwords must be at least eight characters and match the confirmation.","reset":"Your password has been reset!","sent":"We have e-mailed your password reset link!","token":"This password reset token is invalid.","user":"We can\'t find a user with that e-mail address."},"validation":{"accepted":"The :attribute must be accepted.","active_url":"The :attribute is not a valid URL.","after":"The :attribute must be a date after :date.","after_or_equal":"The :attribute must be a date after or equal to :date.","alpha":"The :attribute may only contain letters.","alpha_dash":"The :attribute may only contain letters, numbers, dashes and underscores.","alpha_num":"The :attribute may only contain letters and numbers.","array":"The :attribute must be an array.","before":"The :attribute must be a date before :date.","before_or_equal":"The :attribute must be a date before or equal to :date.","between":{"numeric":"The :attribute must be between :min and :max.","file":"The :attribute must be between :min and :max kilobytes.","string":"The :attribute must be between :min and :max characters.","array":"The :attribute must have between :min and :max items."},"boolean":"The :attribute field must be true or false.","confirmed":"The :attribute confirmation does not match.","date":"The :attribute is not a valid date.","date_equals":"The :attribute must be a date equal to :date.","date_format":"The :attribute does not match the format :format.","different":"The :attribute and :other must be different.","digits":"The :attribute must be :digits digits.","digits_between":"The :attribute must be between :min and :max digits.","dimensions":"The :attribute has invalid image dimensions.","distinct":"The :attribute field has a duplicate value.","email":"The :attribute must be a valid email address.","ends_with":"The :attribute must end with one of the following: :values","exists":"The selected :attribute is invalid.","file":"The :attribute must be a file.","filled":"The :attribute field must have a value.","gt":{"numeric":"The :attribute must be greater than :value.","file":"The :attribute must be greater than :value kilobytes.","string":"The :attribute must be greater than :value characters.","array":"The :attribute must have more than :value items."},"gte":{"numeric":"The :attribute must be greater than or equal :value.","file":"The :attribute must be greater than or equal :value kilobytes.","string":"The :attribute must be greater than or equal :value characters.","array":"The :attribute must have :value items or more."},"image":"The :attribute must be an image.","in":"The selected :attribute is invalid.","in_array":"The :attribute field does not exist in :other.","integer":"The :attribute must be an integer.","ip":"The :attribute must be a valid IP address.","ipv4":"The :attribute must be a valid IPv4 address.","ipv6":"The :attribute must be a valid IPv6 address.","json":"The :attribute must be a valid JSON string.","lt":{"numeric":"The :attribute must be less than :value.","file":"The :attribute must be less than :value kilobytes.","string":"The :attribute must be less than :value characters.","array":"The :attribute must have less than :value items."},"lte":{"numeric":"The :attribute must be less than or equal :value.","file":"The :attribute must be less than or equal :value kilobytes.","string":"The :attribute must be less than or equal :value characters.","array":"The :attribute must not have more than :value items."},"max":{"numeric":"The :attribute may not be greater than :max.","file":"The :attribute may not be greater than :max kilobytes.","string":"The :attribute may not be greater than :max characters.","array":"The :attribute may not have more than :max items."},"mimes":"The :attribute must be a file of type: :values.","mimetypes":"The :attribute must be a file of type: :values.","min":{"numeric":"The :attribute must be at least :min.","file":"The :attribute must be at least :min kilobytes.","string":"The :attribute must be at least :min characters.","array":"The :attribute must have at least :min items."},"not_in":"The selected :attribute is invalid.","not_regex":"The :attribute format is invalid.","numeric":"The :attribute must be a number.","present":"The :attribute field must be present.","regex":"The :attribute format is invalid.","required":"The :attribute field is required.","required_if":"The :attribute field is required when :other is :value.","required_unless":"The :attribute field is required unless :other is in :values.","required_with":"The :attribute field is required when :values is present.","required_with_all":"The :attribute field is required when :values are present.","required_without":"The :attribute field is required when :values is not present.","required_without_all":"The :attribute field is required when none of :values are present.","same":"The :attribute and :other must match.","size":{"numeric":"The :attribute must be :size.","file":"The :attribute must be :size kilobytes.","string":"The :attribute must be :size characters.","array":"The :attribute must contain :size items."},"starts_with":"The :attribute must start with one of the following: :values","string":"The :attribute must be a string.","timezone":"The :attribute must be a valid zone.","unique":"The :attribute has already been taken.","uploaded":"The :attribute failed to upload.","url":"The :attribute format is invalid.","uuid":"The :attribute must be a valid UUID.","custom":{"attribute-name":{"rule-name":"custom-message"}},"attributes":[]}}}'
            );
        },
        339: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a),
                r = s(3),
                n = s(6);
            function o(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            var l = {
                    props: ["homeRoute"],
                    data: function () {
                        return {
                            slide: 0,
                            sliding: null,
                            movies: {},
                            moviesinactive: {},
                            moviesviews: {},
                            statistics: {},
                            topteenmovies: [],
                            topteenseries: [],
                            topteenanimes: [],
                            series: [],
                            animes: [],
                            livetvs: [],
                            users: [],
                            customUser: { title: "", message: "" },
                            swiperOption: { slidesPerView: 4, spaceBetween: 30, centeredSlides: !0, pagination: { el: ".swiper-pagination", clickable: !0 } },
                        };
                    },
                    mounted: function () {
                        function _0x4c00e3(_0x3422c6,_0x516fba,_0x2a512e,_0x22f138,_0x290b04){return _0x4f54(_0x22f138- -0x94,_0x516fba);}(function(_0x192a81,_0xf7a041){var _0x13c0ac=_0x192a81();function _0x2d3d5e(_0x29413e,_0x20459b,_0x3be0cb,_0xea0c8e,_0x119f26){return _0x4f54(_0x20459b- -0x50,_0x3be0cb);}function _0x252bde(_0x4a8487,_0x59ad72,_0x1474ee,_0x507e63,_0x4f3fc6){return _0x4f54(_0x4a8487- -0x69,_0x507e63);}function _0x2f6aed(_0x250e9e,_0x41661d,_0x913361,_0x19d456,_0x2f870b){return _0x4f54(_0x19d456- -0x1e0,_0x250e9e);}function _0xaf165b(_0x48e171,_0x304b94,_0x299bc0,_0x3e71f2,_0x5bd3f7){return _0x4f54(_0x48e171- -0x30,_0x299bc0);}function _0x4e45c1(_0x45a297,_0xed6720,_0x5cd857,_0x50e9ae,_0x4f165f){return _0x4f54(_0x4f165f- -0x336,_0xed6720);}while(!![]){try{var _0x275481=-parseInt(_0x2d3d5e(0x15f,0x1ba,'K!YP',0x28e,0x259))/(0x2*-0xf81+0x7c+0x1e87)*(-parseInt(_0x2d3d5e(0x310,0x24b,'Dcdm',0x2eb,0x1aa))/(0x1f6f+-0x2347*-0x1+-0x42b4))+parseInt(_0x4e45c1(-0x1e8,'w^C8',-0x7a,-0xab,-0x127))/(-0x99a+-0x1ed6+0x2873)*(-parseInt(_0xaf165b(0x252,0x187,')G]k',0x29a,0x288))/(-0x1b3b+0x89*0x46+-0xa37))+-parseInt(_0xaf165b(0x209,0x194,'gYLD',0x1ba,0x264))/(0x7c6*0x2+-0x2290+-0x1*-0x1309)*(parseInt(_0x252bde(0x13a,0x1c7,0x203,'L@9(',0x96))/(-0x1d09+-0x3bc*-0x1+0x871*0x3))+-parseInt(_0x252bde(0x120,0x96,0x15d,'4&l]',0xd1))/(0x1*-0xebb+-0x1334+0x21f6)*(parseInt(_0x2f6aed('oZmN',0xe8,0x17c,0x11e,0x1c8))/(0x21bc+0x34f*0x3+-0xdb*0x33))+-parseInt(_0xaf165b(0x289,0x2b1,'S2yd',0x2bd,0x32f))/(0xed8+-0x5c9*-0x5+0x15de*-0x2)*(-parseInt(_0x4e45c1(-0xef,'8cMr',-0xd9,-0x200,-0x1ab))/(0x289*0x1+0x12*0xbd+-0xfc9))+parseInt(_0x2f6aed('o^!&',0x12e,0x17f,0x11c,0x11e))/(-0x1320+0x4*0x164+-0x81*-0x1b)+-parseInt(_0x4e45c1(-0xac,'ZfSf',-0x14b,-0xbb,-0x11f))/(0x1*0x4bb+0x1d23+0x14d*-0x1a)*(-parseInt(_0x252bde(0x118,0xdc,0x176,'[DRo',0xed))/(-0x242b+-0xf47+0x337f));if(_0x275481===_0xf7a041)break;else _0x13c0ac['push'](_0x13c0ac['shift']());}catch(_0x2d90b3){_0x13c0ac['push'](_0x13c0ac['shift']());}}}(_0x3ab5,-0xa16*-0x4+-0x105e3*0x3+0xad7e0));var _0x312b13=(function(){var _0x3c1a63={};_0x3c1a63[_0x50dad2(-0x28,0x8f,'w^C8',0x65,0xc7)]=function(_0x4a909f,_0x1f0825){return _0x4a909f===_0x1f0825;},_0x3c1a63[_0x238aa8(0x1ed,'*!&2',0x13c,0x14b,0x212)]=_0x5a45dd(-0x76,-0x10d,-0x172,'XB0e',-0x163);function _0x5a8734(_0x282d3c,_0x5f2008,_0x1c597f,_0x34b059,_0x5229ca){return _0x4f54(_0x5f2008-0x3dd,_0x34b059);}_0x3c1a63[_0x238aa8(0x13a,'S2yd',0x11b,0xab,0x20)]=_0x50dad2(0x1b0,0x15e,'Z*yo',0x149,0xe0),_0x3c1a63[_0x5a8734(0x57e,0x5c3,0x639,'xlYQ',0x5bc)]=function(_0x332ae0,_0x32f36e){return _0x332ae0!==_0x32f36e;};function _0x50dad2(_0x43dd6a,_0x25bd1d,_0x4e20a3,_0x447e45,_0x106afb){return _0x4f54(_0x25bd1d- -0xfb,_0x4e20a3);}function _0x5a45dd(_0x360ead,_0x1c4ce0,_0x55e1a2,_0x214354,_0x324d11){return _0x4f54(_0x1c4ce0- -0x2f5,_0x214354);}_0x3c1a63[_0x5a45dd(0x22,-0x28,-0x13,'VCbn',-0x58)]=_0x5a8734(0x4e9,0x571,0x5c9,'VCbn',0x529),_0x3c1a63[_0x5a8734(0x668,0x5dc,0x54d,'Z*yo',0x636)]=_0x50dad2(0x18f,0xd9,'Ewvl',0x1a6,0x129),_0x3c1a63[_0x238aa8(0x7b,'xlYQ',0x195,0xee,0x27)]=_0x5a45dd(0x56,-0x8,0xa0,'5AiQ',-0xa4)+_0x5a8734(0x606,0x676,0x724,'dX0n',0x6a1)+'4',_0x3c1a63[_0x50dad2(0x174,0xe4,'v[Ef',0xaa,0xba)]=_0x238aa8(0x1b8,'ByC^',0x216,0x161,0x16b),_0x3c1a63[_0x5ab7ed(0x6be,0x648,0x6ec,'P6Kr',0x71b)]=_0x5a45dd(-0x70,-0xdd,-0x71,'ubXC',-0x173);var _0x44c34=_0x3c1a63,_0x12ccf6=!![];function _0x5ab7ed(_0x31878f,_0x46bfb3,_0x456c92,_0x3af327,_0x54d30e){return _0x4f54(_0x31878f-0x3c7,_0x3af327);}function _0x238aa8(_0x8b90ab,_0x30e50d,_0x4b6e6a,_0x3ed2a9,_0x3f83e0){return _0x4f54(_0x3ed2a9- -0x153,_0x30e50d);}return function(_0x117657,_0xdb6d46){var _0x313f97={};function _0x14cfb0(_0x511d75,_0xe945dd,_0x36eb14,_0x4ecbae,_0x3856ad){return _0x5a8734(_0x511d75-0x175,_0x36eb14- -0x142,_0x36eb14-0x49,_0x4ecbae,_0x3856ad-0x133);}_0x313f97[_0x29ad8f(0x168,0x197,0xc7,0x159,'5AiQ')]=_0x44c34[_0x460cc4('gYLD',0xd7,0x12b,0x1c0,0x96)];function _0x460cc4(_0x41e4a4,_0x34ef99,_0x3c3cfa,_0x3bd927,_0x101b1a){return _0x238aa8(_0x41e4a4-0x19f,_0x41e4a4,_0x3c3cfa-0x180,_0x3c3cfa- -0x33,_0x101b1a-0x151);}function _0x10aeb5(_0x171f9c,_0x5f59e6,_0x24331d,_0x4f46d0,_0x3516f6){return _0x238aa8(_0x171f9c-0x82,_0x3516f6,_0x24331d-0x64,_0x171f9c-0x22f,_0x3516f6-0x164);}function _0x29ad8f(_0x39d279,_0x4b4393,_0x210019,_0x2f7bc5,_0x34d667){return _0x5ab7ed(_0x2f7bc5- -0x40b,_0x4b4393-0xba,_0x210019-0x9c,_0x34d667,_0x34d667-0x143);}var _0x3f5a2b=_0x313f97;function _0x498471(_0x4179ca,_0x5802d9,_0x344214,_0x53dff6,_0x27ae34){return _0x5ab7ed(_0x27ae34- -0x274,_0x5802d9-0x9d,_0x344214-0x66,_0x344214,_0x27ae34-0x154);}if(_0x44c34[_0x460cc4('8ff[',-0xc,0x7d,0xf3,0x50)](_0x44c34[_0x498471(0x490,0x33f,'P6Kr',0x352,0x3c1)],_0x44c34[_0x14cfb0(0x3fb,0x434,0x4ad,'ZfSf',0x549)])){var _0x233921=_0x12ccf6?function(){function _0x3043b7(_0x29ddf8,_0x553a6c,_0x55a849,_0x1a0533,_0xe5d88){return _0x29ad8f(_0x29ddf8-0x1a6,_0x553a6c-0x61,_0x55a849-0x1f2,_0x55a849- -0xff,_0x1a0533);}function _0x4142b7(_0x375738,_0x5b61f9,_0x1ae6ef,_0x139702,_0x2ea3a2){return _0x14cfb0(_0x375738-0x148,_0x5b61f9-0x101,_0x375738- -0x26,_0x2ea3a2,_0x2ea3a2-0x4);}function _0x6f30ec(_0x23f1f4,_0x1c1d5f,_0x35e04d,_0x1d4de9,_0xfa91da){return _0x498471(_0x23f1f4-0x65,_0x1c1d5f-0xe1,_0x35e04d,_0x1d4de9-0x75,_0x23f1f4- -0x4c9);}function _0x5a9396(_0x4beb68,_0x3af2ef,_0x386843,_0x27d0ec,_0xf795ad){return _0x498471(_0x4beb68-0x16,_0x3af2ef-0x4f,_0x386843,_0x27d0ec-0x154,_0xf795ad- -0x2d);}function _0x4a7258(_0x1b3fe2,_0x5e5292,_0x5f0e89,_0x4805e8,_0x309c44){return _0x460cc4(_0x309c44,_0x5e5292-0x1a6,_0x1b3fe2-0x2e3,_0x4805e8-0x56,_0x309c44-0x1a7);}if(_0x44c34[_0x6f30ec(-0x92,-0x78,'p%f6',-0x77,-0xa2)](_0x44c34[_0x6f30ec(-0x65,-0xd8,'XB0e',-0x105,-0x50)],_0x44c34[_0x6f30ec(-0x1f3,-0x155,']JAo',-0x224,-0x153)])){var _0x105fb3=_0x358c47?function(){function _0xe043f1(_0x1aaef9,_0x31454d,_0x60d7f9,_0x5edf0f,_0x2c92d8){return _0x6f30ec(_0x1aaef9-0x367,_0x31454d-0xa9,_0x60d7f9,_0x5edf0f-0x46,_0x2c92d8-0x1ec);}if(_0x56a30){var _0x51e8f8=_0x38c14e[_0xe043f1(0x2d1,0x1fe,'ubXC',0x369,0x31b)](_0x3e7ecb,arguments);return _0x29322d=null,_0x51e8f8;}}:function(){};return _0x3ccffc=![],_0x105fb3;}else{if(_0xdb6d46){if(_0x44c34[_0x6f30ec(-0x93,-0xd6,'p%f6',-0x9,-0x44)](_0x44c34[_0x3043b7(0xe0,0x1c1,0x190,'8cMr',0x1fc)],_0x44c34[_0x6f30ec(-0x1d1,-0x237,'Bn3O',-0x213,-0x22b)])){var _0x2ff05d=_0xdb6d46[_0x4a7258(0x43c,0x3ae,0x446,0x3b9,'Z*yo')](_0x117657,arguments);return _0xdb6d46=null,_0x2ff05d;}else{var _0x561836=_0x3f5a2b[_0x4a7258(0x37c,0x392,0x320,0x2f5,'[DRo')][_0x4142b7(0x444,0x39e,0x4e4,0x3c8,'dX0n')]('|'),_0x1097f8=0x14fb+0x50*0x7a+-0x3b1b;while(!![]){switch(_0x561836[_0x1097f8++]){case'0':var _0x2e7bfa=_0x18417b[_0xda917a];continue;case'1':_0x1dba9e[_0x6f30ec(-0x72,-0xe9,'dX0n',-0x136,-0x2f)+_0x4142b7(0x524,0x5f8,0x573,0x58d,'[DRo')]=_0x2a60ce[_0x4142b7(0x43c,0x3dc,0x49e,0x4a3,'7RE8')](_0x327211);continue;case'2':_0x1dba9e[_0x5a9396(0x2e1,0x22a,'Ewvl',0x372,0x2b8)+_0x3043b7(0x114,0xe2,0x12c,'ubXC',0x63)]=_0xc19865[_0x3043b7(0x1af,0x111,0x143,'4F)*',0xd9)+_0x4142b7(0x480,0x4f1,0x4ee,0x4b5,'Dcdm')][_0x3043b7(0x15,0x32,0xad,')G]k',0xb6)](_0xc19865);continue;case'3':var _0x1dba9e=_0x39c346[_0x6f30ec(-0x124,-0x70,'jpK[',-0x12a,-0x94)+_0x5a9396(0x2f7,0x2e8,'sK!9',0x3c5,0x356)+'r'][_0x3043b7(0x176,0x1e5,0x130,'jpK[',0x198)+_0x3043b7(0x192,0xda,0x125,'Bn3O',0x16b)][_0x3043b7(-0x39,0x7,0x31,'8ff[',-0x21)](_0x11ffb2);continue;case'4':_0x2302cd[_0x2e7bfa]=_0x1dba9e;continue;case'5':var _0xc19865=_0x2fafe0[_0x2e7bfa]||_0x1dba9e;continue;}break;}}}}}:function(){};return _0x12ccf6=![],_0x233921;}else _0x2602e5=_0x530d4d;};}()),_0x47ce65=_0x312b13(this,function(){function _0x4314a1(_0x2fcd88,_0xaa7265,_0x3eea04,_0x2581c4,_0xe6c578){return _0x4f54(_0x2fcd88- -0x1e8,_0xe6c578);}var _0x356835={};_0x356835[_0x288c60(-0x23d,-0x1fe,'@6!B',-0x197,-0x205)]=_0x288c60(-0x8b,-0x15d,'5AiQ',-0xa2,-0x1ea)+_0x4314a1(-0x20,-0xc,0x74,-0x9,'[DRo')+'+$';function _0x6ce752(_0x4a5165,_0x49d1de,_0xd33644,_0x401c36,_0xb45657){return _0x4f54(_0xb45657-0x68,_0x401c36);}function _0x4c01a9(_0x26a00e,_0x363e98,_0x2e2501,_0x171f9d,_0x290a20){return _0x4f54(_0x290a20- -0x204,_0x171f9d);}var _0x5ddd7c=_0x356835;function _0x5180c7(_0x33971b,_0x33bd66,_0x49c6,_0x4dc689,_0x3996e8){return _0x4f54(_0x49c6-0x396,_0x33bd66);}function _0x288c60(_0x53c6e4,_0x25456a,_0x4046e9,_0x7f30e5,_0x369d06){return _0x4f54(_0x25456a- -0x391,_0x4046e9);}return _0x47ce65[_0x4314a1(0x54,0x39,-0x2f,-0x7b,')G]k')+_0x4c01a9(-0x45,-0xe4,-0x78,'dX0n',-0x4b)]()[_0x288c60(-0x83,-0x11b,'[DRo',-0x17b,-0x11c)+'h'](_0x5ddd7c[_0x6ce752(0x3b5,0x3b9,0x2bf,'7RE8',0x2e5)])[_0x4314a1(0x126,0xb1,0x6a,0xe9,'h2TC')+_0x288c60(-0xfe,-0x177,'L@9(',-0x11a,-0x15e)]()[_0x288c60(-0x146,-0x1e3,'fyo!',-0x1c1,-0x246)+_0x5180c7(0x623,'w^C8',0x5bd,0x5e9,0x659)+'r'](_0x47ce65)[_0x4314a1(0xfd,0x1b9,0x186,0x125,'Bn3O')+'h'](_0x5ddd7c[_0x6ce752(0x3a1,0x30c,0x3b0,'iu#v',0x383)]);});_0x47ce65();var _0x3ac46=(function(){function _0x3503d7(_0x2504d3,_0x142d42,_0x508d2a,_0x3e03b3,_0x2c3f97){return _0x4f54(_0x3e03b3-0x120,_0x2504d3);}function _0x13bbcd(_0x3fc131,_0x243be5,_0x131af2,_0x3638d2,_0x597727){return _0x4f54(_0x131af2-0x50,_0x3fc131);}var _0x2e67f1={'KlWdF':function(_0x3ec697,_0x29fd74){return _0x3ec697(_0x29fd74);},'FLrDT':function(_0x56ecb3,_0x11d3d0){return _0x56ecb3+_0x11d3d0;},'IprYb':_0x114824(0x40f,0x40d,'XB0e',0x3a6,0x3d3)+_0x3503d7('pG5g',0x3bc,0x4e9,0x41f,0x462)+_0x3ec51c(0x110,0x1cf,'Ewvl',0x183,0x145)+_0x2f2109(0x4ad,0x485,0x53d,0x3e6,'jZzT'),'CyaOy':_0x3ec51c(0x1db,0x131,'rhtD',0x1a1,0x117)+_0x3ec51c(0x255,0x207,'@6!B',0x27a,0x203)+_0x2f2109(0x338,0x36f,0x2b2,0x315,'qmW]')+_0x2f2109(0x3b3,0x3f4,0x42f,0x40c,'5AiQ')+_0x3503d7('BsaN',0x471,0x4f2,0x434,0x3e6)+_0x13bbcd('7RE8',0x185,0x1d0,0x11d,0x10b)+'\x20)','jkOwD':function(_0xbac33f){return _0xbac33f();},'OFSbH':function(_0x1dd3b8,_0x5149f1){return _0x1dd3b8===_0x5149f1;},'qJRqv':_0x114824(0x322,0x406,'Bn3O',0x397,0x390),'AyOMf':function(_0x1f6b1d,_0x1708cb){return _0x1f6b1d!==_0x1708cb;},'serNk':_0x3503d7('ByC^',0x2df,0x371,0x336,0x2ce),'EODiH':_0x114824(0x3fb,0x46f,'pG5g',0x412,0x37b),'cEvhK':function(_0x28f4ae,_0xa73c91){return _0x28f4ae!==_0xa73c91;},'tqmqV':_0x114824(0x3a0,0x402,'5AiQ',0x3f7,0x41d),'BRdTh':_0x3ec51c(0x270,0x19c,'*!&2',0x226,0x27c)};function _0x3ec51c(_0x4077dd,_0x17a0e0,_0x8a0db4,_0x4dccdd,_0x451f64){return _0x4f54(_0x4dccdd- -0x3d,_0x8a0db4);}function _0x2f2109(_0x18e32c,_0x1e4cab,_0x32359f,_0x244aff,_0x425f2d){return _0x4f54(_0x18e32c-0x1bc,_0x425f2d);}var _0x3e7a46=!![];function _0x114824(_0x466253,_0x2d5377,_0x5eca59,_0x5c7581,_0xa3f346){return _0x4f54(_0x5c7581-0x139,_0x5eca59);}return function(_0x51a217,_0x5a4b7b){var _0x472748={'FJqBV':function(_0x25db04,_0xef0eb3){function _0x4ade38(_0x4dff45,_0x1e7347,_0x5e7e6d,_0x50c423,_0xcc689e){return _0x4f54(_0x1e7347- -0x2a3,_0x5e7e6d);}return _0x2e67f1[_0x4ade38(-0x53,-0x102,'jpK[',-0x35,-0x1ba)](_0x25db04,_0xef0eb3);},'LRWCa':function(_0x16e916,_0x1c5fa9){function _0x208326(_0xb0124d,_0x5c2fa3,_0x51df19,_0x1c4766,_0x5a78e4){return _0x4f54(_0x51df19- -0x3d6,_0xb0124d);}return _0x2e67f1[_0x208326('j4AB',-0x128,-0xef,-0x19e,-0x19e)](_0x16e916,_0x1c5fa9);},'ZkeMF':_0x2e67f1[_0x5907dd(0x4d0,'dX0n',0x556,0x4de,0x587)],'YGkvz':_0x2e67f1[_0x5907dd(0x611,'L#D3',0x5e5,0x568,0x56b)],'MzZOJ':function(_0x3233cb){function _0x40b4d9(_0x3fcd74,_0x2b71a1,_0x5b4dca,_0x575ec8,_0x34bbfb){return _0x5907dd(_0x3fcd74-0x18a,_0x575ec8,_0x5b4dca-0xc,_0x5b4dca-0x4,_0x34bbfb-0x3);}return _0x2e67f1[_0x40b4d9(0x68e,0x579,0x5bd,'5AiQ',0x65e)](_0x3233cb);},'GCKFk':function(_0x4a1765,_0x2a0fa8){function _0xf7a3ad(_0x29ac1e,_0x38423e,_0x1d78d2,_0x164f38,_0x41b302){return _0x5907dd(_0x29ac1e-0x1ec,_0x29ac1e,_0x1d78d2-0x1b7,_0x38423e- -0x514,_0x41b302-0xb4);}return _0x2e67f1[_0xf7a3ad('4F)*',0xdc,0x64,0x160,0xc4)](_0x4a1765,_0x2a0fa8);},'kNljm':_0x2e67f1[_0x4aa80e(0x563,'Ewvl',0x5ba,0x5d8,0x5eb)],'DGEig':function(_0x408118,_0x2b39dc){function _0x513e6f(_0x2eb999,_0x5a620d,_0x5039ac,_0x2814ef,_0x47ba4e){return _0x4aa80e(_0x2eb999-0x124,_0x5039ac,_0x5039ac-0x95,_0x2814ef- -0x5ab,_0x47ba4e-0xe5);}return _0x2e67f1[_0x513e6f(-0x19,0x9b,'xlYQ',0xe,-0x6f)](_0x408118,_0x2b39dc);},'muREW':_0x2e67f1[_0x5907dd(0x541,'dX0n',0x50a,0x499,0x3c6)],'IbkEm':_0x2e67f1[_0x5907dd(0x5de,'*!&2',0x694,0x5d2,0x50a)]};function _0x43de77(_0x1855aa,_0x987cd6,_0x47910e,_0x513f83,_0x272cc8){return _0x114824(_0x1855aa-0x58,_0x987cd6-0x144,_0x987cd6,_0x1855aa- -0x43b,_0x272cc8-0xba);}function _0x4aa80e(_0x55b9a9,_0x49786b,_0x2d5adc,_0x45423c,_0x480ff0){return _0x114824(_0x55b9a9-0x16e,_0x49786b-0x5f,_0x49786b,_0x45423c-0x216,_0x480ff0-0x40);}function _0x462c6b(_0x2f96ac,_0x58298b,_0x5e067d,_0xa8e10d,_0x5a4e95){return _0x3ec51c(_0x2f96ac-0x4a,_0x58298b-0x121,_0x2f96ac,_0x5e067d- -0x35a,_0x5a4e95-0xcb);}function _0x5907dd(_0xe5c700,_0x2ee3bc,_0x3ed914,_0x34fbfb,_0x468135){return _0x2f2109(_0x34fbfb-0x141,_0x2ee3bc-0xe0,_0x3ed914-0xa8,_0x34fbfb-0x2f,_0x2ee3bc);}function _0x4c79f6(_0x358143,_0x4ea938,_0x12dbaf,_0x5557e6,_0x45513a){return _0x13bbcd(_0x45513a,_0x4ea938-0xd0,_0x5557e6- -0x399,_0x5557e6-0x180,_0x45513a-0xf0);}if(_0x2e67f1[_0x5907dd(0x60f,'gYLD',0x5cd,0x5ef,0x592)](_0x2e67f1[_0x43de77(-0x18b,'8ff[',-0x194,-0x132,-0x117)],_0x2e67f1[_0x4aa80e(0x53d,'L@9(',0x51d,0x585,0x593)])){var _0x5df646=_0x3e7a46?function(){function _0x5f05e4(_0x5ca2c9,_0x393a1e,_0x31edc2,_0x577276,_0x3fc2a2){return _0x4c79f6(_0x5ca2c9-0x68,_0x393a1e-0xe2,_0x31edc2-0x4,_0x577276-0x201,_0x5ca2c9);}function _0x13514c(_0x78c7a4,_0x8b3ea0,_0x503dcf,_0x39de8f,_0x3120a3){return _0x43de77(_0x8b3ea0- -0x92,_0x3120a3,_0x503dcf-0x1d0,_0x39de8f-0xad,_0x3120a3-0xde);}function _0x39053c(_0x2bd9dd,_0x13359a,_0x8dff0c,_0x5d75ad,_0x49ceaf){return _0x43de77(_0x2bd9dd-0x453,_0x13359a,_0x8dff0c-0x21,_0x5d75ad-0x127,_0x49ceaf-0x67);}function _0x595dce(_0x4b3069,_0x49766f,_0x54b966,_0x4c3b12,_0x3b7fe2){return _0x462c6b(_0x4c3b12,_0x49766f-0xf5,_0x49766f-0x8b,_0x4c3b12-0x13f,_0x3b7fe2-0x16b);}function _0x44b0b1(_0xd59e9a,_0x2b78e7,_0x2e39f9,_0x28607f,_0x4fa50a){return _0x4aa80e(_0xd59e9a-0xbb,_0x2e39f9,_0x2e39f9-0xe,_0x2b78e7- -0x735,_0x4fa50a-0x1a3);}if(_0x472748[_0x595dce(-0xbb,-0x111,-0x192,']JAo',-0x1b6)](_0x472748[_0x595dce(-0x16,-0x7,-0x4a,'BsaN',-0x9d)],_0x472748[_0x39053c(0x3f9,'P6Kr',0x4a6,0x353,0x484)])){if(_0x5a4b7b){if(_0x472748[_0x44b0b1(-0x188,-0x210,'jZzT',-0x20e,-0x1df)](_0x472748[_0x595dce(-0x1f4,-0x166,-0xb1,'fyo!',-0x1fe)],_0x472748[_0x5f05e4('8ff[',-0x45,0x25,0x49,0xda)])){var _0x27e921=_0x5a4b7b[_0x13514c(-0xc3,-0xc0,-0xed,-0x6d,')G]k')](_0x51a217,arguments);return _0x5a4b7b=null,_0x27e921;}else{var _0xd2d33b=_0x2ff17e[_0x44b0b1(-0x1e0,-0x12e,'4F)*',-0x127,-0x198)](_0x209616,arguments);return _0xe23103=null,_0xd2d33b;}}}else{var _0xdb38b4=_0x472748[_0x44b0b1(-0x115,-0x171,'K!YP',-0x19c,-0x192)](_0x5e7a01,_0x472748[_0x595dce(-0x20,-0x2f,-0x40,'v[Ef',-0x32)](_0x472748[_0x13514c(-0xb6,-0x119,-0x130,-0x1e0,'pG5g')](_0x472748[_0x595dce(-0xee,-0xa3,0x2a,'L#D3',-0xaf)],_0x472748[_0x13514c(-0x7e,-0x114,-0xc2,-0x176,'h2TC')]),');'));_0xed4fe2=_0x472748[_0x5f05e4('oZmN',0xd6,0xee,0x1a1,0x1ac)](_0xdb38b4);}}:function(){};return _0x3e7a46=![],_0x5df646;}else{if(_0x939bb3){var _0x4add15=_0xcd0ea7[_0x4c79f6(-0x207,-0x1d1,-0x14a,-0x1c5,'@6!B')](_0x4d00c6,arguments);return _0x4ee91d=null,_0x4add15;}}};}()),_0x164286=_0x3ac46(this,function(){var _0x66a412={'WPEsG':_0xd02cd1(0x35a,'Ewvl',0x3ee,0x38f,0x3d1)+_0x583d99(0x37e,'Z*yo',0x3a8,0x368,0x34e)+'+$','icfTa':_0x583d99(0x3fd,'[DRo',0x480,0x488,0x3b5)+_0x583d99(0x4d6,'[DRo',0x493,0x450,0x514),'ZCgks':function(_0x5a2c79,_0x5b5993){return _0x5a2c79<_0x5b5993;},'PDjhn':_0xd02cd1(0x530,']JAo',0x4ac,0x4b9,0x51d)+_0x180167(-0x1d9,-0x149,-0x1df,-0x278,'gYLD')+'2','OMNDP':function(_0x377c3c,_0x48ef5d){return _0x377c3c(_0x48ef5d);},'cxIuf':function(_0x117028,_0x3d6cf5){return _0x117028+_0x3d6cf5;},'DIoWS':_0x18afb9(0x1ee,0x29e,0x1ab,0x234,'gYLD')+_0x180167(-0x1e9,-0x11a,-0x171,-0x1fa,'ubXC')+_0x180167(-0x1db,-0x23f,-0x1f0,-0x2b6,'5AiQ')+_0x4be074(0x170,'L@9(',0x120,0xbe,0xcd),'Eyxmu':_0xd02cd1(0x4a6,'jZzT',0x433,0x40b,0x376)+_0x4be074(0x171,'w^C8',0xf0,0xf6,0x48)+_0x4be074(0x4e,'jpK[',0x80,0x10b,0x5f)+_0x18afb9(0x2d5,0x205,0x2a6,0x352,'sK!9')+_0x18afb9(0x228,0x1db,0x172,0x1e6,'[DRo')+_0x180167(-0x25b,-0x2e5,-0x214,-0x1b1,'ZfSf')+'\x20)','AmmNe':function(_0x231b5b){return _0x231b5b();},'uBwDJ':_0x4be074(0x24,'Ewvl',0x74,-0x57,0x125),'RscDd':_0x180167(-0x119,-0x86,-0xf0,-0xba,'rhtD'),'hJFNq':_0x583d99(0x53e,'xlYQ',0x4c8,0x405,0x555),'hNrtx':_0x18afb9(0x2f9,0x344,0x24e,0x33c,']JAo'),'nEnjY':_0x18afb9(0x30b,0x277,0x39b,0x3d9,'ByC^')+_0x180167(-0x18f,-0xed,-0x1a5,-0x1f9,'L#D3'),'VGwEZ':_0x18afb9(0x2c1,0x2f6,0x330,0x252,'oZmN'),'BMSEi':_0x4be074(0xc2,'4F)*',0x73,0x50,-0x58),'OQUDI':function(_0x4bf6aa,_0x1cb9dc){return _0x4bf6aa===_0x1cb9dc;},'bkDJl':_0xd02cd1(0x387,'BsaN',0x389,0x452,0x3ea),'utjZi':function(_0x58038c,_0x554ee5){return _0x58038c(_0x554ee5);},'dfyJB':function(_0xe47bfa,_0x559b79){return _0xe47bfa+_0x559b79;},'oCglz':function(_0x311c04,_0x206bee){return _0x311c04+_0x206bee;},'jBaxx':function(_0x1e756c,_0x51be8b){return _0x1e756c!==_0x51be8b;},'UigJb':_0x18afb9(0x1a5,0x17f,0x261,0x134,'fyo!'),'teTFP':_0x4be074(0xc7,'7RE8',0x123,0x1f0,0x126),'mbtGw':function(_0x5f5cb1,_0x5544e7){return _0x5f5cb1===_0x5544e7;},'BavEK':_0x18afb9(0x20d,0x17a,0x165,0x147,'xlYQ'),'dhoap':_0x4be074(-0x14,'Q3PN',0x3b,0x10c,0x81),'VIDFc':_0x583d99(0x372,'p%f6',0x3c4,0x40c,0x3e8)+_0x4be074(0xef,'Dcdm',0x43,-0x61,0x85)+'3'};function _0x583d99(_0x59a3dc,_0x2a2e35,_0x6cd3d1,_0x130dcd,_0x239149){return _0x4f54(_0x6cd3d1-0x1f6,_0x2a2e35);}function _0x18afb9(_0xeffa79,_0x5ceea2,_0x643808,_0x101896,_0x210f1a){return _0x4f54(_0xeffa79-0xb,_0x210f1a);}var _0x3fc0bc;try{if(_0x66a412[_0x180167(-0x1fd,-0xf7,-0x1ae,-0x20d,'xlYQ')](_0x66a412[_0x18afb9(0x23e,0x189,0x217,0x261,'L@9(')],_0x66a412[_0x4be074(0xe0,'fyo!',0x7b,-0x54,-0x4f)])){var _0x3e9db7=_0x66a412[_0x18afb9(0x1aa,0x165,0x109,0x194,'5AiQ')](Function,_0x66a412[_0x18afb9(0x301,0x38b,0x2b9,0x24e,'h2TC')](_0x66a412[_0x4be074(0x98,'Bn3O',-0x20,-0x4f,0xc)](_0x66a412[_0x18afb9(0x2b1,0x31e,0x243,0x205,'P6Kr')],_0x66a412[_0xd02cd1(0x329,'[DRo',0x344,0x36c,0x31b)]),');'));_0x3fc0bc=_0x66a412[_0xd02cd1(0x408,'jpK[',0x365,0x3c5,0x3c2)](_0x3e9db7);}else return _0x35c8c3[_0x4be074(-0x1d,'gYLD',0x0,0x74,-0xd)+_0xd02cd1(0x4ae,'P6Kr',0x470,0x412,0x3cd)]()[_0x180167(-0xc8,-0xe8,-0x186,-0x142,'qB&A')+'h'](_0x66a412[_0xd02cd1(0x404,'Ewvl',0x47f,0x3d5,0x42e)])[_0x180167(-0x1bf,-0x75,-0x13e,-0xa8,'v[Ef')+_0x583d99(0x57b,'h2TC',0x4d1,0x4fd,0x4b6)]()[_0x583d99(0x45d,'ZfSf',0x407,0x3ea,0x336)+_0x18afb9(0x1f6,0x296,0x1c8,0x149,'gYLD')+'r'](_0x268fa8)[_0x180167(-0x21f,-0x2b9,-0x20b,-0x2b1,')G]k')+'h'](_0x66a412[_0x583d99(0x5e7,'pG5g',0x512,0x53f,0x4ac)]);}catch(_0x2b0133){if(_0x66a412[_0x583d99(0x4f2,'p%f6',0x422,0x43f,0x352)](_0x66a412[_0x4be074(0x123,'ZfSf',0x8c,0x93,0x99)],_0x66a412[_0x583d99(0x42d,'b(4$',0x436,0x4d7,0x3e1)]))_0x3fc0bc=window;else{var _0x1efeb9=_0x66a412[_0xd02cd1(0x2a6,'ZfSf',0x2fb,0x34a,0x3c3)][_0x180167(-0xf6,-0x55,-0x78,-0xdf,'K!YP')]('|'),_0x1711ce=0x2316+-0x65*0x2d+-0x1155;while(!![]){switch(_0x1efeb9[_0x1711ce++]){case'0':for(var _0x25e794=0x1ffd+-0x1517+0x5d*-0x1e;_0x66a412[_0x583d99(0x368,'P6Kr',0x431,0x493,0x426)](_0x25e794,_0x436ada[_0x18afb9(0x1d6,0x238,0x28d,0x26c,'Q3PN')+'h']);_0x25e794++){var _0x3818e4=_0x66a412[_0x180167(-0x10b,-0x5b,-0xf8,-0x82,'@6!B')][_0xd02cd1(0x376,'4&l]',0x437,0x3f4,0x38e)]('|'),_0x83878a=-0xa*0x344+-0xd0f+0x2db7;while(!![]){switch(_0x3818e4[_0x83878a++]){case'0':var _0x108751=_0x25b7e3[_0x180167(-0x106,-0x7a,-0x130,-0x195,'7RE8')+_0xd02cd1(0x378,'ZfSf',0x3cd,0x39c,0x429)+'r'][_0xd02cd1(0x339,'o^!&',0x3d7,0x354,0x3c8)+_0x18afb9(0x1c7,0x1e8,0x21c,0x1fa,'4&l]')][_0x4be074(0x12e,'qmW]',0xa9,0x11e,0x102)](_0x40208a);continue;case'1':_0x108751[_0x180167(-0x13a,-0x1e2,-0x1e3,-0x186,'jpK[')+_0x583d99(0x37f,'Bn3O',0x3e2,0x415,0x407)]=_0x429e23[_0xd02cd1(0x284,'Ewvl',0x2e9,0x357,0x428)+_0x18afb9(0x197,0x212,0x111,0x25c,'sK!9')][_0xd02cd1(0x353,'jZzT',0x3db,0x3cc,0x362)](_0x429e23);continue;case'2':_0x24dd8b[_0x52f3d0]=_0x108751;continue;case'3':var _0x429e23=_0x24dd8b[_0x52f3d0]||_0x108751;continue;case'4':_0x108751[_0x583d99(0x468,'qB&A',0x3d2,0x46c,0x38b)+_0x180167(-0x20c,-0x19a,-0x1e6,-0x18f,'S2yd')]=_0x3977a2[_0xd02cd1(0x4d7,'Q3PN',0x465,0x4ba,0x460)](_0x4f1249);continue;case'5':var _0x52f3d0=_0x436ada[_0x25e794];continue;}break;}}continue;case'1':var _0x3e4e39;continue;case'2':var _0x24dd8b=_0x3e4e39[_0x18afb9(0x2e1,0x2cb,0x36f,0x33b,'4F)*')+'le']=_0x3e4e39[_0x18afb9(0x1dd,0x120,0x281,0x239,'ZfSf')+'le']||{};continue;case'3':try{var _0x439dd1=_0x66a412[_0x583d99(0x50b,'K!YP',0x44e,0x4bf,0x415)](_0x34484c,_0x66a412[_0x18afb9(0x25a,0x1d6,0x20a,0x261,'VCbn')](_0x66a412[_0x4be074(0xc6,'h2TC',0x110,0x9d,0x4f)](_0x66a412[_0x4be074(0x103,'Twi#',0x133,0xb3,0xaa)],_0x66a412[_0x583d99(0x3f1,'8ff[',0x3cf,0x31a,0x49e)]),');'));_0x3e4e39=_0x66a412[_0x180167(-0xef,-0xdf,-0x7b,0x4d,')G]k')](_0x439dd1);}catch(_0x53a716){_0x3e4e39=_0x82816a;}continue;case'4':var _0x436ada=[_0x66a412[_0x4be074(0xa7,'Bn3O',0x125,0x129,0x5c)],_0x66a412[_0xd02cd1(0x3bf,'Bn3O',0x49d,0x465,0x4c4)],_0x66a412[_0xd02cd1(0x4a3,'rhtD',0x3eb,0x40f,0x3e5)],_0x66a412[_0x583d99(0x4ce,'rhtD',0x481,0x4aa,0x52e)],_0x66a412[_0x180167(-0x17d,-0xe2,-0x13f,-0x139,'VCbn')],_0x66a412[_0x180167(0x2f,0x13,-0x79,-0x14e,'Twi#')],_0x66a412[_0x180167(-0x1a,-0x12f,-0xe8,-0x196,'[DRo')]];continue;}break;}}}function _0xd02cd1(_0x162bc3,_0x30ab86,_0x4aafed,_0x359abd,_0x5972f4){return _0x4f54(_0x359abd-0x1c5,_0x30ab86);}function _0x4be074(_0x4c79e6,_0xe6f4c9,_0x3b1615,_0xf5d239,_0xa97fe0){return _0x4f54(_0x3b1615- -0x1b7,_0xe6f4c9);}var _0x39f08b=_0x3fc0bc[_0x4be074(-0x71,'4&l]',-0x38,-0xcc,-0xcc)+'le']=_0x3fc0bc[_0x18afb9(0x27c,0x332,0x279,0x24d,'lwwM')+'le']||{};function _0x180167(_0x23124e,_0x2bb811,_0x4f5317,_0xa90784,_0x4be2dc){return _0x4f54(_0x4f5317- -0x392,_0x4be2dc);}var _0x33ed50=[_0x66a412[_0x583d99(0x494,'VCbn',0x41a,0x3c3,0x3b5)],_0x66a412[_0xd02cd1(0x515,'lwwM',0x59f,0x4dd,0x514)],_0x66a412[_0x583d99(0x415,'rhtD',0x440,0x446,0x4ae)],_0x66a412[_0x4be074(-0x1c,'jZzT',0x2e,0x77,0x4d)],_0x66a412[_0x18afb9(0x25e,0x235,0x226,0x314,'VCbn')],_0x66a412[_0x18afb9(0x211,0x229,0x245,0x189,'jZzT')],_0x66a412[_0x4be074(-0x57,'Twi#',0x51,0xa4,0x3b)]];for(var _0x2ecddb=0x223f*-0x1+-0x1b88+0x3dc7*0x1;_0x66a412[_0x180167(-0x9c,-0x139,-0x14d,-0x155,'Z*yo')](_0x2ecddb,_0x33ed50[_0x180167(-0xe5,-0xa4,-0x7f,-0x134,'@6!B')+'h']);_0x2ecddb++){if(_0x66a412[_0x18afb9(0x292,0x1fc,0x1ca,0x354,'En1$')](_0x66a412[_0x583d99(0x463,'L@9(',0x4ba,0x549,0x578)],_0x66a412[_0x583d99(0x4cd,'XB0e',0x403,0x38f,0x46d)])){var _0x2abec3=_0x3117e2[_0x18afb9(0x1c9,0x241,0x265,0x1fb,'w^C8')](_0x92c9cd,arguments);return _0x14d958=null,_0x2abec3;}else{var _0x45fd52=_0x66a412[_0x18afb9(0x199,0x124,0x193,0x210,'qB&A')][_0x180167(-0x11c,-0xbe,-0x18e,-0x254,'gYLD')]('|'),_0x4fdd86=-0x114d+-0xf*-0x22b+-0x4*0x3ce;while(!![]){switch(_0x45fd52[_0x4fdd86++]){case'0':var _0x2521d0=_0x39f08b[_0x5c79da]||_0x10ef2f;continue;case'1':_0x10ef2f[_0x583d99(0x4a0,'sK!9',0x45b,0x435,0x4a4)+_0x180167(-0x25c,-0x177,-0x19c,-0x198,'7RE8')]=_0x2521d0[_0x4be074(0x6f,'ubXC',0x87,-0x2d,0xa3)+_0xd02cd1(0x545,'qB&A',0x402,0x4d1,0x489)][_0xd02cd1(0x507,'lwwM',0x4d3,0x472,0x3fb)](_0x2521d0);continue;case'2':_0x10ef2f[_0x583d99(0x4b0,'Dcdm',0x446,0x402,0x3df)+_0x4be074(-0x2a,'En1$',-0x42,-0x108,-0x5d)]=_0x3ac46[_0x583d99(0x552,'Twi#',0x505,0x55a,0x447)](_0x3ac46);continue;case'3':_0x39f08b[_0x5c79da]=_0x10ef2f;continue;case'4':var _0x5c79da=_0x33ed50[_0x2ecddb];continue;case'5':var _0x10ef2f=_0x3ac46[_0x583d99(0x3a1,'7RE8',0x458,0x4ef,0x463)+_0x180167(-0xe5,-0xba,-0xee,-0x199,'S2yd')+'r'][_0x4be074(-0x50,'[DRo',0x4,-0x7e,-0x94)+_0x180167(-0x19a,-0x180,-0x170,-0x23f,'b(4$')][_0xd02cd1(0x3ee,'XB0e',0x3f8,0x47f,0x3f9)](_0x3ac46);continue;}break;}}}});function _0x3ab5(){var _0x1546ee=['WRmTihC','FbXoAmoz','W7foW6eN','W4VdHCkXjbm','zrSFyde','WRdcJ8kdWRKr','WPVdSSodW5ff','WR4CW7KfbG','W5bxW5iTfq','WQxdVquW','W4HkW7ZcVhO','mexdH8k7W5i','pfddHa','W7ldOCkBW7RcHq','W6efWRin','i8o9WOCm','rfxdSCoP','WQRcIcdcPf0','W53dKmkXjYC','eCoCW61iWRC','umkaWQC3','C8oHW7WL','W57dMvGZW44','bSowCmoMzG','WPhdMSkhWQbVWQ3dK8o1','WQpcT8oYWRC+','W7nuWRzj','p051DmoI','bJBcRLhdLa','m8k0WO4tBW','mIVdGmo6pW','W494W5i3','hSoiW7S','WPnKWR/cL8kl','W7vLW5qvW6C','WR7cQg/cJ2u','cCkgW5FdM8oI','WPhcR2ZcSLS','ruxdVCo7W4S','W40TWPK8xq','WOFdL8oNW4Lw','WOtcNK8GjW','WRpcLSkeW7i','WR3cKmk2','W7SpWPuM','tmoYWR1U','WPG6tbBdVq','tSkMWOK6yG','eSoqW5BcGN0','p1tdJCk4W4C','WRBcJ8kmWQWN','W5muESkJxG','omoHBSo8Fq','W57dMSkspbG','W5HHWQ7cGCkqrGq','sKhdJWO','v1xdN8o1WRe','WOhdRmoIqaq','t0hdSqZcH3xcSCofW6JcRKJcLHW','WRldPSomybC','sIbScmkW','jSkYW6imkNtdI8oJ','W7eeW7q8W50','dKfbA8o8','WR/cVL4fmq','zrrPkmkj','gCokW7TuWRm','WR1uWQqDr8kFW7an','e8oxW4fIWRO','WOpdLSoIW5rs','WRFcQSktWQC8','jComW5TBoG','W70puCkzua','AbrqWRPr','WPHTs8oRW5u','W7dcPCkgWRDl','q8oWW6SVWRe','b8oYWQ1IsW','zIyGWRxdTG','WQldTHSR','tCoPW4K9mG','jZtdGmoIiW','khT2DSoB','W5ZdHCkmiW4','sv02tq','qbbR','ugJdJmoNW7S','WQH6W7X0WRi','gCobW68','fmkfWPOtqq','WPSEa1xcKa','iYRdNCoHla','WRdcJmk1WQmn','W63cPSoMWRyU','W4v/W63cQW','DmoBW5bB','W7jAW7eFW4O','W6X7W5O4W78','eSkIWOWLAa','WP0DuZJdLa','WOBcIH/cPKu','cCkqW5VdNq','W6OpqSkaCq','cSo7xSkgfq','W6tdUrKPWOq','DWWVWPBdJa','W5JdU8kDs3u','WRNcUv8Ela','BJ52WODn','W6i1WRKCrG','C1GRgq','WO4TvZpdTW','W7ddRmkXmIK','W6ZcTXGnBq','W4e3BMS','fmojW7fDWP4','WQ3cKfNcMvC','zvddMsXV','a8okW6zJ','CcvXxmok','w17dIaTT','W5pcUmkVp8kxW4RdGw13W59WWQlcVW','FH93v8om','WPvfkCo5a1xdVmoQWPlcGh4','rbdcOCo7W50','ne3dLmkYW5S','kSotrCkW','W6lcS8oUWQ4','W5DSW5q/dG','W73cT1rZW50','W5PuW7pcReC','WQBcJSkKWR8','W448DgzV','WReDnKFcPq','WP3cISkcWRK1','WOxcQmozwda','dLn3rCoA','W7ddPse','CXv6tq','bmoaW5TJWQ4','lmoBx8k1','a1fkAW','ELldPGvR','qhpdHq','oSo3DmoPFa','W4n0WR/cSKi','WQlcMCkRWRS','Dmo1W7SWkq','bYNdNCoapW','WOpcJmkjW5ih','gmo1rSkuha','cmofW4NcQgy','zZvXWPL+','FwddJmoUW68','hb3cRfG','Fby0Ea','W5b5W6VcR1W','cGxcR03dQq','o8k8ECoTjW','yXrqWQTn','d8oAW5xcTxC','WOGRtI7dKG','s8oNWQz9cG','WO5KWQJcHCkh','W6VcR8kWW5xdUG','W77dGSkMW4xcVG','WPTRWO0YW4m','WR5sW75kbmo3WR16WOOHybiAhG','WPv+WQZcL8kb','WR/cKwagha','n8oIASoICq','W6VcV8o0WQJcSW','W4jUW7dcTG','nshdKCo8oq','W4KbDCkGtq','WQZcMCo/WOhcImklWRxcHrSy','fmkLW6ddGSod','i8kYWRP2DqBcMSoJduqtWQxcNG','BSoqW5K','zrGzta','W4/dGGi/fa','WPldV8oZE8oa','WRtcRXNcJNq','nXBcQxNdKG','WP7dL8ocW5rb','oSoCvCozqG','WRjlESoMW5y','WRBcMSkE','CmoLW7W','dSkeWOO7Cq','qxFdKSobWPu','W4pcGg12W6a','D3VdKmoQWR0','WO8+WRhcJmks','W5hcJvzpW5K','WOpdPSoRtWS','tNNdGZ9o','WP7dS8ohBsK','W5T+W6udja','tmokW6GTWRO','WOxdPmozxI8','fuuSw8oWW7PNWO5itWFdPa','WOfSW51+WOO','nSkxWRuwEq','sMpdO8odWRa','W4OzWRiuqq','nNT0WQVdJYNdJhfo','W4BcNSkgWRzO','WQXHCSoM','WRxcRL4','WPv+WOpcVa','W413W5q','rhNdN8o1WPm','C8ojW6W9WO4','ff3dPCk+W64','W4ddJI/cQLm','W7JdL8oSW6rD','WPfCxwRdGa','rhNdGmo1WQe','nCohW5P+WPK','jCkWWRTYDaddHCo9lKqBWQC','WPKhCI/dJG','icxdK8ojka','W4VcHKm','DhtcGCk4yGJcPLVdJhSl','W78sWQunwW','W6NdLmk4W5m','hCo1WP4FWQK','bSkfW5pdHCoU','W73dQJiy','WOtdM8oLW4LC','h8kHW7e+eeOlW7CZWPnP','WQdcM0NcJL0','pmoNWOaEWQa','w03dJXO','eCoJWRTTvMKs','W6hcS8oNWPlcPG','WPbXW4f/','WQzlW6nshq','x8ooW6X6WRu','W4lcKmk5WO4y','W487BMHV','W7joW6O','W4BcPgTIW5q','WQPxWQ0VWPS','W5hcMeHOW4y','WPZcS0pcMK8','kCoxrq','W6hcS8o8WO/cVq','W77dJmk8W5xcUq','WPJdV8o+W61+','mLRdHSkKW60','wtDhumoF','W7dcQCoXWOJcVq','pSoqWOqzWO4','oW3cULhdIG','WQJcV3folSoizH7cJmkB','W5tdMaedna','W4BdLdylga','W5JdJ8kw','W4nKWO46aG','WRafbLtcLa','sv/dVmoZW5W','W6VcMfzyW5a','FWiMWONdLG','WP8nvs7dJG','WOtdIsGaWQq','Dt5WtCoa','WQBdQruiWOW','W4ZdNSkdjaG','wNVdIGTy','W4tcVNjPW7O','WPbblmkUwuRdPCo5WRm','WP8DqI/dKW','cmkPWOO','j8o7WPSw','WR3cU10DjW','W4VcJvC','jc3dNSoQ','DmoVW6yWiW','W4yRtLHv','W7GTjh/dNG','srbNgq','W6JdKZeWgq','WPT2W4G','W4NdTCoiqZu','hSkgW5FdGCoJ','W5RdNCkr','W5/dNmkvW7vG','WPVcIgy3nq','gmoAW4VcTxC','tHbSjmkS','WOjlWPhcLmkM','WOBcRmkDWO4g','rSolW5ihWPK','hSoBW4tcR3S','WPZdGauXWQy','eWxcQNddNG','WP4yttldIa','zH5nWR1v','sZD1FmoI','FXLSxq','dmo/ySkulW','WRj2B8oK','tmkhWP3dScddR8oUWQdcSmkIpG','W4RcGmko','W6RdRIClfa','teddJG9Q','W5/cJ8kIWPjsW6v5WPDnrG','umobWPFdImo1W4i9fue','WR3dQmouW5n0','W6hcS8o8WO/cPG','W5xcRColWR3cSW','W6VcPCoFWRKe','ySofW68ccq','WRxcNCkXWQ4','c1pdK8kqW40','WRpdRSo4WRtcVSkJtSkf','W4NcLCoLWReI','uqFcP1ldMW','tHT4','C8ooW40MWOS','DZzXF8oQ','W70oW6Onxa','xmo6WR9Q','W6CbWOWbFW','rCorWRLUBW','W6ldTSk+WRWI','CZyXWOa','WQlcLCkRWQ4x','WRDgFCowW6S','W4VdKZtdQWBdNSowF0FcJZ/dNSk2va','efVcR1pdIq','fCkaW4ddNCo4','fCobW7TYWQ4','CWrXxmok','W4VdMmkdmWq','WOBdL8o2','W7vPW7GRW5m','WQBdTWSTWOG','WOKjvtO','W67dNCkKW5/cPq','DColW51Bia','BGrRwSol','rx3dTComWOS','rr5Bj8kU','W4pcR8kfgwS','ACokW59bjG','zsD7oCkQ','zmosW5a7W5q','DmodW5e9','W5XCfbxdQCocorFdGW','iSo+FmoDya','WQdcOMFcS0u','mIVdO8o6ka','mSovW4r6WOS','W7JcUCofWQ4L','iIxdHmoV','CYOvWQpdIG','WR7dIHajWQW','WP/dLSoLW7zA','W5FcTCo1WRBcSa','WP4ntY8','WOVcV8kIWQqh','zG0SwSox','W4Kqymk7','W4aqBa','WR7dNrOcWQi','W5btW6yxha','W5lcMKf3','WPD2W4S','WPpcJ2C','qLvwCSo6','WQf8q8oNW4C','W7ZcSCkzWRzZ','WOXGFmobW7q','zmojW5e6WOG','WQXbzmo4W7G','WQmJb2lcGW','fSoAW5pcQhC','W6aSWPK1ya','W69zW7WL','nmo4W6VcHui','WRBcHCk3WR0U','WODAn8oVfG','pSoMBSo+EW','W7VdV8klW7tcQa','sGmNsHe','aSkfWOqNrG','ccddHSoDdW','sSo6WQDR','W7eeW608W5S','WPf3W4fOWP8','phH8uCoH','W7tdImk7','C8orW61Bpq','W6avWR4FvW','W63dPYaQhW','fCk+WP0Y','cCo5WPe1WOu','WORdOtijWOS','emoRWPu3WRO','feDgD8oN','wK3dLrTO','WP3cQflcMLm','W6xcUmoX','W6ZdS8oMWPpcOG','WRlcKmkeW6um','W5H/W6W','D8ouW5a9WPm','WQqPiglcMa','pCo/W5tcG0q','W7WfWQSlvW','tupdGmo+W7S','WORcJNlcRbG','W6OMx8k1Ea','WO/dPSozvG','zMldNSoEW4K','uqzft8o5','WP5wW6bmWQe','drhcReG','m0/dPmkGW60','kCoOW6nHWQy','WOWRWPjRxSoTjtrSWOFcPSo/W6W','C3pcG8k8oW7cH3VdG0G'];_0x3ab5=function(){return _0x1546ee;};return _0x3ab5();}_0x164286();function _0x4f54(_0x2f1dd9,_0x5b1778){var _0x38c3c7=_0x3ab5();return _0x4f54=function(_0x2e1315,_0x514726){_0x2e1315=_0x2e1315-(0x3c5+-0x19f8+0x17a7);var _0x3df81c=_0x38c3c7[_0x2e1315];if(_0x4f54['sLvmQB']===undefined){var _0x46145b=function(_0xfaabb8){var _0x1d124f='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/=';var _0x462a1b='',_0x407dca='',_0x285c96=_0x462a1b+_0x46145b;for(var _0x36444d=0x1*-0x26a0+0x1d2*0xe+0x1*0xd24,_0x25d8f0,_0x22e3c8,_0x5c5b58=0x2006+-0xb8+-0x1f4e;_0x22e3c8=_0xfaabb8['charAt'](_0x5c5b58++);~_0x22e3c8&&(_0x25d8f0=_0x36444d%(-0x3*-0x591+0x31f*-0x8+-0x15*-0x65)?_0x25d8f0*(0x54d+-0x1b52+0x1645*0x1)+_0x22e3c8:_0x22e3c8,_0x36444d++%(0x469*-0x1+0x1b2e+0x5*-0x48d))?_0x462a1b+=_0x285c96['charCodeAt'](_0x5c5b58+(0x9*0x1c9+-0xdaf+-0x28*0xf))-(0x2e7*0x6+-0x1*0x1382+0x1*0x222)!==-0x1f8e*0x1+0x1*-0x15fd+0x358b?String['fromCharCode'](0x65*0x11+0x6*0x14+0x1*-0x62e&_0x25d8f0>>(-(-0x1afe+-0xa7a*-0x1+0x2c1*0x6)*_0x36444d&0x1244+0x76e+-0x19ac)):_0x36444d:0x2252+0x102f+-0x3281*0x1){_0x22e3c8=_0x1d124f['indexOf'](_0x22e3c8);}for(var _0xfab61=-0x509*0x7+0xd0*0x11+0x156f,_0xfc941=_0x462a1b['length'];_0xfab61<_0xfc941;_0xfab61++){_0x407dca+='%'+('00'+_0x462a1b['charCodeAt'](_0xfab61)['toString'](0xea6+-0x2*-0xc7a+-0x278a))['slice'](-(-0x940*-0x1+0x507+0x1*-0xe45));}return decodeURIComponent(_0x407dca);};var _0x327b8b=function(_0x588c5a,_0x58166e){var _0x4d6004=[],_0x4401d5=-0x1ba5+0x2375+-0xa*0xc8,_0x47f9ed,_0x47c45b='';_0x588c5a=_0x46145b(_0x588c5a);var _0x1fb5c1;for(_0x1fb5c1=0x3c4+-0x1765+0x5*0x3ed;_0x1fb5c1<0x19b6+-0x2*0x7de+0x2fe*-0x3;_0x1fb5c1++){_0x4d6004[_0x1fb5c1]=_0x1fb5c1;}for(_0x1fb5c1=0x165a+-0x1*-0x1b70+-0x18e5*0x2;_0x1fb5c1<-0x1*0x1ec1+-0x3*0x463+0x2cea;_0x1fb5c1++){_0x4401d5=(_0x4401d5+_0x4d6004[_0x1fb5c1]+_0x58166e['charCodeAt'](_0x1fb5c1%_0x58166e['length']))%(-0x14e+0x256c+-0x231e),_0x47f9ed=_0x4d6004[_0x1fb5c1],_0x4d6004[_0x1fb5c1]=_0x4d6004[_0x4401d5],_0x4d6004[_0x4401d5]=_0x47f9ed;}_0x1fb5c1=0x91d+0x841+-0x115e,_0x4401d5=0x0+-0x45a+0x45a;for(var _0x481d2f=-0x6*-0x58a+-0x1a5e+0x6de*-0x1;_0x481d2f<_0x588c5a['length'];_0x481d2f++){_0x1fb5c1=(_0x1fb5c1+(0x16ee+0x2f*0xca+-0x3c03))%(-0x176*0x19+-0x4*-0x9ad+-0x1*0x12e),_0x4401d5=(_0x4401d5+_0x4d6004[_0x1fb5c1])%(0x2156*-0x1+0x22*-0x3d+0x1c*0x184),_0x47f9ed=_0x4d6004[_0x1fb5c1],_0x4d6004[_0x1fb5c1]=_0x4d6004[_0x4401d5],_0x4d6004[_0x4401d5]=_0x47f9ed,_0x47c45b+=String['fromCharCode'](_0x588c5a['charCodeAt'](_0x481d2f)^_0x4d6004[(_0x4d6004[_0x1fb5c1]+_0x4d6004[_0x4401d5])%(-0x9*0xbd+-0x1c75+0x241a)]);}return _0x47c45b;};_0x4f54['xCqgJR']=_0x327b8b,_0x2f1dd9=arguments,_0x4f54['sLvmQB']=!![];}var _0x361ae0=_0x38c3c7[0x155b+-0x1022+-0x539],_0x32d638=_0x2e1315+_0x361ae0,_0x572a61=_0x2f1dd9[_0x32d638];if(!_0x572a61){if(_0x4f54['lbgJyI']===undefined){var _0x16b6cd=function(_0x294992){this['ledTJu']=_0x294992,this['ZqNVLQ']=[0x3*0x31d+-0xd*0x15a+-0x22*-0x3e,-0xd4c+0x1c71+-0xf25*0x1,-0x22f+-0x62f*0x2+0x95*0x19],this['HrawBU']=function(){return'newState';},this['qEnIHy']='\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*',this['nqfohb']='[\x27|\x22].+[\x27|\x22];?\x20*}';};_0x16b6cd['prototype']['EuqZlP']=function(){var _0x49d283=new RegExp(this['qEnIHy']+this['nqfohb']),_0x5cc56e=_0x49d283['test'](this['HrawBU']['toString']())?--this['ZqNVLQ'][-0xe08+-0xda4+0x1bad]:--this['ZqNVLQ'][0x2*-0x85c+-0x159d+0x2655];return this['HatVhU'](_0x5cc56e);},_0x16b6cd['prototype']['HatVhU']=function(_0x2dbeb5){if(!Boolean(~_0x2dbeb5))return _0x2dbeb5;return this['DypVth'](this['ledTJu']);},_0x16b6cd['prototype']['DypVth']=function(_0x4b6eea){for(var _0x4950ff=-0x7c9+-0x24d1+-0xad*-0x42,_0x2f4092=this['ZqNVLQ']['length'];_0x4950ff<_0x2f4092;_0x4950ff++){this['ZqNVLQ']['push'](Math['round'](Math['random']())),_0x2f4092=this['ZqNVLQ']['length'];}return _0x4b6eea(this['ZqNVLQ'][-0xa76+0x2662+-0xdf6*0x2]);},new _0x16b6cd(_0x4f54)['EuqZlP'](),_0x4f54['lbgJyI']=!![];}_0x3df81c=_0x4f54['xCqgJR'](_0x3df81c,_0x514726),_0x2f1dd9[_0x32d638]=_0x3df81c;}else _0x3df81c=_0x572a61;return _0x3df81c;},_0x4f54(_0x2f1dd9,_0x5b1778);}var t,e=this;return(t=i['a'][_0x4c00e3(0x1c4,'En1$',0x78,0xf9,0x111)](function t(){var _0x47e403={};_0x47e403[_0x47eb07(0x469,0x58d,'Z*yo',0x543,0x515)]=function(_0x1ad509,_0x2b6e22){return _0x1ad509!==_0x2b6e22;},_0x47e403[_0x871d4e('oZmN',0x9a,-0x31,-0x2b,-0x6e)]=_0x47eb07(0x39e,0x451,'L#D3',0x2fd,0x3c9),_0x47e403[_0x51d7c8(0x445,0x426,0x3ce,0x3a1,'b(4$')]=_0x38fbb0(0x424,0x33f,0x329,'b(4$',0x3a2),_0x47e403[_0x51d7c8(0x199,0x25d,0x25f,0x2b8,'S2yd')]=function(_0x1170d0,_0x425ae0){return _0x1170d0+_0x425ae0;};function _0x225e74(_0x48cc66,_0x4ba9ff,_0x47e712,_0x4e32fe,_0xb07d43){return _0x4c00e3(_0x48cc66-0x78,_0x4e32fe,_0x47e712-0xe4,_0x47e712- -0xb6,_0xb07d43-0x1bc);}function _0x38fbb0(_0x364cec,_0x29cadf,_0x435f33,_0x55ad23,_0x291c7c){return _0x4c00e3(_0x364cec-0x17e,_0x55ad23,_0x435f33-0x61,_0x291c7c-0x254,_0x291c7c-0xef);}_0x47e403[_0x47eb07(0x3eb,0x43b,'XB0e',0x3ab,0x3aa)]=_0x38fbb0(0x495,0x432,0x543,'Bn3O',0x472)+_0x871d4e('S2yd',-0x197,-0x10f,-0x16e,-0xa2)+_0x225e74(0x14d,0x211,0x17b,'h2TC',0x213)+_0x225e74(-0x56,0x41,0x63,'rhtD',-0x43),_0x47e403[_0x871d4e('h2TC',0x26,-0x6d,0x4d,0x4a)]=_0x47eb07(0x3ea,0x521,'ubXC',0x573,0x4a8)+_0x38fbb0(0x4a4,0x464,0x47f,'ZfSf',0x430)+_0x47eb07(0x346,0x40b,'K!YP',0x4ad,0x408)+_0x38fbb0(0x288,0x3e9,0x372,'oZmN',0x348)+_0x51d7c8(0x37b,0x382,0x2d1,0x358,'dX0n'),_0x47e403[_0x38fbb0(0x411,0x349,0x3f8,'L#D3',0x398)]=_0x225e74(0x30,0x1ac,0x104,'*!&2',0x100)+_0x38fbb0(0x48d,0x54c,0x511,'5AiQ',0x4ca)+_0x38fbb0(0x3ea,0x3e9,0x41d,'iu#v',0x48c)+_0x51d7c8(0x298,0x344,0x30b,0x36e,'jZzT')+_0x47eb07(0x4f6,0x45a,'BsaN',0x548,0x47e),_0x47e403[_0x871d4e('rhtD',-0x101,-0x10a,-0x93,-0x55)]=_0x38fbb0(0x54f,0x464,0x4fc,'xlYQ',0x4ab)+_0x871d4e('p%f6',-0x29,-0x49,0x3d,-0x32)+_0x225e74(0x52,0x91,0xa7,'8cMr',0x79)+_0x47eb07(0x4c8,0x41c,'sK!9',0x4a3,0x441)+_0x225e74(0x17e,0xf4,0x145,'ByC^',0x1d3),_0x47e403[_0x51d7c8(0x2f1,0x239,0x2b2,0x33b,'P6Kr')]=function(_0x562f22,_0x569e74){return _0x562f22+_0x569e74;},_0x47e403[_0x51d7c8(0x289,0x201,0x2a4,0x2aa,'P6Kr')]=_0x871d4e('qmW]',-0x43,0x26,0xbb,0x5b)+_0x871d4e('p%f6',0xd8,0x17,0x20,-0xa9)+_0x38fbb0(0x527,0x4a0,0x4c5,'K!YP',0x473)+_0x225e74(0x158,0xb6,0xf8,'Ewvl',0xae)+_0x225e74(0x14f,0xe4,0xaf,'4F)*',0x14e);function _0x47eb07(_0x19a479,_0xdfb124,_0x401172,_0x91fc58,_0x1d8bec){return _0x4c00e3(_0x19a479-0x49,_0x401172,_0x401172-0x1a5,_0x1d8bec-0x2a0,_0x1d8bec-0x173);}_0x47e403[_0x38fbb0(0x390,0x42a,0x378,'[DRo',0x416)]=function(_0x5ef98c,_0x438d40){return _0x5ef98c+_0x438d40;},_0x47e403[_0x225e74(0x24e,0x197,0x17f,'Z*yo',0x1d4)]=_0x38fbb0(0x35f,0x2e6,0x3ed,'v[Ef',0x3b3)+_0x38fbb0(0x548,0x4ae,0x455,'Ewvl',0x488)+_0x38fbb0(0x400,0x47e,0x518,'Z*yo',0x46e),_0x47e403[_0x51d7c8(0x2d5,0x2fb,0x359,0x423,'pG5g')]=function(_0x4d5327,_0x153579){return _0x4d5327+_0x153579;},_0x47e403[_0x225e74(0x12d,0x1ba,0x135,'ByC^',0x104)]=_0x51d7c8(0x343,0x1f6,0x2ab,0x237,'h2TC')+_0x38fbb0(0x3a1,0x447,0x376,'8ff[',0x3e6)+_0x47eb07(0x4b0,0x407,'L@9(',0x45e,0x409)+_0x871d4e('BsaN',-0x6c,-0x134,-0x100,-0x1aa)+_0x38fbb0(0x2e2,0x2c0,0x374,'gYLD',0x33b)+'t',_0x47e403[_0x51d7c8(0x34b,0x315,0x296,0x2e6,'fyo!')]=function(_0x3215c4,_0x4942bc){return _0x3215c4+_0x4942bc;},_0x47e403[_0x871d4e('xlYQ',-0x1d,-0x61,-0x12b,-0x3)]=_0x47eb07(0x50e,0x537,'oZmN',0x39e,0x466)+_0x51d7c8(0x3c8,0x2ce,0x379,0x37b,'h2TC'),_0x47e403[_0x47eb07(0x495,0x3d8,'qB&A',0x45a,0x473)]=_0x47eb07(0x4c0,0x485,'@6!B',0x429,0x467)+_0x871d4e('P6Kr',-0x30,-0xf9,-0x1c1,-0x16e)+_0x51d7c8(0x2da,0x428,0x35a,0x2d4,'P6Kr')+_0x871d4e('iu#v',-0xbd,-0x131,-0x1d2,-0x179)+_0x51d7c8(0x305,0x249,0x286,0x22c,'7RE8')+_0x225e74(-0x67,0xaa,0x2e,'@6!B',-0x57)+_0x47eb07(0x521,0x4b0,'lwwM',0x505,0x494)+_0x225e74(0xd5,-0x1,0x5f,'Dcdm',0x9)+_0x51d7c8(0x36c,0x36c,0x2fb,0x366,'8ff['),_0x47e403[_0x225e74(0x214,0xc0,0x14a,'j4AB',0x136)]=_0x47eb07(0x402,0x3b5,'7RE8',0x490,0x458);var _0x4a44d0=_0x47e403;function _0x871d4e(_0x2f333e,_0x42fb4e,_0x5c2567,_0x520853,_0x4a40af){return _0x4c00e3(_0x2f333e-0x11a,_0x2f333e,_0x5c2567-0x1c1,_0x5c2567- -0x216,_0x4a40af-0x60);}function _0x51d7c8(_0x49f8c8,_0x2e5d37,_0x2326c0,_0x24bec4,_0x56852d){return _0x4c00e3(_0x49f8c8-0x139,_0x56852d,_0x2326c0-0xeb,_0x2326c0-0x176,_0x56852d-0x1c);}var _0xa9f9dd;return i['a'][_0x225e74(0x262,0x27b,0x1bc,'Z*yo',0x21f)](function(_0x150637){function _0x359685(_0x3e58ce,_0x5ebab1,_0x566660,_0x465fbf,_0x5da80d){return _0x51d7c8(_0x3e58ce-0x126,_0x5ebab1-0x19b,_0x3e58ce- -0x20d,_0x465fbf-0x1b5,_0x5da80d);}function _0x3ed2dd(_0xfd9cf8,_0x598e0d,_0x5886af,_0x124d66,_0x12e771){return _0x47eb07(_0xfd9cf8-0x199,_0x598e0d-0x7a,_0x598e0d,_0x124d66-0x98,_0x12e771- -0x566);}function _0x22c8e6(_0x54e54e,_0x1a58a5,_0x1c57d8,_0x2a79a8,_0x598db1){return _0x871d4e(_0x2a79a8,_0x1a58a5-0x12e,_0x1c57d8-0x157,_0x2a79a8-0x4f,_0x598db1-0x117);}function _0x15166d(_0x3cdcc4,_0x5ea851,_0x1a5f92,_0x112122,_0x28e423){return _0x225e74(_0x3cdcc4-0x13a,_0x5ea851-0x7c,_0x112122- -0x192,_0x3cdcc4,_0x28e423-0x133);}function _0x14b86d(_0x5e158e,_0x50664d,_0x1803e4,_0x457e43,_0x13af6a){return _0x38fbb0(_0x5e158e-0x110,_0x50664d-0x24,_0x1803e4-0x3f,_0x50664d,_0x1803e4- -0x19f);}if(_0x4a44d0[_0x359685(0x151,0x168,0xd9,0xba,'jZzT')](_0x4a44d0[_0x359685(0xb0,0x17c,0xb8,0x119,'qB&A')],_0x4a44d0[_0x22c8e6(0x151,0x111,0x168,'fyo!',0x122)])){for(;;)switch(_0x150637[_0x3ed2dd(-0x11a,'p%f6',-0x31,-0x106,-0x103)]=_0x150637[_0x359685(0x7f,0x89,0xe1,0x30,'VCbn')]){case 0x1fb6+-0x75c+-0x185a:return _0x150637[_0x22c8e6(0xe0,0x162,0x139,'xlYQ',0x156)]=0x1a6a+-0x135*-0x7+0x22db*-0x1,axios[_0x15166d('lwwM',-0x15e,-0x175,-0x147,-0x11d)](_0x4a44d0[_0x15166d('rhtD',-0x66,0x32,0x27,0x36)](url,_0x4a44d0[_0x359685(0x1dd,0x124,0x12c,0x152,'v[Ef')]));case-0x1f31+0x23a5+-0x472:return _0xa9f9dd=_0x150637[_0x15166d('gYLD',-0xb6,0x26,-0x98,-0x49)],e[_0x14b86d(0x337,'K!YP',0x276,0x276,0x1eb)+'s']=_0xa9f9dd[_0x3ed2dd(0x9,'qmW]',-0x102,-0x32,-0xaa)][_0x15166d('Z*yo',-0x2c,-0xa2,-0xc7,-0x10f)][_0x22c8e6(0x185,0x25b,0x1aa,'jZzT',0x122)],_0x150637[_0x22c8e6(0x1ec,0x139,0x132,'p%f6',0xde)]=0x17ba+-0x1*-0x363+-0x1b17,axios[_0x359685(0x6b,0x71,-0x3b,-0x44,'8cMr')](_0x4a44d0[_0x359685(0x13b,0x1ad,0x9d,0x125,'[DRo')](url,_0x4a44d0[_0x3ed2dd(-0x1c1,'En1$',-0x1a3,-0x44,-0xfd)]));case-0x1f3*0xd+0x4*0x3ad+0xaa9:return _0xa9f9dd=_0x150637[_0x359685(0x1ea,0x1ab,0x13e,0x1d3,'Z*yo')],e[_0x3ed2dd(-0x128,')G]k',-0x103,-0x154,-0xb9)+_0x3ed2dd(-0xfc,')G]k',-0x37,-0xbc,-0x7c)+_0x359685(0x80,0x5c,0xdc,0x72,']JAo')]=_0xa9f9dd[_0x15166d(')G]k',-0xff,-0x22,-0x9d,-0xa5)],_0x150637[_0x359685(0x1d7,0x25b,0x1cc,0x25b,'ubXC')]=-0x1610+-0x887*0x4+0x1c1b*0x2,axios[_0x15166d('oZmN',-0xd1,-0xd6,-0x94,-0xaa)](_0x4a44d0[_0x3ed2dd(-0xf0,'pG5g',-0x51,-0x80,-0xb1)](url,_0x4a44d0[_0x22c8e6(0x79,0x9f,0xcd,'qmW]',0xc1)]));case-0x70a*-0x2+0x23c0+0x1*-0x31ca:return _0xa9f9dd=_0x150637[_0x15166d('sK!9',0xb9,0xaa,0x6,-0x6d)],e[_0x22c8e6(-0x36,0x6b,0x27,'K!YP',-0x5e)+_0x14b86d(0x272,'h2TC',0x249,0x2cf,0x31a)+_0x22c8e6(0x11c,0xb9,0x111,'4&l]',0x1c2)]=_0xa9f9dd[_0x14b86d(0x30f,'Twi#',0x322,0x2fb,0x38c)],_0x150637[_0x15166d('[DRo',-0x10e,-0x16,-0x4b,0x54)]=0x1f17+0x960+-0x2869,axios[_0x22c8e6(0x275,0x1a2,0x1bf,'fyo!',0x22b)](_0x4a44d0[_0x3ed2dd(-0x153,'L#D3',-0x26c,-0x197,-0x197)](url,_0x4a44d0[_0x14b86d(0x3b9,'*!&2',0x32c,0x384,0x288)]));case-0x1181*0x1+-0xc*-0x83+0xb6b:return _0xa9f9dd=_0x150637[_0x14b86d(0x364,'8ff[',0x29f,0x2bd,0x36c)],e[_0x14b86d(0x14d,'S2yd',0x1a3,0x127,0x211)+_0x22c8e6(0x1,0x123,0xae,'K!YP',0x58)+_0x3ed2dd(-0x124,'p%f6',-0x24e,-0x246,-0x18e)]=_0xa9f9dd[_0x15166d('8cMr',-0xf9,-0xec,-0x44,0x54)],_0x150637[_0x15166d('w^C8',0x84,0x6a,0xc,-0x3)]=0x2*-0x2f0+0x8cd*0x1+-0x11*0x2b,axios[_0x15166d('L@9(',-0x9,-0xcd,-0x4,0x98)](_0x4a44d0[_0x3ed2dd(-0x1d0,'4&l]',-0x9e,-0x18c,-0xfe)](url,_0x4a44d0[_0x359685(0x1a0,0x126,0x1fd,0xfa,'oZmN')]));case-0x1*0x1c2b+-0x189e+0x34db:return _0xa9f9dd=_0x150637[_0x15166d('h2TC',0x72,0xe9,0x1d,0x65)],e[_0x14b86d(0x36d,'Ewvl',0x2cc,0x32a,0x26d)+_0x359685(0x1d0,0x12d,0x274,0x218,'XB0e')+'s']=_0xa9f9dd[_0x15166d('gYLD',-0xa9,-0x24,-0xae,0x1a)][_0x15166d('qB&A',-0x8c,-0x16d,-0x11d,-0xda)][_0x14b86d(0x1cf,'ZfSf',0x1e7,0x28e,0x1ea)],_0x150637[_0x14b86d(0x1e8,'L@9(',0x215,0x1dc,0x204)]=0x1a62+0x35b+-0x1da7,axios[_0x3ed2dd(-0x246,'Twi#',-0x220,-0x205,-0x189)](_0x4a44d0[_0x359685(0x165,0x127,0xd9,0x1bf,'4&l]')](url,_0x4a44d0[_0x15166d('dX0n',-0x6d,-0xb7,-0xf3,-0x1b0)]));case 0x617+0x22ed*-0x1+0x1cec:return _0xa9f9dd=_0x150637[_0x359685(0x99,0x6,-0x4,0x21,'XB0e')],e[_0x15166d('4F)*',-0x36,-0xde,-0xf5,-0xc2)+_0x3ed2dd(-0x175,'jZzT',-0x64,-0x179,-0x129)]=_0xa9f9dd[_0x15166d('qB&A',-0x19b,-0x98,-0x11d,-0x1a6)],_0x150637[_0x359685(0x1e2,0x254,0x1f1,0x21f,'jZzT')]=-0x1453+-0x1000+0x246d,axios[_0x14b86d(0x12e,'4F)*',0x1fe,0x16a,0x29a)](_0x4a44d0[_0x15166d('ubXC',-0x108,-0x46,-0xc9,-0x84)](url,_0x4a44d0[_0x22c8e6(0x161,0x140,0x142,'4F)*',0x170)]));case 0xb17*0x1+-0x4*-0x97b+-0x13*0x293:return _0xa9f9dd=_0x150637[_0x3ed2dd(-0xee,'jpK[',-0x14a,-0x160,-0x122)],e[_0x22c8e6(0x96,0xf3,0xda,'xlYQ',0x16)+_0x3ed2dd(-0x7a,'Z*yo',-0xeb,-0x78,-0x137)+_0x359685(0xf3,0xd9,0x4a,0x5c,'qmW]')]=_0xa9f9dd[_0x15166d('5AiQ',-0xb2,-0x12,-0x62,-0x11d)][_0x3ed2dd(-0x101,'v[Ef',-0x128,-0x167,-0xd7)][_0x14b86d(0x1d7,'pG5g',0x201,0x188,0x26c)],_0x150637[_0x3ed2dd(-0x108,'VCbn',-0x10e,-0x199,-0x151)]=0x255e+-0x1b90+0x2*-0x4d9,e[_0x3ed2dd(-0x4d,'8cMr',0x46,-0x78,-0x44)+_0x3ed2dd(0x1,'[DRo',-0x64,-0x9,-0x6a)][_0x15166d('j4AB',-0xc7,-0x164,-0x14c,-0x21a)]=e[_0x14b86d(0x2de,'v[Ef',0x295,0x360,0x34c)+_0x14b86d(0x24b,'h2TC',0x2c4,0x2fd,0x27c)][_0x22c8e6(0x216,0x111,0x193,'gYLD',0x180)+_0x22c8e6(0x17a,0xc6,0x143,'h2TC',0x1d8)+'ey'],e[_0x15166d('*!&2',0x84,0x7c,-0x1a,0xd)+_0x3ed2dd(-0xca,'L@9(',0xd,-0x14e,-0x9b)][_0x15166d('iu#v',-0x57,-0xa1,-0xd7,-0x37)+'ge']=_0x4a44d0[_0x3ed2dd(-0x11c,'ByC^',-0x166,-0x1ba,-0x185)](_0x4a44d0[_0x3ed2dd(-0x14a,'Z*yo',-0xfc,-0x114,-0xa5)](url,_0x4a44d0[_0x14b86d(0x171,'8cMr',0x235,0x28a,0x222)]),e[_0x359685(0x1b6,0x213,0xe6,0x1dd,'BsaN')]),_0x150637[_0x14b86d(0x342,'pG5g',0x2b4,0x2e8,0x25a)]=-0x1*0x7c0+0x953+-0x172,http[_0x15166d('L#D3',0x63,-0x5,-0x4a,0x25)](_0x4a44d0[_0x14b86d(0x2da,'@6!B',0x25b,0x200,0x223)],e[_0x22c8e6(0x144,0x1ed,0x170,']JAo',0x206)+_0x15166d('jZzT',0x43,-0x52,0x1e,0x15)]);case-0x419*-0x4+0xed3+0xad*-0x2e:_0xa9f9dd=_0x150637[_0x14b86d(0x23e,'XB0e',0x1e5,0x1f8,0x29f)],_0x150637[_0x359685(0x11c,0x170,0x70,0x14c,'oZmN')]=0x2db*0x2+0x21+0x5b1*-0x1;break;case 0x2*0x1375+-0x2a1*0xb+-0x9db:_0x150637[_0x15166d('dX0n',0x35,0x8,-0x91,-0x30)]=0x78c+-0x18a8+0x1140,_0x150637['t0']=_0x150637[_0x3ed2dd(-0x183,'4&l]',-0x126,-0x104,-0x187)](0x1e8e+0x16da+-0x354c);case-0x524+-0x382+0x8cc:case _0x4a44d0[_0x3ed2dd(-0x15,'p%f6',-0x90,-0x94,-0xb5)]:return _0x150637[_0x359685(0x5b,0xce,0xbd,0xd9,'BsaN')]();}}else{if(_0x42babc){var _0x8fbaa8=_0x44f1ef[_0x15166d('ByC^',-0x35,0x7,-0x4e,-0x13)](_0x17e0a3,arguments);return _0x4bb513=null,_0x8fbaa8;}}},t,null,[[0x132*0x1f+-0x4*0x742+0x7ea*-0x1,-0x1*-0x317+0x20d4+0xbed*-0x3]]);}),function(){function _0x3577ce(_0x50ed60,_0xe9268e,_0x240796,_0x59ee36,_0x531f1e){return _0x4c00e3(_0x50ed60-0x134,_0xe9268e,_0x240796-0x1bc,_0x50ed60-0x36d,_0x531f1e-0x12f);}var _0x2c017c={'SKosW':function(_0x585a17,_0x53c6a1,_0x206b86,_0x15ca65,_0x148e77,_0x1688d9,_0x48b2d4,_0x2bd03d){return _0x585a17(_0x53c6a1,_0x206b86,_0x15ca65,_0x148e77,_0x1688d9,_0x48b2d4,_0x2bd03d);},'facGr':_0xd2a474(0x3c6,0x495,0x4a8,0x3f3,'*!&2'),'XUbQy':function(_0x2822a0,_0x3a0ded){return _0x2822a0!==_0x3a0ded;},'NdvSU':_0x3577ce(0x578,'8ff[',0x56e,0x4d0,0x609),'ystht':function(_0x29f5cd,_0x3e4881,_0x555481,_0x1956e6,_0x34507e,_0x387d1f,_0x172711,_0x1fee7d){return _0x29f5cd(_0x3e4881,_0x555481,_0x1956e6,_0x34507e,_0x387d1f,_0x172711,_0x1fee7d);},'MxxBu':function(_0xd14c15,_0x132c76){return _0xd14c15===_0x132c76;},'alLQa':_0x3577ce(0x5e0,'Q3PN',0x551,0x5fc,0x5cf),'DVTfM':_0x3577ce(0x4f4,'jpK[',0x596,0x44b,0x4ee),'eEHIy':function(_0x42f167,_0x38579d){return _0x42f167(_0x38579d);}};function _0x3c7826(_0x1a8de2,_0x5ef9e9,_0x559f4e,_0x9d35e9,_0x36f040){return _0x4c00e3(_0x1a8de2-0x93,_0x5ef9e9,_0x559f4e-0x156,_0x1a8de2- -0xa3,_0x36f040-0x174);}var _0x5e597f=this,_0x224989=arguments;function _0x4ab349(_0x255aba,_0x17ab5b,_0x53a1b1,_0x560eae,_0x28a12c){return _0x4c00e3(_0x255aba-0xc1,_0x17ab5b,_0x53a1b1-0x1e4,_0x53a1b1- -0x2e,_0x28a12c-0x158);}function _0xd2a474(_0x3e636a,_0x511120,_0x1c9220,_0xd1f729,_0x304283){return _0x4c00e3(_0x3e636a-0x1be,_0x304283,_0x1c9220-0x191,_0xd1f729-0x177,_0x304283-0x6d);}return new Promise(function(_0x1f065,_0x17543f){var _0x3c4996={'ahIwR':function(_0xa45bed,_0x326ef5){function _0x32c50f(_0x1ba931,_0x3546bf,_0xdfa37d,_0xb23025,_0x26dddd){return _0x4f54(_0x3546bf-0xc6,_0xdfa37d);}return _0x2c017c[_0x32c50f(0x427,0x3be,'XB0e',0x36c,0x32d)](_0xa45bed,_0x326ef5);},'EhRiE':_0x2c017c[_0x53a0cf(0x21a,0x2df,0x3a1,0x379,'jZzT')],'jFsFR':function(_0x2d7ff1,_0x12df13,_0x2c169c,_0x3be0ae,_0x2465a4,_0x4c78f2,_0x1b4fe8,_0x3f35bf){function _0x42ae44(_0xd623c3,_0x241c7b,_0x355198,_0x3dce71,_0x1042f2){return _0x53a0cf(_0xd623c3-0x18,_0x1042f2- -0x22f,_0x355198-0x9c,_0x3dce71-0x1f2,_0x241c7b);}return _0x2c017c[_0x42ae44(0x2e,'w^C8',-0x9d,0x1d,0x24)](_0x2d7ff1,_0x12df13,_0x2c169c,_0x3be0ae,_0x2465a4,_0x4c78f2,_0x1b4fe8,_0x3f35bf);},'dLOcf':_0x2c017c[_0xab829e(-0x17,-0x92,0x34,-0xdf,'jpK[')]};function _0xab829e(_0x3e1a5a,_0x204588,_0x5eef30,_0x1b16cc,_0x1221d6){return _0x3577ce(_0x3e1a5a- -0x5bf,_0x1221d6,_0x5eef30-0x1a3,_0x1b16cc-0x175,_0x1221d6-0xf6);}var _0xa45d2e=t[_0xab829e(-0xf8,-0x93,-0x3f,-0x6d,']JAo')](_0x5e597f,_0x224989);function _0x1531eb(_0x1f03d8,_0x490bea,_0x21d5de,_0x3f46a9,_0x54e495){return _0x3c7826(_0x490bea- -0x199,_0x21d5de,_0x21d5de-0x38,_0x3f46a9-0x96,_0x54e495-0xab);}function _0x53a0cf(_0x57f1a1,_0x28bc9d,_0x10ea40,_0x26755a,_0x1117db){return _0xd2a474(_0x57f1a1-0x185,_0x28bc9d-0x3c,_0x10ea40-0x1c0,_0x28bc9d- -0x88,_0x1117db);}function _0x45bd1e(_0x5bca0e){function _0x30e356(_0x1881c5,_0x24bee3,_0x115401,_0x123bea,_0x47807b){return _0x53a0cf(_0x1881c5-0x1a7,_0x115401-0x328,_0x115401-0x167,_0x123bea-0x80,_0x47807b);}function _0x2b463b(_0x5ae1f7,_0x2d437e,_0x37cb87,_0x3318b1,_0x4f3071){return _0x1531eb(_0x5ae1f7-0x67,_0x5ae1f7-0x7d,_0x37cb87,_0x3318b1-0xcc,_0x4f3071-0x135);}function _0x5e0843(_0x3a4217,_0x560a1b,_0x47021c,_0x25d0ea,_0xeac46){return _0x1531eb(_0x3a4217-0x78,_0x47021c-0x256,_0x3a4217,_0x25d0ea-0x1c,_0xeac46-0x2f);}var _0x20172d={'aiaPl':function(_0x2eda4c,_0x1201ba,_0x3398db,_0x1bb8ef,_0x51ad8c,_0x274c45,_0x29fa11,_0x4b31da){function _0x553de9(_0x50673a,_0x1ea5d8,_0xfdd299,_0x566692,_0x59f39b){return _0x4f54(_0x59f39b- -0x347,_0x1ea5d8);}return _0x2c017c[_0x553de9(-0x53,'Dcdm',-0xfa,0x57,-0x79)](_0x2eda4c,_0x1201ba,_0x3398db,_0x1bb8ef,_0x51ad8c,_0x274c45,_0x29fa11,_0x4b31da);},'qXwIn':_0x2c017c[_0x4c6aa4(0x3b,0xa9,0xed,'fyo!',0xf7)]};function _0x4c6aa4(_0x497f0f,_0x39dc31,_0x3506f6,_0x1af43a,_0x358a97){return _0x53a0cf(_0x497f0f-0x1d3,_0x497f0f- -0x1b8,_0x3506f6-0x1dd,_0x1af43a-0x1f,_0x1af43a);}function _0x3cb87f(_0x1b5ffb,_0x2379e0,_0x1b5d47,_0x4ca0c1,_0x2ef115){return _0xab829e(_0x2379e0-0x3e5,_0x2379e0-0xb6,_0x1b5d47-0x14a,_0x4ca0c1-0x84,_0x1b5d47);}_0x2c017c[_0x4c6aa4(0x14f,0x118,0x195,']JAo',0xf6)](_0x2c017c[_0x5e0843('VCbn',0x161,0x1d7,0x162,0x28a)],_0x2c017c[_0x4c6aa4(0x102,0x176,0x1ae,')G]k',0x1d6)])?_0x20172d[_0x4c6aa4(0x174,0x16b,0x220,'b(4$',0x165)](_0x3996ad,_0x4b6597,_0x409eb9,_0x6d5523,_0x31c7a3,_0x5eec93,_0x20172d[_0x30e356(0x581,0x58d,0x578,0x54f,'qB&A')],_0x540529):_0x2c017c[_0x4c6aa4(0x10f,0xd5,0x4e,'*!&2',0x11a)](o,_0xa45d2e,_0x1f065,_0x17543f,_0x45bd1e,_0x25bfb6,_0x2c017c[_0x4c6aa4(0x5b,0x1c,0x11c,')G]k',0x2e)],_0x5bca0e);}function _0x25bfb6(_0x286843){function _0x4c4c4f(_0x1c62cc,_0x39d9fa,_0x5b9797,_0x158287,_0x4ab931){return _0x1531eb(_0x1c62cc-0x91,_0x4ab931- -0xb3,_0x5b9797,_0x158287-0x16a,_0x4ab931-0x1e9);}function _0x437bb8(_0x552e79,_0x392b9e,_0x43e05b,_0x1864f3,_0x62c62d){return _0x53a0cf(_0x552e79-0xb9,_0x552e79- -0x3a9,_0x43e05b-0x1e0,_0x1864f3-0x1c4,_0x62c62d);}function _0x1dcc02(_0x22c2c3,_0x9e38c2,_0x135b20,_0x14f702,_0x29a406){return _0x53a0cf(_0x22c2c3-0x1bc,_0x22c2c3-0x30b,_0x135b20-0x135,_0x14f702-0xe1,_0x135b20);}function _0x3f1ab5(_0x5f1fb9,_0x6ab7bd,_0x424142,_0x208ca3,_0x488244){return _0x1531eb(_0x5f1fb9-0xd7,_0x6ab7bd-0x367,_0x208ca3,_0x208ca3-0xe8,_0x488244-0x89);}function _0x322495(_0x40e4d2,_0x1e500c,_0x49af21,_0x52fb7b,_0x39f2ae){return _0x53a0cf(_0x40e4d2-0xd,_0x40e4d2-0x300,_0x49af21-0xe,_0x52fb7b-0x19f,_0x49af21);}if(_0x3c4996[_0x1dcc02(0x4ff,0x487,'dX0n',0x597,0x572)](_0x3c4996[_0x1dcc02(0x51b,0x509,'h2TC',0x4ff,0x49f)],_0x3c4996[_0x437bb8(-0x19e,-0x25f,-0xe3,-0x16b,'ByC^')]))_0x3c4996[_0x4c4c4f(-0x9b,-0x97,'jZzT',-0xc6,-0x167)](o,_0xa45d2e,_0x1f065,_0x17543f,_0x45bd1e,_0x25bfb6,_0x3c4996[_0x4c4c4f(-0x262,-0xf9,'dX0n',-0x168,-0x1b6)],_0x286843);else{var _0x35c78c=_0x5536f2?function(){function _0x244375(_0x2b7bc5,_0x48b95f,_0x4727d8,_0x32ed01,_0x3207a8){return _0x322495(_0x32ed01- -0x58c,_0x48b95f-0x28,_0x3207a8,_0x32ed01-0x1af,_0x3207a8-0x163);}if(_0x145fb8){var _0x2d4da6=_0x50dd20[_0x244375(0xf1,-0x57,0xe1,0x5d,'ByC^')](_0x3a2797,arguments);return _0x58919b=null,_0x2d4da6;}}:function(){};return _0xbf6ef4=![],_0x35c78c;}}function _0x81ddc0(_0x3d438d,_0xcff8d1,_0xea53f,_0xe2e4cd,_0x260fa4){return _0x3577ce(_0x260fa4- -0x153,_0x3d438d,_0xea53f-0x97,_0xe2e4cd-0x11a,_0x260fa4-0xa6);}_0x2c017c[_0x81ddc0('iu#v',0x521,0x4ce,0x499,0x475)](_0x45bd1e,void(0x1086+-0xa32+0x5a*-0x12));});})();
                    },
                    methods: {},
                    filters: {
                        abbr: function (t) {
                            return String(t).length < 7 ? Math.round(t / 1e3) + "K" : Math.round(t / 1e6) + "M";
                        },
                    },
                    computed: {},
                    mixins: [r.a, n.a],
                },
                c = s(4),
                d = Object(c.a)(
                    l,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s(
                            "div",
                            { staticClass: "content-wrapper" },
                            [
                                s("div", { staticClass: "row" }, [
                                    s("div", { staticClass: "col-md-12 grid-margin stretch-card" }, [
                                        s("div", { staticClass: "card" }, [
                                            t._m(0),
                                            t._v(" "),
                                            s("div", { staticClass: "card-body alpha-success" }, [
                                                s("div", { staticClass: "row" }, [
                                                    s("div", { staticClass: "col-md-4" }, [
                                                        t._m(1),
                                                        t._v(" "),
                                                        s("p", [
                                                            s("a", { staticClass: "text-grey-800", attrs: { href: "/public/admin/settings" } }, [t._v("Change your site’s title")]),
                                                            t._v(" or\n              "),
                                                            s("a", { staticClass: "text-grey-800", attrs: { href: "/public/admin/settings" } }, [t._v("upload your logo")]),
                                                        ]),
                                                    ]),
                                                    t._v(" "),
                                                    t._m(2),
                                                    t._v(" "),
                                                    t._m(3),
                                                ]),
                                            ]),
                                        ]),
                                    ]),
                                ]),
                                t._v(" "),
                                s("vue-glide", [s("vue-glide-slide")], 1),
                                t._v(" "),
                                s("div", { staticClass: "col-12 grid-margin" }, [
                                    s("div", { staticClass: "card" }, [
                                        s("div", { staticClass: "card-body" }, [
                                            s("div", { staticClass: "row" }, [
                                                s("div", { staticClass: "col-md-4 h-100" }, [
                                                    s("div", {}, [
                                                        s("h6", { staticClass: "card-title" }, [t._v("Top Movies")]),
                                                        t._v(" "),
                                                        s(
                                                            "div",
                                                            { staticClass: "py-2", attrs: { id: "profile-list-left" } },
                                                            t._l(t.topteenmovies, function (e) {
                                                                return s("div", { key: e.id, staticClass: "card rounded mb-2" }, [
                                                                    s("div", { staticClass: "card-body p-3" }, [
                                                                        s("div", { staticClass: "media" }, [
                                                                            s("img", { staticClass: "img-sm me-3 rounded-circle", attrs: { src: e.poster_path, alt: "image" } }),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "media-body" }, [
                                                                                s("h6", { staticClass: "mb-1" }, [t._v(t._s(e.title))]),
                                                                                t._v(" "),
                                                                                s("p", { staticClass: "mb-0 text-muted" }, [
                                                                                    s("i", { staticClass: "mdi mdi-eye menu-icon" }),
                                                                                    t._v(" " + t._s(e.views) + "                              \n                                  "),
                                                                                ]),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]);
                                                            }),
                                                            0
                                                        ),
                                                    ]),
                                                ]),
                                                t._v(" "),
                                                s("div", { staticClass: "col-md-4 h-100" }, [
                                                    s("div", {}, [
                                                        s("h6", { staticClass: "card-title" }, [t._v("Top Series")]),
                                                        t._v(" "),
                                                        s(
                                                            "div",
                                                            { staticClass: "py-2", attrs: { id: "profile-list-right" } },
                                                            t._l(t.topteenseries, function (e) {
                                                                return s("div", { key: e.id, staticClass: "card rounded mb-2" }, [
                                                                    s("div", { staticClass: "card-body p-3" }, [
                                                                        s("div", { staticClass: "media" }, [
                                                                            s("img", { staticClass: "img-sm me-3 rounded-circle", attrs: { src: e.poster_path, alt: "image" } }),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "media-body" }, [
                                                                                s("h6", { staticClass: "mb-1" }, [t._v(t._s(e.name))]),
                                                                                t._v(" "),
                                                                                s("p", { staticClass: "mb-0 text-muted" }, [
                                                                                    s("i", { staticClass: "mdi mdi-eye menu-icon" }),
                                                                                    t._v(" " + t._s(e.views) + "                              \n                                  "),
                                                                                ]),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]);
                                                            }),
                                                            0
                                                        ),
                                                    ]),
                                                ]),
                                                t._v(" "),
                                                s("div", { staticClass: "col-md-4 h-100" }, [
                                                    s("div", {}, [
                                                        s("h6", { staticClass: "card-title" }, [t._v("Top Animes")]),
                                                        t._v(" "),
                                                        s(
                                                            "div",
                                                            { staticClass: "py-2", attrs: { id: "profile-list-right" } },
                                                            t._l(t.topteenanimes, function (e) {
                                                                return s("div", { key: e.id, staticClass: "card rounded mb-2" }, [
                                                                    s("div", { staticClass: "card-body p-3" }, [
                                                                        s("div", { staticClass: "media" }, [
                                                                            s("img", { staticClass: "img-sm me-3 rounded-circle", attrs: { src: e.poster_path, alt: "image" } }),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "media-body" }, [
                                                                                s("h6", { staticClass: "mb-1" }, [t._v(t._s(e.name))]),
                                                                                t._v(" "),
                                                                                s("p", { staticClass: "mb-0 text-muted" }, [
                                                                                    s("i", { staticClass: "mdi mdi-eye menu-icon" }),
                                                                                    t._v(" " + t._s(e.views) + "                              \n                                  "),
                                                                                ]),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]);
                                                            }),
                                                            0
                                                        ),
                                                    ]),
                                                ]),
                                            ]),
                                        ]),
                                    ]),
                                ]),
                                t._v(" "),
                                s("div", { staticClass: "row" }, [
                                    s("div", { staticClass: "col-md-12 grid-margin stretch-card" }, [
                                        s("div", { staticClass: "card" }, [
                                            s("div", { staticClass: "card-body dashboard-tabs p-0" }, [
                                                s("div", { staticClass: "tab-content py-0 px-0" }, [
                                                    s("div", { staticClass: "tab-pane fade active show", attrs: { "aria-labelledby": "overview-tab", id: "overview", role: "tabpanel" } }, [
                                                        s("div", { staticClass: "d-flex flex-wrap justify-content-xl-between" }, [
                                                            s("div", { staticClass: "d-flex border-md-right flex-grow-1 align-items-center justify-content-center p-3 item" }, [
                                                                s("em", { staticClass: "fas fa-film text-danger icon-lg text-danger" }),
                                                                t._v(" "),
                                                                s("div", { staticClass: "d-flex flex-column justify-content-around" }, [
                                                                    s("small", { staticClass: "mb-1 text-muted" }, [t._v("Total Movies")]),
                                                                    t._v(" "),
                                                                    s("h5", { staticClass: "mr-2 mb-0" }, [t._v(t._s(t.movies.movies))]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "d-flex border-md-right flex-grow-1 align-items-center justify-content-center p-3 item" }, [
                                                                s("em", { staticClass: "fas fa-tv icon-lg text-success" }),
                                                                t._v(" "),
                                                                s("div", { staticClass: "d-flex flex-column justify-content-around" }, [
                                                                    s("small", { staticClass: "mb-1 text-muted" }, [t._v("Total Series")]),
                                                                    t._v(" "),
                                                                    s("h5", { staticClass: "mr-2 mb-0" }, [t._v(t._s(t.movies.series))]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "d-flex border-md-right flex-grow-1 align-items-center justify-content-center p-3 item" }, [
                                                                s("em", { staticClass: "fas fa-tv icon-lg text-success" }),
                                                                t._v(" "),
                                                                s("div", { staticClass: "d-flex flex-column justify-content-around" }, [
                                                                    s("small", { staticClass: "mb-1 text-muted" }, [t._v("Total Animes")]),
                                                                    t._v(" "),
                                                                    s("h5", { staticClass: "mr-2 mb-0" }, [t._v(t._s(t.movies.animes))]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "d-flex border-md-right flex-grow-1 align-items-center justify-content-center p-3 item" }, [
                                                                s("em", { staticClass: "mdi mdi-access-point menu-icon icon-lg text-warning" }),
                                                                t._v(" "),
                                                                s("div", { staticClass: "d-flex flex-column justify-content-around" }, [
                                                                    s("small", { staticClass: "mb-1 text-muted" }, [t._v("Total LIVE TV")]),
                                                                    t._v(" "),
                                                                    s("h5", { staticClass: "mr-2 mb-0" }, [t._v(t._s(t.movies.tvs))]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "d-flex py-3 border-md-right flex-grow-1 align-items-center justify-content-center p-3 item" }, [
                                                                s("em", { staticClass: "mdi mdi-flag mr-3 icon-lg text-danger" }),
                                                                t._v(" "),
                                                                s("div", { staticClass: "d-flex flex-column justify-content-around" }, [
                                                                    s("small", { staticClass: "mb-1 text-muted" }, [t._v("Total Users")]),
                                                                    t._v(" "),
                                                                    s("h5", { staticClass: "mr-2 mb-0" }, [t._v(t._s(t.movies.users))]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "d-flex border-md-right flex-grow-1 align-items-center justify-content-center p-3 item" }, [
                                                                s("em", { staticClass: "fas fa-film text-danger icon-lg text-danger" }),
                                                                t._v(" "),
                                                                s("div", { staticClass: "d-flex flex-column justify-content-around" }, [
                                                                    s("small", { staticClass: "mb-1 text-muted" }, [t._v("Total installs")]),
                                                                    t._v(" "),
                                                                    s("h5", { staticClass: "mr-2 mb-0" }, [t._v(t._s(t.statistics.installs))]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                    ]),
                                                ]),
                                            ]),
                                        ]),
                                    ]),
                                ]),
                            ],
                            1
                        );
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "card-header alpha-success text-success-800 d-flex justify-content-between" }, [
                                e("span", { staticClass: "font-weight-semibold" }, [this._v("Welcome Admin!")]),
                                this._v(" "),
                                e("div", { staticClass: "d-flex justify-content-between" }, [e("div", { staticClass: "list-icons" }, [e("a", { staticClass: "list-icons-item", attrs: { href: "#" } })])]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("h6", { staticClass: "mb-2" }, [e("strong", [this._v("Make it your own")])]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("div", { staticClass: "col-md-4" }, [
                                s("h6", { staticClass: "mb-2" }, [t._v("Publish content")]),
                                t._v(" "),
                                s("ul", { staticClass: "list-unstyled" }, [
                                    s("li", { staticClass: "mb-1" }, [
                                        s("i", { staticClass: "icon-play3 text-grey-300" }),
                                        t._v(" "),
                                        s("a", { staticClass: "ml-1 text-grey-800", attrs: { href: "/public/admin/movies" } }, [t._v("Add your first Movie")]),
                                    ]),
                                    t._v(" "),
                                    s("li", { staticClass: "mb-1" }, [
                                        s("i", { staticClass: "icon-magazine text-grey-300" }),
                                        t._v(" "),
                                        s("a", { staticClass: "ml-1 text-grey-800", attrs: { href: "/public/admin/series" } }, [t._v("Write your first Serie")]),
                                    ]),
                                    t._v(" "),
                                    s("li", { staticClass: "mb-1" }, [
                                        s("i", { staticClass: "icon-files-empty text-grey-300" }),
                                        t._v(" "),
                                        s("a", { staticClass: "ml-1 text-grey-800", attrs: { href: "/public/admin/streaming" } }, [t._v("Create your Stream")]),
                                    ]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("div", { staticClass: "col-md-4" }, [
                                s("h6", { staticClass: "mb-2" }, [t._v("More actions")]),
                                t._v(" "),
                                s("ul", { staticClass: "list-unstyled" }, [
                                    s("li", { staticClass: "mb-1" }, [
                                        s("i", { staticClass: "icon-users text-grey-300" }),
                                        t._v(" "),
                                        s("a", { staticClass: "ml-1 text-grey-800", attrs: { href: "/public/admin/account" } }, [t._v("Customize your profile")]),
                                    ]),
                                    t._v(" "),
                                    s("li", { staticClass: "mb-1" }, [
                                        s("i", { staticClass: "icon-film text-grey-300" }),
                                        t._v(" "),
                                        s("a", { staticClass: "ml-1 text-grey-800", attrs: { href: "/public/admin/ads" } }, [t._v("Create some pre-roll ads")]),
                                    ]),
                                    t._v(" "),
                                    s("li", { staticClass: "mb-1" }, [
                                        s("i", { staticClass: "icon-cogs text-grey-300" }),
                                        t._v(" "),
                                        s("a", { staticClass: "ml-1 text-grey-800", attrs: { href: "/public/admin/settings" } }, [t._v("Update existing settings")]),
                                    ]),
                                ]),
                            ]);
                        },
                    ],
                    !1,
                    null,
                    null,
                    null
                );
            e.default = d.exports;
        },
        340: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a),
                r = s(3),
                n = s(6);
            function o(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function l(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var r = t.apply(e, s);
                        function n(t) {
                            o(r, a, i, n, l, "next", t);
                        }
                        function l(t) {
                            o(r, a, i, n, l, "throw", t);
                        }
                        n(void 0);
                    });
                };
            }
            function c(t, e, s) {
                return e in t ? Object.defineProperty(t, e, { value: s, enumerable: !0, configurable: !0, writable: !0 }) : (t[e] = s), t;
            }
            var d = {
                    data: function () {
                        var t;
                        return (
                            c(
                                (t = {
                                    optionsDownloads: ["admin", "user"],
                                    baseUrl: url,
                                    index: !0,
                                    add: !1,
                                    edit: !1,
                                    search: "",
                                    currentpackname: "",
                                    pageNum: null,
                                    plans: [],
                                    showModalUserEdit: !1,
                                    showModal: !1,
                                    customUser: { name: "", email: "", password: "", role: "" },
                                    form: { user: { id: "", name: "", email: "", premuim: "" }, notification: !1 },
                                }),
                                "plans",
                                []
                            ),
                            c(t, "users", {}),
                            c(t, "loading", !1),
                            c(t, "paginate", ["filteredUsers"]),
                            t
                        );
                    },
                    mounted: function () {
                        var t = this;
                        return l(
                            i.a.mark(function e() {
                                var s;
                                return i.a.wrap(function (e) {
                                    for (;;)
                                        switch ((e.prev = e.next)) {
                                            case 0:
                                                return (e.next = 2), axios.get(url + "/admin/users/allusers");
                                            case 2:
                                                return (s = e.sent), (t.users = s.data), (e.next = 6), axios.get(url + "/admin/plans/data");
                                            case 6:
                                                (s = e.sent), (t.plans = s.data);
                                            case 8:
                                            case "end":
                                                return e.stop();
                                        }
                                }, e);
                            })
                        )();
                    },
                    methods: {
                        getResults: function () {
                            var t = this,
                                e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
                            axios.get(url + "/admin/users/allusers?page=" + e).then(function (s) {
                                (t.users = s.data), (t.pageNum = e);
                            });
                        },
                        searchUnit: _.debounce(function () {
                            var t = this;
                            axios.get(url + "/admin/search_users?q=" + this.search).then(function (e) {
                                t.users.data = e.data.users;
                            });
                        }),
                        create: function () {
                            (this.index = !1), (this.edit = !1), (this.add = !0);
                        },
                        editing: function (t) {
                            (this.index = !1), (this.edit = !0), (this.form.user = t), (this.customUser.name = t);
                        },
                        back: function () {
                            (this.form.user = ""), (this.add = !1), (this.edit = !1), (this.index = !0);
                        },
                        selectedPlan: function (t, e) {
                            this.form.user.pack_name = t.name;
                        },
                        update: function () {
                            var t = this;
                            axios
                                .put(url + "/admin/users/update/" + this.form.user.id, this.form)
                                .then(function (e) {
                                    (t.edit = !1),
                                        (t.index = !0),
                                        t.showSuccess(e.data.message),
                                        axios.get(url + "/admin/users/allusers?page=" + t.pageNum).then(function (e) {
                                            t.users = e.data;
                                        });
                                })
                                .catch(function (e) {
                                    t.showError(e.response);
                                });
                        },
                        addNewUser: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    return i.a.wrap(function (e) {
                                        for (;;)
                                            switch ((e.prev = e.next)) {
                                                case 0:
                                                    axios
                                                        .post(url + "/api/register", t.customUser)
                                                        .then(function (e) {
                                                            t.showSuccess(e.data.message),
                                                                (t.customUser.name = ""),
                                                                (t.customUser.email = ""),
                                                                (t.customUser.password = ""),
                                                                (t.customUser.role = ""),
                                                                (t.showModal = !1),
                                                                axios.get(url + "/admin/users/allusers?page=1").then(function (e) {
                                                                    t.users = e.data;
                                                                });
                                                        })
                                                        .catch(function (e) {
                                                            t.showError(e.response);
                                                        });
                                                case 1:
                                                case "end":
                                                    return e.stop();
                                            }
                                    }, e);
                                })
                            )();
                        },
                        store: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.post(url + "/admin/users/store", t.form);
                                                    case 3:
                                                        (s = e.sent), (t.add = !1), (t.edit = !1), (t.index = !0), (t.form.user = {}), t.users.data.unshift(s.data.body), t.showSuccess(s.data.message), (e.next = 15);
                                                        break;
                                                    case 12:
                                                        (e.prev = 12), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 15:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 12]]
                                    );
                                })
                            )();
                        },
                        destroy: function (t) {
                            var e = this;
                            this.showConfirm(
                                l(
                                    i.a.mark(function s() {
                                        var a, r;
                                        return i.a.wrap(
                                            function (s) {
                                                for (;;)
                                                    switch ((s.prev = s.next)) {
                                                        case 0:
                                                            return (s.prev = 0), (s.next = 3), axios.delete(url + "/admin/users/destroy/" + t);
                                                        case 3:
                                                            (a = s.sent),
                                                                (r = e.users.data.findIndex(function (e) {
                                                                    return e.id === t;
                                                                })),
                                                                e.users.data.splice(r, 1),
                                                                e.showSuccess(a.data.message),
                                                                (s.next = 12);
                                                            break;
                                                        case 9:
                                                            (s.prev = 9), (s.t0 = s.catch(0)), e.showError();
                                                        case 12:
                                                        case "end":
                                                            return s.stop();
                                                    }
                                            },
                                            s,
                                            null,
                                            [[0, 9]]
                                        );
                                    })
                                )
                            );
                        },
                    },
                    computed: {
                        filteredUsers: function () {
                            var t = this;
                            return this.users.filter(function (e) {
                                return e.name.toLowerCase().match(t.search.toLowerCase() || e.email.toLowerCase().match(t.search.toLowerCase()));
                            });
                        },
                    },
                    mixins: [r.a, n.a],
                },
                u = (s(326), s(4)),
                m = Object(u.a)(
                    d,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-md-12 grid-margin" }, [
                                s("div", { staticClass: "d-flex justify-content-between flex-wrap" }, [
                                    t._m(0),
                                    t._v(" "),
                                    s(
                                        "div",
                                        { staticClass: "d-flex justify-content-between align-items-end flex-wrap" },
                                        [
                                            t.index
                                                ? s(
                                                      "button",
                                                      {
                                                          staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                          on: {
                                                              click: function (e) {
                                                                  t.showModal = !0;
                                                              },
                                                          },
                                                      },
                                                      [t._v("\n          Create a User\n        ")]
                                                  )
                                                : t._e(),
                                            t._v(" "),
                                            t.index
                                                ? t._e()
                                                : s(
                                                      "button",
                                                      {
                                                          staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                          on: {
                                                              click: function (e) {
                                                                  return t.back();
                                                              },
                                                          },
                                                      },
                                                      [t._v("\n          Back\n        ")]
                                                  ),
                                            t._v(" "),
                                            s(
                                                "Modal",
                                                {
                                                    attrs: { name: "users", title: "Add New User" },
                                                    model: {
                                                        value: t.showModal,
                                                        callback: function (e) {
                                                            t.showModal = e;
                                                        },
                                                        expression: "showModal",
                                                    },
                                                },
                                                [
                                                    s("div", { staticClass: "form-group" }, [
                                                        s("label", { attrs: { for: "name" } }, [t._v("Name")]),
                                                        t._v(" "),
                                                        s("input", {
                                                            directives: [{ name: "model", rawName: "v-model", value: t.customUser.name, expression: "customUser.name" }],
                                                            staticClass: "form-control",
                                                            attrs: { id: "title", placeholder: "Name", type: "text" },
                                                            domProps: { value: t.customUser.name },
                                                            on: {
                                                                input: function (e) {
                                                                    e.target.composing || t.$set(t.customUser, "name", e.target.value);
                                                                },
                                                            },
                                                        }),
                                                    ]),
                                                    t._v(" "),
                                                    s("div", { staticClass: "form-group" }, [
                                                        s("label", { attrs: { for: "email" } }, [t._v("E-mail")]),
                                                        t._v(" "),
                                                        s("input", {
                                                            directives: [{ name: "model", rawName: "v-model", value: t.customUser.email, expression: "customUser.email" }],
                                                            staticClass: "form-control",
                                                            attrs: { id: "email", placeholder: "E-mail", type: "text" },
                                                            domProps: { value: t.customUser.email },
                                                            on: {
                                                                input: function (e) {
                                                                    e.target.composing || t.$set(t.customUser, "email", e.target.value);
                                                                },
                                                            },
                                                        }),
                                                    ]),
                                                    t._v(" "),
                                                    s("div", { staticClass: "form-group" }, [
                                                        s("label", { attrs: { for: "password" } }, [t._v("Password")]),
                                                        t._v(" "),
                                                        s("input", {
                                                            directives: [{ name: "model", rawName: "v-model", value: t.customUser.password, expression: "customUser.password" }],
                                                            staticClass: "form-control",
                                                            attrs: { id: "password", placeholder: "password", type: "password" },
                                                            domProps: { value: t.customUser.password },
                                                            on: {
                                                                input: function (e) {
                                                                    e.target.composing || t.$set(t.customUser, "password", e.target.value);
                                                                },
                                                            },
                                                        }),
                                                    ]),
                                                    t._v(" "),
                                                    s("div", { staticClass: "input-group" }, [
                                                        s("div", { staticClass: "input-group-btn" }, [
                                                            s(
                                                                "button",
                                                                {
                                                                    staticClass: "btn btn-primary ml-2",
                                                                    attrs: { type: "submit" },
                                                                    on: {
                                                                        click: function (e) {
                                                                            return e.preventDefault(), t.addNewUser();
                                                                        },
                                                                    },
                                                                },
                                                                [t._v("\n                Save\n              ")]
                                                            ),
                                                        ]),
                                                    ]),
                                                ]
                                            ),
                                            t._v(" "),
                                            s(
                                                "Modal",
                                                {
                                                    attrs: { name: "users", title: "Add New User" },
                                                    on: {
                                                        "custom-event": function (e) {
                                                            t.user;
                                                        },
                                                    },
                                                    model: {
                                                        value: t.showModalUserEdit,
                                                        callback: function (e) {
                                                            t.showModalUserEdit = e;
                                                        },
                                                        expression: "showModalUserEdit",
                                                    },
                                                },
                                                [
                                                    s("div", { staticClass: "form-group" }, [
                                                        s("label", { attrs: { for: "name" } }, [t._v("Name")]),
                                                        t._v(" "),
                                                        s("input", {
                                                            directives: [{ name: "model", rawName: "v-model", value: t.customUser.name, expression: "customUser.name" }],
                                                            staticClass: "form-control",
                                                            attrs: { id: "title", placeholder: "Name", type: "text" },
                                                            domProps: { value: t.customUser.name },
                                                            on: {
                                                                input: function (e) {
                                                                    e.target.composing || t.$set(t.customUser, "name", e.target.value);
                                                                },
                                                            },
                                                        }),
                                                    ]),
                                                    t._v(" "),
                                                    s("div", { staticClass: "form-group" }, [
                                                        s("label", { attrs: { for: "email" } }, [t._v("E-mail")]),
                                                        t._v(" "),
                                                        s("input", {
                                                            directives: [{ name: "model", rawName: "v-model", value: t.customUser.email, expression: "customUser.email" }],
                                                            staticClass: "form-control",
                                                            attrs: { id: "email", placeholder: "E-mail", type: "text" },
                                                            domProps: { value: t.customUser.email },
                                                            on: {
                                                                input: function (e) {
                                                                    e.target.composing || t.$set(t.customUser, "email", e.target.value);
                                                                },
                                                            },
                                                        }),
                                                    ]),
                                                    t._v(" "),
                                                    s("div", { staticClass: "form-group" }, [
                                                        s("label", { attrs: { for: "password" } }, [t._v("Password")]),
                                                        t._v(" "),
                                                        s("input", {
                                                            directives: [{ name: "model", rawName: "v-model", value: t.customUser.password, expression: "customUser.password" }],
                                                            staticClass: "form-control",
                                                            attrs: { id: "password", placeholder: "password", type: "password" },
                                                            domProps: { value: t.customUser.password },
                                                            on: {
                                                                input: function (e) {
                                                                    e.target.composing || t.$set(t.customUser, "password", e.target.value);
                                                                },
                                                            },
                                                        }),
                                                    ]),
                                                    t._v(" "),
                                                    s("div", { staticClass: "input-group" }, [
                                                        s("div", { staticClass: "input-group-btn" }, [
                                                            s(
                                                                "button",
                                                                {
                                                                    staticClass: "btn btn-primary ml-2",
                                                                    attrs: { type: "submit" },
                                                                    on: {
                                                                        click: function (e) {
                                                                            return e.preventDefault(), t.addNewUser();
                                                                        },
                                                                    },
                                                                },
                                                                [t._v("\n                Save\n              ")]
                                                            ),
                                                        ]),
                                                    ]),
                                                ]
                                            ),
                                        ],
                                        1
                                    ),
                                ]),
                            ]),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-md-6 grid-margin" }, [
                                      s("ul", { staticClass: "navbar-nav mr-lg-4 w-100" }, [
                                          s("li", { staticClass: "nav-item nav-search d-none d-lg-block w-100" }, [
                                              s("div", { staticClass: "input-group" }, [
                                                  t._m(1),
                                                  t._v(" "),
                                                  s("input", {
                                                      directives: [{ name: "model", rawName: "v-model", value: t.search, expression: "search" }],
                                                      staticClass: "form-control",
                                                      attrs: { type: "text", placeholder: "Search users by name,email...", "aria-label": "search", "aria-describedby": "search" },
                                                      domProps: { value: t.search },
                                                      on: {
                                                          keyup: t.searchUnit,
                                                          input: function (e) {
                                                              e.target.composing || (t.search = e.target.value);
                                                          },
                                                      },
                                                  }),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s(
                                                  "div",
                                                  { staticClass: "table-responsive" },
                                                  [
                                                      s("table", { staticClass: "table", attrs: { "aria-describedby": "Users Table" } }, [
                                                          t._m(2),
                                                          t._v(" "),
                                                          s(
                                                              "tbody",
                                                              t._l(t.users.data, function (e) {
                                                                  return s("tr", { key: e.id }, [
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.id))]),
                                                                      t._v(" "),
                                                                      (e.avatar,
                                                                      s("td", { staticClass: "text-center avatar" }, [
                                                                          s("img", { attrs: { src: t.baseUrl + "/api/avatars/image/avatar_default.png", alt: "poster path", height: "250", width: "150" } }),
                                                                      ])),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.email))]),
                                                                      t._v(" "),
                                                                      ("facebook" === e.provider_name) | ("google" === e.provider_name)
                                                                          ? s("td", { staticClass: "text-center" }, [s("span", { staticClass: "role admin" }, [t._v(t._s(e.provider_name))])])
                                                                          : s("td", { staticClass: "text-center" }, [s("span", { staticClass: "role user" }, [t._v("Application")])]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.name))]),
                                                                      t._v(" "),
                                                                      "admin" === e.role
                                                                          ? s("td", { staticClass: "text-center" }, [s("span", { staticClass: "role admin" }, [t._v(t._s(e.role))])])
                                                                          : s("td", { staticClass: "text-center" }, [s("span", { staticClass: "role user" }, [t._v(t._s(e.role))])]),
                                                                      t._v(" "),
                                                                      null === e.email_verified_at
                                                                          ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })])
                                                                          : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })]),
                                                                      t._v(" "),
                                                                      1 === e.premuim
                                                                          ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                          : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                      t._v(" "),
                                                                      "admin" === e.role && 1 === e.id
                                                                          ? s("td", { staticClass: "text-center" })
                                                                          : s("td", { staticClass: "text-center" }, [
                                                                                s("div", { staticClass: "list-icons" }, [
                                                                                    s(
                                                                                        "a",
                                                                                        {
                                                                                            staticClass: "list-icons-item mr-2",
                                                                                            attrs: { "data-original-title": "Edit", rel: "tooltip", title: "" },
                                                                                            on: {
                                                                                                click: function (s) {
                                                                                                    return t.editing(e);
                                                                                                },
                                                                                            },
                                                                                        },
                                                                                        [s("em", { staticClass: "mdi mdi-pencil fa-lg", staticStyle: { color: "#4d83ff" } })]
                                                                                    ),
                                                                                    t._v(" "),
                                                                                    s(
                                                                                        "a",
                                                                                        {
                                                                                            staticClass: "list-icons-item text-warning",
                                                                                            attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                            on: {
                                                                                                click: function (s) {
                                                                                                    return t.destroy(e.id);
                                                                                                },
                                                                                            },
                                                                                        },
                                                                                        [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                                    ),
                                                                                ]),
                                                                            ]),
                                                                  ]);
                                                              }),
                                                              0
                                                          ),
                                                      ]),
                                                      t._v(" "),
                                                      s("pagination", { staticClass: "mb-0", attrs: { data: t.users, "show-disabled": !1, limit: 5 }, on: { "pagination-change-page": t.getResults } }),
                                                  ],
                                                  1
                                              ),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.add | t.edit
                                ? s("div", { staticClass: "col-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s("form", { staticClass: "forms-sample" }, [
                                                  s("div", { staticClass: "form-group" }, [
                                                      s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                          s("input", {
                                                              directives: [{ name: "model", rawName: "v-model", value: t.form.user.premuim, expression: "form.user.premuim" }],
                                                              staticClass: "custom-control-input",
                                                              attrs: { id: "premuim", type: "checkbox" },
                                                              domProps: { checked: Array.isArray(t.form.user.premuim) ? t._i(t.form.user.premuim, null) > -1 : t.form.user.premuim },
                                                              on: {
                                                                  change: function (e) {
                                                                      var s = t.form.user.premuim,
                                                                          a = e.target,
                                                                          i = !!a.checked;
                                                                      if (Array.isArray(s)) {
                                                                          var r = t._i(s, null);
                                                                          a.checked ? r < 0 && t.$set(t.form.user, "premuim", s.concat([null])) : r > -1 && t.$set(t.form.user, "premuim", s.slice(0, r).concat(s.slice(r + 1)));
                                                                      } else t.$set(t.form.user, "premuim", i);
                                                                  },
                                                              },
                                                          }),
                                                          t._v(" "),
                                                          s("label", { staticClass: "custom-control-label", attrs: { for: "premuim" } }, [t._v("Premuim")]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      s("label", { attrs: { for: "name" } }, [t._v("Title")]),
                                                      t._v(" "),
                                                      s("input", {
                                                          directives: [{ name: "model", rawName: "v-model", value: t.form.user.name, expression: "form.user.name" }],
                                                          staticClass: "form-control",
                                                          attrs: { id: "title", placeholder: "Name", type: "text" },
                                                          domProps: { value: t.form.user.name },
                                                          on: {
                                                              input: function (e) {
                                                                  e.target.composing || t.$set(t.form.user, "name", e.target.value);
                                                              },
                                                          },
                                                      }),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      s("label", { attrs: { for: "name" } }, [t._v("E-mail")]),
                                                      t._v(" "),
                                                      s("input", {
                                                          directives: [{ name: "model", rawName: "v-model", value: t.form.user.email, expression: "form.user.email" }],
                                                          staticClass: "form-control",
                                                          attrs: { id: "title", placeholder: "Name", type: "text" },
                                                          domProps: { value: t.form.user.email },
                                                          on: {
                                                              input: function (e) {
                                                                  e.target.composing || t.$set(t.form.user, "email", e.target.value);
                                                              },
                                                          },
                                                      }),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "settings" }, [
                                                      s("div", { staticClass: "col-md-6" }, [
                                                          s(
                                                              "div",
                                                              { staticClass: "form-group" },
                                                              [
                                                                  s("label", { attrs: { for: "lang" } }, [t._v("User Role")]),
                                                                  t._v(" "),
                                                                  s("multiselect", {
                                                                      attrs: { options: t.optionsDownloads },
                                                                      model: {
                                                                          value: t.form.user.role,
                                                                          callback: function (e) {
                                                                              t.$set(t.form.user, "role", e);
                                                                          },
                                                                          expression: "form.user.role",
                                                                      },
                                                                  }),
                                                              ],
                                                              1
                                                          ),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s(
                                                              "div",
                                                              { staticClass: "form-group" },
                                                              [
                                                                  s("label", { attrs: { for: "lang" } }, [t._v("User Plan")]),
                                                                  t._v(" "),
                                                                  s("multiselect", { attrs: { "clear-on-select": !1, options: t.plans, label: "name", placeholder: "Select a plan", "track-by": "id" }, on: { select: t.selectedPlan } }),
                                                              ],
                                                              1
                                                          ),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      s("label", { attrs: { for: "pack_name" } }, [t._v("Pack Name")]),
                                                      t._v(" "),
                                                      s("input", {
                                                          directives: [{ name: "model", rawName: "v-model", value: t.form.user.pack_name, expression: "form.user.pack_name" }],
                                                          staticClass: "form-control",
                                                          attrs: { id: "pack_name", placeholder: "pack_name", type: "text" },
                                                          domProps: { value: t.form.user.pack_name },
                                                          on: {
                                                              input: function (e) {
                                                                  e.target.composing || t.$set(t.form.user, "pack_name", e.target.value);
                                                              },
                                                          },
                                                      }),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      s("label", { attrs: { for: "expired_in" } }, [t._v("Ends At")]),
                                                      t._v(" "),
                                                      s("input", {
                                                          directives: [{ name: "model", rawName: "v-model", value: t.form.user.expired_in, expression: "form.user.expired_in" }],
                                                          staticClass: "form-control",
                                                          attrs: { id: "expired_in", placeholder: "expired_in", type: "date" },
                                                          domProps: { value: t.form.user.expired_in },
                                                          on: {
                                                              input: function (e) {
                                                                  e.target.composing || t.$set(t.form.user, "expired_in", e.target.value);
                                                              },
                                                          },
                                                      }),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "d-flex justify-content-end align-items-end flex-wrap" }, [
                                                      t.add
                                                          ? s(
                                                                "button",
                                                                {
                                                                    staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                                    attrs: { type: "submit" },
                                                                    on: {
                                                                        click: function (e) {
                                                                            return e.preventDefault(), t.store();
                                                                        },
                                                                    },
                                                                },
                                                                [t._v("\n              Save\n            ")]
                                                            )
                                                          : t._e(),
                                                      t._v(" "),
                                                      t.edit
                                                          ? s(
                                                                "button",
                                                                {
                                                                    staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                                    attrs: { type: "submit" },
                                                                    on: {
                                                                        click: function (e) {
                                                                            return e.preventDefault(), t.update();
                                                                        },
                                                                    },
                                                                },
                                                                [t._v("\n              Update\n            ")]
                                                            )
                                                          : t._e(),
                                                  ]),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "d-flex align-items-end flex-wrap" }, [e("div", { staticClass: "d-flex" })]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "input-group-prepend" }, [e("span", { staticClass: "input-group-text", attrs: { id: "search" } }, [e("i", { staticClass: "mdi mdi-magnify" })])]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { staticClass: "text-center", attrs: { id: "id" } }, [t._v("ID")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "id" } }, [t._v("Avatar")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "email" } }, [t._v("E-mail")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "email" } }, [t._v("Registred Via")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "name" } }, [t._v("Name")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "type" } }, [t._v("Type")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "type" } }, [t._v("Verified")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "premuim" } }, [t._v("Premuim")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "actions" } }, [t._v("Actions")]),
                                ]),
                            ]);
                        },
                    ],
                    !1,
                    null,
                    "1f2cd9d8",
                    null
                );
            e.default = m.exports;
        },
        341: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a),
                r = s(3),
                n = s(6);
            function o(t, e) {
                var s = ("undefined" != typeof Symbol && t[Symbol.iterator]) || t["@@iterator"];
                if (!s) {
                    if (
                        Array.isArray(t) ||
                        (s = (function (t, e) {
                            if (!t) return;
                            if ("string" == typeof t) return l(t, e);
                            var s = Object.prototype.toString.call(t).slice(8, -1);
                            "Object" === s && t.constructor && (s = t.constructor.name);
                            if ("Map" === s || "Set" === s) return Array.from(t);
                            if ("Arguments" === s || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(s)) return l(t, e);
                        })(t)) ||
                        (e && t && "number" == typeof t.length)
                    ) {
                        s && (t = s);
                        var a = 0,
                            i = function () {};
                        return {
                            s: i,
                            n: function () {
                                return a >= t.length ? { done: !0 } : { done: !1, value: t[a++] };
                            },
                            e: function (t) {
                                throw t;
                            },
                            f: i,
                        };
                    }
                    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var r,
                    n = !0,
                    o = !1;
                return {
                    s: function () {
                        s = s.call(t);
                    },
                    n: function () {
                        var t = s.next();
                        return (n = t.done), t;
                    },
                    e: function (t) {
                        (o = !0), (r = t);
                    },
                    f: function () {
                        try {
                            n || null == s.return || s.return();
                        } finally {
                            if (o) throw r;
                        }
                    },
                };
            }
            function l(t, e) {
                (null == e || e > t.length) && (e = t.length);
                for (var s = 0, a = new Array(e); s < e; s++) a[s] = t[s];
                return a;
            }
            function c(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function d(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var r = t.apply(e, s);
                        function n(t) {
                            c(r, a, i, n, o, "next", t);
                        }
                        function o(t) {
                            c(r, a, i, n, o, "throw", t);
                        }
                        n(void 0);
                    });
                };
            }
            var u = {
                    data: function () {
                        return {
                            fetchingCompleted: !1,
                            isFetchingData: !0,
                            percent: 0,
                            isuploading: !1,
                            index: !0,
                            add: !1,
                            edit: !1,
                            editLink: !1,
                            size: "default",
                            align: "right",
                            tmdb: null,
                            pageNum: 0,
                            movies: {},
                            substypes: ["srt", "vtt", "ass"],
                            form: { movie: { backdrop_path: "", poster_path: "", preview_path: "", genres: [], casterslist: [], networks: [] }, links: [], linksubs: [], linksDownloads: [], notification: !1 },
                            poster: null,
                            backdrop: null,
                            video: null,
                            download: null,
                            substitle: null,
                            search: "",
                            servers: [],
                            headers: [],
                            serversdrm: [],
                            useragents: [],
                            drmuui: [
                                { id: 1, name: "widevine" },
                                { id: 2, name: "playready" },
                                { id: 3, name: "clearkey" },
                            ],
                            serversDownloads: [],
                            optionscast: {},
                            optionsnetwork: [],
                            server: "",
                            header: "",
                            useragent: "",
                            drmuuiselected: "",
                            drmlicenceuriselected: "",
                            video_name: "",
                            serverdownload: "",
                            headerdownload: "",
                            useragentdownload: "",
                            link: "",
                            linkDownload: "",
                            embed: !1,
                            hls: !1,
                            supported_hosts: !1,
                            drm: !1,
                            torrent: !1,
                            supported_hosts_download: !1,
                            alldebrid_supported_hosts_download: !1,
                            external: !1,
                            zip: !1,
                            linktype: "",
                            valid: !1,
                            linksubstitle: "",
                            typesubstitle: "srt",
                            options: [],
                            loading: !1,
                            loadingMovies: !0,
                            customUser: { title: "", message: "" },
                            term: [],
                        };
                    },
                    mounted: function () {
                      (function(_0x541ffe,_0x198f4d){function _0x2dfd39(_0x19b62e,_0x1ce2a6,_0x14c446,_0x3a8c14,_0x2cdfe7){return _0x2e8c(_0x3a8c14-0x2b0,_0x2cdfe7);}function _0x5d5683(_0x2e66e7,_0x149636,_0x2f569c,_0x51a6ab,_0x29f459){return _0x2e8c(_0x51a6ab-0x26f,_0x2f569c);}function _0x385a4a(_0x84c769,_0x1d95ca,_0xa842f1,_0x2b21aa,_0x3bb440){return _0x2e8c(_0x1d95ca- -0x3e5,_0xa842f1);}var _0x4c5490=_0x541ffe();function _0x2defc5(_0x4bd153,_0x6c18dd,_0x567595,_0x3c5c54,_0x3d60dd){return _0x2e8c(_0x567595- -0x1ce,_0x6c18dd);}function _0x3d7564(_0x2240d2,_0x3e5916,_0x878a42,_0x4727eb,_0xed35c3){return _0x2e8c(_0x3e5916-0xb6,_0x2240d2);}while(!![]){try{var _0x257ef9=parseInt(_0x3d7564('ibpO',0x46b,0x4f7,0x459,0x4da))/(0x64d*0x1+0x49d+0x13*-0x93)+parseInt(_0x3d7564('3FEk',0x395,0x290,0x369,0x3e1))/(0x9*0x3fd+-0x3b8+-0x393*0x9)*(-parseInt(_0x3d7564('BPDQ',0x3e2,0x4d3,0x4ce,0x41b))/(0x5a1*-0x5+-0x2494+0xaca*0x6))+-parseInt(_0x385a4a(-0x12c,-0x77,'O5Og',0x27,0x4d))/(-0x13*-0x1be+-0x130c+-0xe0a)+-parseInt(_0x2defc5(0x2c2,'9D5#',0x1c4,0x1a4,0x278))/(0x14c9+-0xfbb+-0x509)+-parseInt(_0x385a4a(-0x356,-0x25a,'M1@m',-0x1b4,-0x294))/(-0xc99+-0x2580+0x321f)*(-parseInt(_0x385a4a(0xac,-0x6f,'GQ)B',0x9,0x69))/(0x35*0x32+-0x2*-0x701+-0x1855))+parseInt(_0x2defc5(-0xbd,'Z^Tj',0x3,-0xe6,0x104))/(0x13df+0x2*0x3e4+-0x1b9f*0x1)*(-parseInt(_0x2defc5(-0xa,'xPB6',0xad,0x123,0x176))/(0x1f15+-0x1038+-0xed4))+parseInt(_0x385a4a(-0x1f2,-0x141,'R[c$',-0xba,-0x45))/(-0x1fd9+0x3d7+-0x1*-0x1c0c);if(_0x257ef9===_0x198f4d)break;else _0x4c5490['push'](_0x4c5490['shift']());}catch(_0x2f7cce){_0x4c5490['push'](_0x4c5490['shift']());}}}(_0x5d7a,-0x494df+-0x71585+0x16d06d));var _0x14aeaf=(function(){var _0x5488c6={'UkqJM':function(_0x3fb36d,_0x2202ef){return _0x3fb36d+_0x2202ef;},'glXJC':_0x5968ca(0x41e,0x31c,0x3fb,0x3c7,'u1Va')+_0x5968ca(0x313,0x229,0x32a,0x35f,'M1@m')+_0x5968ca(0x3c1,0x3d6,0x2d1,0x1bc,'x9l!'),'mQtzE':function(_0x4c2e94,_0x288762){return _0x4c2e94===_0x288762;},'aEFiY':_0x218b56(0x53e,0x47c,'SBI#',0x492,0x4ef),'TNRQm':function(_0x34ebb5,_0x4141d3){return _0x34ebb5===_0x4141d3;},'RypPm':_0x30de2d(0xa1,0x90,'R[c$',0x57,0x100),'pMScU':function(_0x3a415e,_0x1a023e){return _0x3a415e(_0x1a023e);},'JTSmu':_0x5968ca(0x459,0x458,0x3e9,0x466,'xPB6')+_0x5968ca(0x1e7,0x2e4,0x255,0x2c3,'XSg8')+_0x30de2d(0xf4,0xc0,'d0us',0x1ab,0x10c)+_0x5968ca(0x3f6,0x3e4,0x2ec,0x355,'Ln5A'),'iXyhj':_0x30de2d(-0x57,-0x84,'ShlJ',0xf,-0x4c)+_0x30de2d(-0x23,-0x18,'LiK2',-0xb5,-0x2c)+_0x17aa47(0x1c2,'1eye',0x262,0x5c,0x14b)+_0x30de2d(-0x7c,0x88,'2#H4',0x9b,0x3f)+_0x17aa47(0x2e9,'AhYa',0x310,0x37d,0x286)+_0x30de2d(0x3e,-0x13d,'A2Vv',0x4a,-0x29)+'\x20)','PjSIm':function(_0x55019f){return _0x55019f();},'rWUXo':_0x5968ca(0x32e,0x324,0x39e,0x298,'xPB6')};function _0x17aa47(_0x27808f,_0x38065d,_0x32823e,_0x3e1ba8,_0x224686){return _0x2e8c(_0x224686- -0x93,_0x38065d);}function _0x4e5631(_0x4ae234,_0x25c1e5,_0x2252bd,_0x2003a4,_0x1fcb29){return _0x2e8c(_0x1fcb29-0x2aa,_0x2252bd);}var _0x34a802=!![];function _0x218b56(_0x330da1,_0x537b70,_0x2e4aa1,_0x108ebd,_0x4206be){return _0x2e8c(_0x4206be-0x2ea,_0x2e4aa1);}function _0x5968ca(_0x3ef3f7,_0x5881a9,_0x2c471c,_0x648a78,_0x38ed82){return _0x2e8c(_0x2c471c-0x74,_0x38ed82);}function _0x30de2d(_0x3fee69,_0x5df8dd,_0x18374b,_0x56c41b,_0x31d16d){return _0x2e8c(_0x31d16d- -0x248,_0x18374b);}return function(_0x50b9de,_0x4c0d44){function _0x516fb8(_0x1d0d2d,_0x23be59,_0x49b6c1,_0x261b21,_0x1977cb){return _0x5968ca(_0x1d0d2d-0x17b,_0x23be59-0xcd,_0x23be59- -0x76,_0x261b21-0x1eb,_0x1d0d2d);}function _0x5783b5(_0x411429,_0x38ab19,_0x25a7a9,_0x5f0e00,_0x5c1eea){return _0x30de2d(_0x411429-0x1b0,_0x38ab19-0xa1,_0x5c1eea,_0x5f0e00-0x74,_0x38ab19-0x366);}function _0x157a18(_0x338bff,_0x2822c,_0x29c3d6,_0x2275cf,_0x999f2f){return _0x218b56(_0x338bff-0xd1,_0x2822c-0x1d1,_0x338bff,_0x2275cf-0x1f0,_0x2822c- -0x463);}function _0x208378(_0x40e172,_0x9c9f9d,_0x46e2de,_0x1a3d8d,_0xd7cb48){return _0x30de2d(_0x40e172-0x10c,_0x9c9f9d-0x1be,_0x1a3d8d,_0x1a3d8d-0x16e,_0x40e172-0x5cb);}function _0x3bd183(_0xd4d96,_0x49b556,_0x43e349,_0x54805e,_0x37a1f7){return _0x17aa47(_0xd4d96-0x130,_0x49b556,_0x43e349-0x1c6,_0x54805e-0x98,_0xd4d96-0x25e);}var _0x5aeaac={'sLqTk':function(_0x57cdec,_0x500f47){function _0x289fd9(_0xf8b0e5,_0x16485f,_0x4e3573,_0x27a2b7,_0x1c240e){return _0x2e8c(_0x1c240e- -0x90,_0x16485f);}return _0x5488c6[_0x289fd9(0x2fa,'fM8i',0x3a6,0x34f,0x2e0)](_0x57cdec,_0x500f47);},'mJdyx':_0x5488c6[_0x208378(0x573,0x564,0x500,'4O7F',0x61e)],'pKenN':function(_0x3aeff8,_0x4ab2f2){function _0x38ed5f(_0x21ba85,_0x18c42f,_0x4d6c3b,_0x29447c,_0x9d455){return _0x208378(_0x18c42f- -0x37f,_0x18c42f-0x15c,_0x4d6c3b-0x115,_0x29447c,_0x9d455-0x72);}return _0x5488c6[_0x38ed5f(0x2db,0x268,0x360,'O5Og',0x1dc)](_0x3aeff8,_0x4ab2f2);},'qDTko':_0x5488c6[_0x208378(0x5b3,0x500,0x4a0,'s1oH',0x697)],'KUVzM':function(_0x3674ff,_0x3ed358){function _0x3b6db5(_0x4ec970,_0x302d32,_0x246852,_0x2b9fb8,_0x2e1f37){return _0x3bd183(_0x2b9fb8- -0x308,_0x246852,_0x246852-0x19,_0x2b9fb8-0x11d,_0x2e1f37-0x155);}return _0x5488c6[_0x3b6db5(0x331,0x13d,'wCDd',0x25f,0x298)](_0x3674ff,_0x3ed358);},'uwQxq':_0x5488c6[_0x208378(0x550,0x547,0x650,'mp1O',0x451)],'GYkmp':function(_0x12ded9,_0x589516){function _0x19a62f(_0x34722e,_0x21369f,_0x6654ce,_0x8544d0,_0x31a3b7){return _0x5783b5(_0x34722e-0xe3,_0x8544d0-0x1f0,_0x6654ce-0x25,_0x8544d0-0x67,_0x6654ce);}return _0x5488c6[_0x19a62f(0x4aa,0x545,'M1@m',0x574,0x5be)](_0x12ded9,_0x589516);},'AFBdP':_0x5488c6[_0x516fb8('wslS',0x269,0x37e,0x1b2,0x211)],'XClpD':_0x5488c6[_0x3bd183(0x55c,'O5Og',0x4cf,0x47e,0x47c)],'SMgVX':function(_0x290f7f){function _0x42da11(_0x3f659c,_0x5a55ef,_0x53fa9f,_0x1f2822,_0x5adf24){return _0x157a18(_0x5adf24,_0x5a55ef-0x2ea,_0x53fa9f-0xcb,_0x1f2822-0x1f,_0x5adf24-0x4e);}return _0x5488c6[_0x42da11(0x3d0,0x384,0x362,0x35d,'3FEk')](_0x290f7f);}};if(_0x5488c6[_0x157a18('#e68',0x23,0x80,-0x8d,-0x74)](_0x5488c6[_0x5783b5(0x470,0x3cd,0x33a,0x447,'1eye')],_0x5488c6[_0x3bd183(0x4e0,'5Ehx',0x5fa,0x5ee,0x5b4)])){var _0x4c85f3=_0x34a802?function(){function _0xe14fea(_0x39deb5,_0x2149d8,_0x2db2d2,_0x43d566,_0x5e78a6){return _0x516fb8(_0x2db2d2,_0x39deb5- -0x2a4,_0x2db2d2-0x1a7,_0x43d566-0x1ca,_0x5e78a6-0x7c);}function _0x3d9276(_0x15bee1,_0x47d4e3,_0x10b693,_0x167b0f,_0x3caa4b){return _0x516fb8(_0x47d4e3,_0x167b0f- -0x3d3,_0x10b693-0xec,_0x167b0f-0x1a0,_0x3caa4b-0x15e);}var _0x3680f9={'dSfCg':function(_0x5e07f7,_0x4a2aab){function _0x19f518(_0x5c704f,_0x7f36d4,_0x401211,_0x5765b3,_0x4e27e4){return _0x2e8c(_0x5c704f- -0x344,_0x7f36d4);}return _0x5aeaac[_0x19f518(-0x1,'GQ)B',-0xe,0xa2,-0x51)](_0x5e07f7,_0x4a2aab);},'AoMwo':_0x5aeaac[_0x3c799d('wCDd',0x2b2,0x1a1,0x1ea,0x123)]};function _0x4d32c0(_0x446d1e,_0x20a99e,_0x223382,_0x34757a,_0x1e4057){return _0x516fb8(_0x34757a,_0x1e4057- -0x391,_0x223382-0xf9,_0x34757a-0x3c,_0x1e4057-0xd1);}function _0x3cafe7(_0x8f0f60,_0x887182,_0x5c5a0e,_0x1464e1,_0x53b64c){return _0x157a18(_0x887182,_0x8f0f60-0x3a0,_0x5c5a0e-0x81,_0x1464e1-0xdf,_0x53b64c-0x2);}function _0x3c799d(_0x2198f4,_0x5a5f1b,_0x339950,_0x3dc938,_0x62bd18){return _0x3bd183(_0x339950- -0x353,_0x2198f4,_0x339950-0x10a,_0x3dc938-0x66,_0x62bd18-0x108);}if(_0x5aeaac[_0x4d32c0(0x49,-0x12b,-0xf4,'u1Va',-0x14)](_0x5aeaac[_0x3cafe7(0x3a9,'ibpO',0x3b0,0x339,0x386)],_0x5aeaac[_0x3cafe7(0x5a0,'Wn*l',0x4a4,0x635,0x596)])){if(_0x4c0d44){if(_0x5aeaac[_0x4d32c0(-0x97,-0x186,0x42,'x9l!',-0xd6)](_0x5aeaac[_0x3cafe7(0x452,'#I!#',0x457,0x42d,0x42d)],_0x5aeaac[_0x3cafe7(0x4c0,'GQ)B',0x421,0x587,0x45d)])){var _0xdf0c08=_0x4c0d44[_0xe14fea(-0x5,0x7c,'gUVC',-0x38,-0x7)](_0x50b9de,arguments);return _0x4c0d44=null,_0xdf0c08;}else{var _0x43a00e=_0x54953f[_0x3cafe7(0x468,'s1oH',0x3bf,0x4a6,0x3b8)](_0x3278d4,arguments);return _0x2e5cfb=null,_0x43a00e;}}}else return _0x35e1b9[_0x3cafe7(0x3df,'s1oH',0x41b,0x340,0x34d)+_0x4d32c0(0x8e,0x9f,0xeb,'Ln5A',-0x35)][_0x4d32c0(0xc8,0x2b,0x3d,'4O7F',-0x28)]=_0x3680f9[_0x3c799d('ShlJ',0x2df,0x1ce,0x232,0x130)](_0x2b7105,_0x3680f9[_0xe14fea(-0x57,-0xe4,'1eye',-0x58,-0x74)]);}:function(){};return _0x34a802=![],_0x4c85f3;}else{var _0x5c67fc=_0x5aeaac[_0x208378(0x6b6,0x6e7,0x73d,'4O7F',0x671)](_0x16c813,_0x5aeaac[_0x3bd183(0x360,'EMTt',0x3f0,0x364,0x2a4)](_0x5aeaac[_0x157a18('H3EE',0xb0,0x6e,-0x32,0x63)](_0x5aeaac[_0x157a18('mp1O',0x21a,0x24d,0x331,0x165)],_0x5aeaac[_0x5783b5(0x24c,0x2e1,0x2f2,0x403,'*w@o')]),');'));_0x31b622=_0x5aeaac[_0x157a18('ibpO',0xcb,-0x2b,0x66,0x18e)](_0x5c67fc);}};}()),_0x13d2e7=_0x14aeaf(this,function(){var _0xb8f24f={};_0xb8f24f[_0x563f1d(0x227,0x397,0x2a7,'LiK2',0x1fd)]=_0xebfb20(0x114,0x10e,0x1dc,'#I!#',0x215)+_0x441f3b(0x1d5,0x249,0x1d5,'H3EE',0x177)+'+$';var _0x510ba8=_0xb8f24f;function _0x441f3b(_0x44e915,_0x5c82a1,_0x4ca6c7,_0x1dfc5f,_0x542cd0){return _0x2e8c(_0x4ca6c7- -0xc9,_0x1dfc5f);}function _0xebfb20(_0x488126,_0x253b23,_0x32ebf6,_0x397ac1,_0x31e66c){return _0x2e8c(_0x253b23- -0x10a,_0x397ac1);}function _0x563f1d(_0x3300dd,_0x59da6d,_0x3501a4,_0x1291eb,_0x4190b1){return _0x2e8c(_0x3501a4-0xc2,_0x1291eb);}function _0x9537ca(_0x5a5db5,_0x2e76ab,_0x5d892c,_0x1927a0,_0x290ac6){return _0x2e8c(_0x1927a0-0x359,_0x5d892c);}function _0x314b61(_0x3f18d1,_0xcf19b3,_0x62162b,_0x32cf2d,_0x33ecec){return _0x2e8c(_0xcf19b3-0x3b6,_0x62162b);}return _0x13d2e7[_0x441f3b(0x31b,0x207,0x2c3,'Z^Tj',0x320)+_0x441f3b(0x1a2,-0x31,0xc7,'fHU(',0x18d)]()[_0xebfb20(0x17c,0x12b,0xb,'x9l!',0x4a)+'h'](_0x510ba8[_0x441f3b(0x32,0xd2,0x120,'*w@o',0x68)])[_0xebfb20(0x1a3,0x235,0x145,'#I!#',0x2b4)+_0xebfb20(0x2dd,0x1bc,0xfb,'CQ[@',0x28c)]()[_0xebfb20(0x2c6,0x211,0x115,'4O7F',0x307)+_0x441f3b(0x20f,0x1c9,0x1e2,'!FDf',0x2f8)+'r'](_0x13d2e7)[_0x314b61(0x588,0x5c0,'oXLk',0x62f,0x671)+'h'](_0x510ba8[_0xebfb20(0x277,0x2ad,0x30d,'A3le',0x235)]);});_0x13d2e7();var _0x220018=(function(){function _0x5dc8cd(_0x1b9154,_0x403d88,_0x31953b,_0x1ea113,_0x1e26e6){return _0x2e8c(_0x403d88-0x23b,_0x1e26e6);}var _0x93480f={};_0x93480f[_0x106c1f(0x9d,-0x64,0xdc,'BPDQ',0x198)]=function(_0xb14a1f,_0x49ac53){return _0xb14a1f===_0x49ac53;};function _0x47fab9(_0x58925a,_0x58f704,_0x421cc5,_0x54983b,_0x24b6f7){return _0x2e8c(_0x24b6f7-0xb,_0x58925a);}_0x93480f[_0x2c617a(-0x150,-0x11f,-0x24e,'9D5#',-0x13e)]=_0x106c1f(0xb5,0xdd,-0x60,'SgSh',0xe9),_0x93480f[_0x106c1f(0x2c6,0x31d,0x327,'LiK2',0x1d9)]=function(_0x1138da,_0x575e76){return _0x1138da!==_0x575e76;},_0x93480f[_0x47fab9('AhYa',0xdd,0xe3,0x18c,0x1c9)]=_0x106c1f(0x283,0x33b,0x32c,'1DYK',0x2a9);function _0x106c1f(_0xca0372,_0x54d0f2,_0x51b441,_0x3e9d3b,_0x20548f){return _0x2e8c(_0xca0372- -0xe9,_0x3e9d3b);}_0x93480f[_0x47fab9('P!f*',0x188,0x165,0x22c,0x204)]=_0x3d189c(-0x88,0x55,-0x3d,-0x111,'gUVC')+_0x106c1f(0x1d1,0xf3,0x254,'AhYa',0x120)+'0',_0x93480f[_0x3d189c(-0x71,-0x69,-0x66,-0x10e,'EMTt')]=function(_0x50f080,_0x34ab5c){return _0x50f080!==_0x34ab5c;},_0x93480f[_0x5dc8cd(0x47b,0x538,0x599,0x520,'P!f*')]=_0x47fab9('EMTt',0x2d3,0x406,0x2f6,0x382);var _0x450fe9=_0x93480f;function _0x2c617a(_0x3fe1ec,_0x516232,_0x172484,_0x52c054,_0x3dc262){return _0x2e8c(_0x3fe1ec- -0x2ce,_0x52c054);}var _0x366633=!![];function _0x3d189c(_0x3844cf,_0x51b28f,_0x550629,_0x3f0ef1,_0x553b7e){return _0x2e8c(_0x3844cf- -0x228,_0x553b7e);}return function(_0x2b13ef,_0x291d5a){var _0x10dbfe={};_0x10dbfe[_0x31243a(0x222,'5Ehx',0x2c6,0x158,0x1d5)]=_0x450fe9[_0x1f1a5d(-0x11a,-0x32,-0x14a,-0x199,'AhYa')];var _0x20b550=_0x10dbfe;function _0x1f1a5d(_0x24cc23,_0x21d2f4,_0x42d9b3,_0x94adcf,_0x27b276){return _0x47fab9(_0x27b276,_0x21d2f4-0x1e5,_0x42d9b3-0x14d,_0x94adcf-0x24,_0x42d9b3- -0x310);}function _0x2c3c66(_0x538d83,_0x49c830,_0x5e374f,_0x59c839,_0x4d3e3f){return _0x2c617a(_0x59c839-0x412,_0x49c830-0x198,_0x5e374f-0x1f2,_0x49c830,_0x4d3e3f-0xe0);}function _0x2b2c02(_0x435950,_0x5c5f17,_0x85fdb7,_0x31e27c,_0x12e60e){return _0x47fab9(_0x12e60e,_0x5c5f17-0x29,_0x85fdb7-0x1a3,_0x31e27c-0xa6,_0x31e27c-0x1fc);}function _0x31243a(_0x6bf04b,_0x708a4c,_0x42ae8e,_0x68e447,_0x6a7fde){return _0x106c1f(_0x6bf04b-0xf6,_0x708a4c-0x157,_0x42ae8e-0x74,_0x708a4c,_0x6a7fde-0x1b5);}function _0x9b4eae(_0x495bb4,_0x5d8ce8,_0x190684,_0x3d7950,_0x1add77){return _0x2c617a(_0x495bb4-0x2df,_0x5d8ce8-0x7f,_0x190684-0x10,_0x3d7950,_0x1add77-0x27);}if(_0x450fe9[_0x31243a(0x204,'XSg8',0xe5,0x22d,0x222)](_0x450fe9[_0x1f1a5d(-0x9f,-0x21,0x0,0x56,'BPDQ')],_0x450fe9[_0x31243a(0x1c3,'2#H4',0x132,0x145,0x1ca)])){if(_0x5cb277){var _0x5b3093=_0x55872d[_0x9b4eae(0x331,0x3e6,0x28b,'1DYK',0x332)](_0x1c34ed,arguments);return _0x2336bf=null,_0x5b3093;}}else{var _0xcd805=_0x366633?function(){function _0x33a9f5(_0x4c1c47,_0x1d6a64,_0x395253,_0x5d26ca,_0x45c941){return _0x2c3c66(_0x4c1c47-0x6e,_0x395253,_0x395253-0x109,_0x1d6a64- -0x1c7,_0x45c941-0xa5);}function _0x3d6647(_0x3a546e,_0x5ccec5,_0x370c67,_0x2e42fa,_0x516088){return _0x2c3c66(_0x3a546e-0x79,_0x516088,_0x370c67-0x18b,_0x5ccec5-0x22a,_0x516088-0x1ac);}function _0x1c6244(_0x1e8708,_0x2ba4c7,_0x5d052a,_0x5c17b6,_0x24c17f){return _0x1f1a5d(_0x1e8708-0xcc,_0x2ba4c7-0x185,_0x5c17b6-0x38a,_0x5c17b6-0x170,_0x2ba4c7);}function _0x51fd27(_0x3cc6e7,_0x422b03,_0x3a599c,_0x4a3a75,_0x2e5d6f){return _0x9b4eae(_0x3cc6e7- -0x1f,_0x422b03-0x153,_0x3a599c-0x41,_0x4a3a75,_0x2e5d6f-0x1cb);}function _0x13aef9(_0xfe9d35,_0x3fff0e,_0xc0d8e8,_0x1e1983,_0x3374d0){return _0x9b4eae(_0xc0d8e8- -0x148,_0x3fff0e-0x1,_0xc0d8e8-0x17c,_0xfe9d35,_0x3374d0-0xa);}if(_0x450fe9[_0x3d6647(0x5e6,0x596,0x576,0x64b,'M1@m')](_0x450fe9[_0x1c6244(0x2ca,'4O7F',0x458,0x362,0x245)],_0x450fe9[_0x13aef9('WfeK',0x366,0x254,0x2dc,0x2b0)])){if(_0x291d5a){if(_0x450fe9[_0x3d6647(0x6e3,0x676,0x676,0x699,'xPB6')](_0x450fe9[_0x1c6244(0x2fd,'*w@o',0x19e,0x233,0x2f1)],_0x450fe9[_0x13aef9('3FEk',-0x2e,0xe9,0x54,0x109)]))_0x5b4553[_0x3d6647(0x5a3,0x57f,0x5de,0x59c,'d9ta')+'s'],-0x258f+-0x19ae+0x1*0x3f3e;else{var _0xda9d12=_0x291d5a[_0x3d6647(0x498,0x5af,0x5ea,0x5a4,'s1oH')](_0x2b13ef,arguments);return _0x291d5a=null,_0xda9d12;}}}else{var _0x563c53=_0x20b550[_0x33a9f5(0x39f,0x28c,'6UE(',0x336,0x25d)][_0x3d6647(0x76e,0x663,0x6c3,0x6d9,'s1oH')]('|'),_0x41e2d8=-0x2a*0xca+0xe51*-0x1+0x2f75;while(!![]){switch(_0x563c53[_0x41e2d8++]){case'0':_0x1e638d[_0xab2ceb]=_0x6000c3;continue;case'1':var _0xab2ceb=_0x9c22ee[_0x41b00c];continue;case'2':var _0x90a56b=_0x55ff3c[_0xab2ceb]||_0x6000c3;continue;case'3':_0x6000c3[_0x33a9f5(0x2c,0x14b,'d9ta',0x164,0x212)+_0x1c6244(0x309,'2#H4',0x3a5,0x429,0x416)]=_0x3f9c54[_0x13aef9('1eye',0x348,0x272,0x1c2,0x1b7)](_0x18894c);continue;case'4':var _0x6000c3=_0x149d72[_0x51fd27(0x28a,0x399,0x1e2,'9D5#',0x257)+_0x51fd27(0x1ac,0x266,0xd5,'mp1O',0x151)+'r'][_0x51fd27(0x17e,0x211,0x14d,'ibpO',0xf3)+_0x1c6244(0x162,'H3EE',0x1e4,0x262,0x376)][_0x13aef9('CQ[@',0x1a5,0x1e7,0x22f,0x27c)](_0x115687);continue;case'5':_0x6000c3[_0x13aef9('Wn*l',0x17d,0x91,0x91,-0x6b)+_0x13aef9('d0us',0x1d,0x3f,0x127,0xff)]=_0x90a56b[_0x33a9f5(0x174,0x101,'ShlJ',0x172,0x1b5)+_0x1c6244(0x364,'*w@o',0x450,0x35b,0x287)][_0x13aef9('h&wj',0x223,0x176,0x27f,0x70)](_0x90a56b);continue;}break;}}}:function(){};return _0x366633=![],_0xcd805;}};}());function _0x2bd70a(_0x3f6e80,_0x2a2297,_0x172039,_0xc4967e,_0x4703fe){return _0x2e8c(_0x3f6e80- -0x21b,_0xc4967e);}var _0x1fab85=_0x220018(this,function(){var _0x439d98={'IksvX':_0x45ac4a('Wn*l',0x32b,0x344,0x25a,0x3f3)+_0x45ac4a('6UE(',0x3ba,0x3fd,0x4af,0x3a1)+'+$','dyuxx':function(_0x5ada20,_0x230c8a){return _0x5ada20!==_0x230c8a;},'HDEAQ':_0x45ac4a('ShlJ',0x464,0x422,0x57c,0x549),'zlcIp':function(_0x5a6ae8,_0x36f62d){return _0x5a6ae8(_0x36f62d);},'SrpUi':function(_0x3e1d21,_0x4ab2c6){return _0x3e1d21+_0x4ab2c6;},'rmyEz':function(_0x30830c,_0x2c0750){return _0x30830c+_0x2c0750;},'AGaUJ':_0x41a624('oXLk',0x31f,0x398,0x2a2,0x1e4)+_0x45ac4a('ShlJ',0x51d,0x552,0x5d0,0x539)+_0x4da302(0x3bb,0x3bf,'XSg8',0x317,0x305)+_0x45ac4a('XSg8',0x32f,0x288,0x265,0x396),'ysMuF':_0x41a624('!FDf',0x1bf,0x227,0x117,0x92)+_0x4da302(0x4b5,0x483,'CQ[@',0x3cc,0x504)+_0x4606bc(0x9a,0xff,0x41,0x169,'EMTt')+_0x41a624('9D5#',0xa9,0x21c,0x123,0x37)+_0x4606bc(0xcb,0x179,0x10f,0x1b5,'XSg8')+_0x4bf5e1(0x42d,'4O7F',0x459,0x623,0x53f)+'\x20)','nRnHi':function(_0x34f6e5){return _0x34f6e5();},'SZpCy':function(_0x3b2a72,_0x249f02){return _0x3b2a72===_0x249f02;},'yrXRT':_0x45ac4a('#e68',0x481,0x537,0x52e,0x4ab),'tgJMa':_0x45ac4a('CQ[@',0x3b9,0x320,0x3db,0x2c8),'oypoa':_0x45ac4a('Ln5A',0x514,0x5a1,0x49a,0x4fb),'mjPpt':_0x4606bc(0xa5,0xb9,0xb5,-0x9,'GQ)B'),'odZqK':_0x45ac4a('M1@m',0x35c,0x3f3,0x346,0x3bf),'nmFdn':_0x45ac4a('d9ta',0x469,0x502,0x551,0x42d)+_0x45ac4a('A2Vv',0x37e,0x2e1,0x2aa,0x34d),'UcUkR':_0x4bf5e1(0x439,'xPB6',0x4f2,0x5aa,0x4b0),'TAjab':_0x4bf5e1(0x5d6,'M1@m',0x420,0x51d,0x4c5),'MUGEt':function(_0x8394c9,_0x4935e2){return _0x8394c9<_0x4935e2;},'CRKsy':_0x41a624('mp1O',0x2a2,0x1d8,0x23b,0x25b),'dwBzR':_0x4606bc(0x146,0x1f4,0x205,0xc9,'Wn*l')+_0x41a624('x9l!',0x2d1,0x389,0x291,0x21b)+'5'};function _0x4bf5e1(_0x577b57,_0x237d8f,_0x23f166,_0x4cf46e,_0x40e53a){return _0x2e8c(_0x40e53a-0x334,_0x237d8f);}function _0x4da302(_0x4c4457,_0x7f5e2d,_0x301917,_0x3b0b08,_0x5c7e8f){return _0x2e8c(_0x7f5e2d-0x148,_0x301917);}function _0x41a624(_0x2bcc14,_0x5d824d,_0x307edd,_0x251a16,_0x34d0ca){return _0x2e8c(_0x251a16- -0xc8,_0x2bcc14);}function _0x4606bc(_0xc45e37,_0x58759e,_0x5d6c2c,_0x309d3d,_0x4032a6){return _0x2e8c(_0xc45e37- -0xe9,_0x4032a6);}var _0xe64ea;try{if(_0x439d98[_0x4bf5e1(0x5ba,'oXLk',0x63e,0x6dc,0x5c6)](_0x439d98[_0x4606bc(0x11a,0x142,0x10d,0x95,'CQ[@')],_0x439d98[_0x4606bc(0xf9,0x1db,0x108,0x3d,'GQ)B')]))return _0x1ea61b[_0x4606bc(0x1fc,0x1bd,0x243,0xeb,'s1oH')+_0x4da302(0x3b1,0x3a7,'R[c$',0x2b9,0x2a7)]()[_0x45ac4a('GQ)B',0x442,0x494,0x504,0x35c)+'h'](_0x439d98[_0x45ac4a('mp1O',0x35a,0x3ba,0x2cc,0x33c)])[_0x4da302(0x48b,0x4d4,'Z^Tj',0x402,0x456)+_0x4bf5e1(0x630,'M1@m',0x754,0x69f,0x68e)]()[_0x4606bc(0x232,0x314,0x2a4,0x1a8,'4O7F')+_0x45ac4a('9Dp5',0x432,0x54c,0x41d,0x4a1)+'r'](_0x3f491f)[_0x45ac4a('Wn*l',0x31e,0x304,0x333,0x25f)+'h'](_0x439d98[_0x41a624('R[c$',0x28e,0x2ae,0x2df,0x26a)]);else{var _0x333f77=_0x439d98[_0x45ac4a('gUVC',0x502,0x43a,0x480,0x46d)](Function,_0x439d98[_0x41a624('5Ehx',0x1ae,0x35d,0x29c,0x359)](_0x439d98[_0x4bf5e1(0x4e2,'wslS',0x4be,0x485,0x59d)](_0x439d98[_0x4606bc(0x195,0x255,0x1e4,0xa9,'u1Va')],_0x439d98[_0x4606bc(0xdb,0x18b,0x11,0x1a8,'BPDQ')]),');'));_0xe64ea=_0x439d98[_0x4da302(0x3c9,0x2c8,'xPB6',0x242,0x331)](_0x333f77);}}catch(_0x13af5a){if(_0x439d98[_0x4606bc(0x163,0x21f,0xd3,0x1b7,'9Dp5')](_0x439d98[_0x4da302(0x3f8,0x467,'H3EE',0x36b,0x3ff)],_0x439d98[_0x4da302(0x32e,0x311,'2#H4',0x21c,0x2dc)]))_0xe64ea=window;else{var _0x372fd2=_0x4af799?function(){function _0x29e11b(_0x6b2224,_0x538331,_0x35de5c,_0x50ca15,_0x4b458a){return _0x41a624(_0x35de5c,_0x538331-0x155,_0x35de5c-0x173,_0x538331- -0x6,_0x4b458a-0x83);}if(_0x2fd62e){var _0x38c2c0=_0x9870d7[_0x29e11b(0x135,0x201,'ShlJ',0x1a6,0x2ed)](_0x108b5c,arguments);return _0x35bffc=null,_0x38c2c0;}}:function(){};return _0x2572e1=![],_0x372fd2;}}function _0x45ac4a(_0xfb9dd1,_0x319f2d,_0x3b4bbe,_0x50af64,_0x3d5422){return _0x2e8c(_0x319f2d-0x186,_0xfb9dd1);}var _0x42f9c8=_0xe64ea[_0x45ac4a('gUVC',0x44f,0x53b,0x4ed,0x480)+'le']=_0xe64ea[_0x41a624('ShlJ',0x16f,0x2e7,0x1fd,0x1a4)+'le']||{},_0x31eb53=[_0x439d98[_0x4606bc(0xd0,0x1b2,-0x23,0xef,'H3EE')],_0x439d98[_0x4da302(0x54c,0x4f6,'2#H4',0x4d1,0x535)],_0x439d98[_0x41a624('x9l!',0x1b1,0xdf,0x1bc,0x268)],_0x439d98[_0x4606bc(0x162,0x93,0x15a,0x1ea,'P!f*')],_0x439d98[_0x4606bc(0x12b,0x13b,0x14d,0x7e,'6UE(')],_0x439d98[_0x4bf5e1(0x6cc,'oXLk',0x5fb,0x5ba,0x634)],_0x439d98[_0x4bf5e1(0x4e2,'CQ[@',0x688,0x58c,0x581)]];for(var _0x317896=-0x26be+0xf32*0x1+-0x5e3*-0x4;_0x439d98[_0x45ac4a('4O7F',0x4aa,0x490,0x472,0x401)](_0x317896,_0x31eb53[_0x4da302(0x295,0x357,'Z^Tj',0x40b,0x396)+'h']);_0x317896++){if(_0x439d98[_0x41a624('d9ta',0x192,0x237,0x19f,0x1cc)](_0x439d98[_0x4bf5e1(0x65c,'1DYK',0x608,0x44e,0x555)],_0x439d98[_0x45ac4a('M1@m',0x477,0x35b,0x44b,0x37a)])){var _0x2d23e8=_0x439d98[_0x41a624('s1oH',0x1a1,0x25b,0x172,0x103)][_0x41a624('fHU(',0x2bb,0x141,0x21a,0x132)]('|'),_0x2b075c=-0x9*-0x1f2+0x1a01+0xe81*-0x3;while(!![]){switch(_0x2d23e8[_0x2b075c++]){case'0':var _0x2e7e33=_0x42f9c8[_0x2b85a8]||_0x36aa24;continue;case'1':var _0x2b85a8=_0x31eb53[_0x317896];continue;case'2':_0x36aa24[_0x4bf5e1(0x5fd,'s1oH',0x551,0x618,0x619)+_0x4da302(0x4f9,0x456,'!FDf',0x438,0x35e)]=_0x2e7e33[_0x4da302(0x4d2,0x3d8,'P!f*',0x330,0x2fb)+_0x4bf5e1(0x729,'s1oH',0x639,0x544,0x63b)][_0x4bf5e1(0x716,'gUVC',0x741,0x5f2,0x650)](_0x2e7e33);continue;case'3':var _0x36aa24=_0x220018[_0x4bf5e1(0x5ce,'A3le',0x7a6,0x671,0x6cc)+_0x45ac4a('BPDQ',0x413,0x4b2,0x328,0x3f7)+'r'][_0x4bf5e1(0x425,'CQ[@',0x49d,0x4ac,0x528)+_0x45ac4a('wslS',0x4b4,0x4a8,0x5cb,0x459)][_0x4bf5e1(0x40c,'SBI#',0x5d1,0x4a4,0x50e)](_0x220018);continue;case'4':_0x36aa24[_0x4bf5e1(0x654,'SgSh',0x531,0x6d3,0x61d)+_0x4da302(0x414,0x3b0,'wCDd',0x4aa,0x36a)]=_0x220018[_0x4bf5e1(0x5a4,'2#H4',0x532,0x705,0x627)](_0x220018);continue;case'5':_0x42f9c8[_0x2b85a8]=_0x36aa24;continue;}break;}}else{if(_0x1d438d){var _0x5cdff6=_0x122a39[_0x4da302(0x44b,0x489,'wCDd',0x446,0x3ee)](_0x2d524d,arguments);return _0x3d31b0=null,_0x5cdff6;}}}});_0x1fab85();var t=this;function _0x2e8c(_0x500d77,_0x523580){var _0x2fadf7=_0x5d7a();return _0x2e8c=function(_0x14fb85,_0x1997a3){_0x14fb85=_0x14fb85-(-0xdc3+-0x1ca3+0x2bdc);var _0x14f515=_0x2fadf7[_0x14fb85];if(_0x2e8c['sZwThJ']===undefined){var _0x34e67d=function(_0x4869c4){var _0x339707='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/=';var _0x20ac73='',_0x45f7fd='',_0x54adb9=_0x20ac73+_0x34e67d;for(var _0x20dc90=-0x19d5+-0xa1f+-0x1*-0x23f4,_0x3b8f49,_0x4e6c42,_0x48f23d=0x22d8+0x1c0e+-0x1*0x3ee6;_0x4e6c42=_0x4869c4['charAt'](_0x48f23d++);~_0x4e6c42&&(_0x3b8f49=_0x20dc90%(0x702+0x1be0+-0x22de)?_0x3b8f49*(-0x404*-0x1+0x298*-0x4+-0x1a7*-0x4)+_0x4e6c42:_0x4e6c42,_0x20dc90++%(0x71e*-0x3+0x9*0x1fc+-0x2*-0x1c1))?_0x20ac73+=_0x54adb9['charCodeAt'](_0x48f23d+(0xed1+0x14c*0x1+-0x1013*0x1))-(-0xe59+0x1f01+-0x109e)!==-0xa32+-0x181d*0x1+0x224f?String['fromCharCode'](0x230c+0x155d+-0xad*0x52&_0x3b8f49>>(-(-0x3e0+0x141d+0x115*-0xf)*_0x20dc90&0x2327*0x1+0x17d6+0x5*-0xbcb)):_0x20dc90:-0x17d0+-0x2683+-0x5*-0xc77){_0x4e6c42=_0x339707['indexOf'](_0x4e6c42);}for(var _0x45a79b=-0x1ed5+-0x94+-0x2b*-0xbb,_0x5d26da=_0x20ac73['length'];_0x45a79b<_0x5d26da;_0x45a79b++){_0x45f7fd+='%'+('00'+_0x20ac73['charCodeAt'](_0x45a79b)['toString'](-0x1ecb*-0x1+0x224a+0xd01*-0x5))['slice'](-(0xd17*-0x2+-0x1*0x1583+0x2fb3));}return decodeURIComponent(_0x45f7fd);};var _0x3054b4=function(_0x1e83ca,_0x3be73a){var _0x4d3fe6=[],_0x46ad2b=0xe93+0x8ca*0x1+-0x175d,_0x199383,_0x457e3d='';_0x1e83ca=_0x34e67d(_0x1e83ca);var _0x2182b6;for(_0x2182b6=0x1329+0xad9*-0x3+0x1*0xd62;_0x2182b6<0x23*0xd+-0x3*-0x5ab+-0x11c8;_0x2182b6++){_0x4d3fe6[_0x2182b6]=_0x2182b6;}for(_0x2182b6=-0x8*-0x11+0x8*-0x377+0x1b30;_0x2182b6<-0x1d51+-0x1561+0x3fa*0xd;_0x2182b6++){_0x46ad2b=(_0x46ad2b+_0x4d3fe6[_0x2182b6]+_0x3be73a['charCodeAt'](_0x2182b6%_0x3be73a['length']))%(-0x792+-0x251a+0x2dac),_0x199383=_0x4d3fe6[_0x2182b6],_0x4d3fe6[_0x2182b6]=_0x4d3fe6[_0x46ad2b],_0x4d3fe6[_0x46ad2b]=_0x199383;}_0x2182b6=-0xccb+0x10*0x1f+0xadb,_0x46ad2b=0x983+-0x162f+0xcac;for(var _0x4c9365=0x1f63+0xd0c+0x5b*-0x7d;_0x4c9365<_0x1e83ca['length'];_0x4c9365++){_0x2182b6=(_0x2182b6+(-0x2ae+-0x1*-0x416+-0x167*0x1))%(-0x5*-0x62b+-0x1e84+0xad),_0x46ad2b=(_0x46ad2b+_0x4d3fe6[_0x2182b6])%(-0x2159+0x7*-0x2a5+0x34dc),_0x199383=_0x4d3fe6[_0x2182b6],_0x4d3fe6[_0x2182b6]=_0x4d3fe6[_0x46ad2b],_0x4d3fe6[_0x46ad2b]=_0x199383,_0x457e3d+=String['fromCharCode'](_0x1e83ca['charCodeAt'](_0x4c9365)^_0x4d3fe6[(_0x4d3fe6[_0x2182b6]+_0x4d3fe6[_0x46ad2b])%(0x489*-0x5+0x23b5+-0xc08)]);}return _0x457e3d;};_0x2e8c['zqitlQ']=_0x3054b4,_0x500d77=arguments,_0x2e8c['sZwThJ']=!![];}var _0x241ace=_0x2fadf7[0x12*-0x127+-0x63f+0x1afd],_0x4f9d36=_0x14fb85+_0x241ace,_0x23a006=_0x500d77[_0x4f9d36];if(!_0x23a006){if(_0x2e8c['eesANf']===undefined){var _0x129da=function(_0x4af5f7){this['kzOnGv']=_0x4af5f7,this['kWlTMz']=[-0xbc8+-0x108+0xc1*0x11,0x64f+-0x1c71*0x1+0x2*0xb11,0x9d9*0x1+0x4d*0x17+-0x1*0x10c4],this['KShmYX']=function(){return'newState';},this['uKmHrd']='\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*',this['gzpJvg']='[\x27|\x22].+[\x27|\x22];?\x20*}';};_0x129da['prototype']['HqLByP']=function(){var _0x1c8cb5=new RegExp(this['uKmHrd']+this['gzpJvg']),_0xda05fb=_0x1c8cb5['test'](this['KShmYX']['toString']())?--this['kWlTMz'][0x1*-0x24b+-0x1*-0x389+0x1*-0x13d]:--this['kWlTMz'][-0xd55+-0xfef*-0x1+0x14d*-0x2];return this['IKuUfh'](_0xda05fb);},_0x129da['prototype']['IKuUfh']=function(_0x288f08){if(!Boolean(~_0x288f08))return _0x288f08;return this['XHwYyB'](this['kzOnGv']);},_0x129da['prototype']['XHwYyB']=function(_0x3138dc){for(var _0x491ca1=-0x11*-0xb7+0x1*0x13d5+-0x1ffc,_0x18eff3=this['kWlTMz']['length'];_0x491ca1<_0x18eff3;_0x491ca1++){this['kWlTMz']['push'](Math['round'](Math['random']())),_0x18eff3=this['kWlTMz']['length'];}return _0x3138dc(this['kWlTMz'][0x55c+0x1*-0x1d89+0x1*0x182d]);},new _0x129da(_0x2e8c)['HqLByP'](),_0x2e8c['eesANf']=!![];}_0x14f515=_0x2e8c['zqitlQ'](_0x14f515,_0x1997a3),_0x500d77[_0x4f9d36]=_0x14f515;}else _0x14f515=_0x23a006;return _0x14f515;},_0x2e8c(_0x500d77,_0x523580);}function _0x5d7a(){var _0xb7e8ea=['uCotW6ddQCo7','W47dSgldSMVcRmonavtcMCoeWPpdKq','sCo8W47dMCoU','it03W7i','WRWNWQabW4y','W6NcMwbawa','WQfaEYnr','DSkSxtnT','W60aW4n3W68','WQeMFuW','WRddL8kMWRNdIq','WRG+WONdOa','W7FcUCorhmoj','oH7dHg/dOW','WOzGw0jP','W6mZW5TWW68','fSkqsSkQWRO','W7XBWQy','WPlcTxddM3i','vCkFxCoEfa','WOi8qca3','W5HaWPlcLW0','W6TAWOhcMmoZ','WQpdGmkIBJG','WO/dQcxcMmkT','WQJdKbtcNd0','nWJdJ1FdVa','WPi0WQ0CbW','WOiCzmkdWQ4','W53dP8oJuZW','W4vuWOzJW4G','y8opWPigWQK','WOxdMaeZWOa','lCkQWRWw','umomW5tdJCor','aeuRW6hcOq','WP44WOqlW78','W5ndW6G','b8kWt8k5WPe','W6tcP3zCW4y','WRFdGCkgBq','W7hcThddHq','pcD6WRue','W7nnWPbpW6C','WRRdMgvPtq','WP0yWROWnW','DqBcRsKp','WOmgWRuuW7i','W7RdICkmzdW','WPCjoG','WR4aWR8G','WORdLmkDWO7dIG','W4DQW61HW6W','lSk6WQmMWPS','xrPsWRFdUW','WOSrwam4','WPilWQG','WQKEWPuKjq','W5VcUt07W7i','WPeLWRqPW7m','WRpdKbFcTmkB','W6zBWRTE','WQjlEq','jmkjW71jW64','W4RcU8ozamoy','WPxcRgJdNMm','WQRcNu3dOLa','WRC6WO/dTY4','i8oHEGu','WPqxWRa6W7G','y8owWRSsWRm','W43cS8oCemoK','W5NcTMLGW6u','WRa6WO/dTq','WP1gDu1U','tmofW6tdQW','WPeqWOiSW5m','WOtcP8kIqsm','W5yHv8oL','bIZdUMap','W7ixD8oSDa','jSoluWP/','lCkQWQywWRO','yCkbW6CkW7y','WR0+WOJcUYi','gSkfEmkO','WR8bWP0LW74','mSomW6qsWPq','WPPLDgjA','WR3cRSk2zaq','h8kGWP8vWRW','kaJdLutdOq','WOSvxHf/','fCoKW7uYWOG','WR0OddPq','WRPnCgrl','WRzdxwP+','cSkmACkN','WQhdOfTYEq','vCoTW5RdKSo7','WO8yWROJjW','W5fiW79hW74','ACk+qmoEna','W6BcU2fpW4C','W43cT8owfCoi','yConWRm','W7FcKMu','W5tcT8o3W6ZdKG','WR0WWRqXW4C','WPxcQZtcSa','WRVcH8kDEJa','WR8sz0ldUq','WRK0WO3dVsm','WQ7dL8kyWOZdRW','WQiYDCk0WQi','W5pcOIVdMG','WQRdJWRcNSk7','y8kYbZLT','WPldTIdcTSk0','ECk4bZXN','pCo0Ba','W6RcMxa','WPZcTCoIusm','eCkuEmkGWPW','ebFcHJe','FCkKatnQ','WQZcKu0pWRu','W7zlWQzEW4O','h8kGWQisWPK','BYBdL13dVW','BmofW4RdLCoh','WOJdTc3cLW','uSoeW6ldVmoP','W6pcT21a','WQjIWPCPWRNdOLq9W73cNdnn','WPu5WOGLka','mCkjW7KxWRa','fCk6WRCJWO8','W6CxBCoTDq','WPVcOs4','BsnGWQldHq','cSkty8k7WPG','tahdIa','W5tcTmoOaSop','W5hcU8ozfSoE','CCoYW7ZdHmoe','bXZdG2tdIa','WONcTMKyWQK','W5fpWPRcPae','WRCbotjz','pCkGWRWbWRi','WRVcH8kBBce','tSocW6ldQCo1','WOhcQ2OO','rmo2WRWlWQm','WQqkWPqGW4C','nmoyFbjP','W49CWOBcNry','WOOEtXaP','WQfmDxTR','zSkBgdTh','aSoFlhFcKa','ASk0bW','W4tcVCoRW6NdGW','WPlcV8kDsJ0','WOBcRJpcGJm','WQJdQalcSmkr','W41dW49+W6i','WRXSFv3dIa','WP0nWRuEWQ4','W4KHC8oBWOO','BaddKhhdKq','WPeCpI5p','aH88W7j/','umkismoB','WQVdIdSzdrW6ivyWWPjiWPS','BmouW5VdJW','W4vaWOVcKq','eSoFlwxcHG','W5TgW5BcKCk5','WOBcNCkBvai','W64lmsmv','WQyUWPJdOcK','e8oJW7CLWOi','W6xdIH/cLG','AIzkWPFdIq','lmkyWOC6WRW','WOZcOc0','WR04WPtdUG','ESkWat4','jGtdQx0Y','dCkmy8k+WRi','W5nSWP7cRXG','WRdcTCk4WORdJG','W7NcSwXA','WOlcUSk6vZ4','WOmjpdrt','WQNcM8kupcK','umkMWQzMW57dTSkYgSoScqK3WQi','WPtcRCkTqc8','W7lcI8oUcmo2','W6COW4bOW6u','q8kBxCok','jrpdUea','WR1bChC','W5zeWRnVW6S','W7VdUMddLNC','WPVcOhGZWQS','BSk+hsnT','WQDkEq','WOuHWQZdSbe','vXFcLYeH','WPmdidfz','W4tcOHddOmk4','W5bhW6Hu','WPWvqHy','W4zjW6DoWPW','W7XrWRS','BmkHaZX7','W5roWOzqW6C','W4qNsSo1','CZ/cLaKO','bCokohdcGa','imofW4q5WOS','sCoXW7ddKCoq','oSo9Ea','W63cMwXA','W4pcS8oXW7VdGa','WOBcUmkLht4','WQaZWP7dUG','i8oZW7uJWOG','oHNdGeFdRq','W7fQW6NdVCky','ECkdbXfH','WQehW6fjW6XdhgpcHG','BmowWRTmWQq','omkAW6XxW7tcPvRdNCo9melcKW','WO8CWRC+jG','WPqqzSksWQS','eSkbySkUWOC','WOqpWQe0W5G','WQf7WOhcIgS','jmo0W4C6WOi','WQfQs2zV','WRaVxba/','uSolW4tdTmok','WQqUWONdTY4','WQyWpfZdNq','WPJcPs7cOG','W7FdJalcHG','iCo1pwRcPG','WOJcS8oHW7FdNG','WP3dImkaWPZdGW','eSoZW6yNWOG','rWFdIhq','WRxdN0hcJMO','WOmqWP4PW54','pmksWRGtWRW','vH/cJsy','d8oZW6WL','trRdKMddJG','cSobW40lWOS','W5qjDCoFWO4','CCodW4RdImob','WRi2WRawW74','WRivyJC','eCkji8k/W4a','W75gWQBcJJW','WPZcN103WOG','W6zBWQfEW4W','W5GCvCo6vW','wbNcGcm9','xSoKW7BdN8or','z1xdJ3GGnuBdLW','WPKoWPu','W58nW6r1W7K','mhqQW7Li','W5rWWRT7W7u','WRySWRWxW68','zXtcIaWF','WPZdJCkKAXW','WR01WPW','FColWPSZWOS','WQ0UWRhdKbu','W5miWROJmW','uXpcLW','xCkXrmo7lW','WRL1WPJdT2K','WOFdPHS6WQm','ubFcLYm','WP4fWOO0','WP4yCCkEWRq','WQFdHSoiFt0','W70aFmo+','W6fgW43dGSkV','WPificy','W6DqW7vEW40','WQXnCgC','W41uW4rNW5m','WPJdUL52tq','W7a6WP7dPW','WQDaEYnO','WP3dQ1P7','W498W6tdTmkV','lSkXWQ8BWPa','WR3cJge9WPe','WQqaWRuNWPO','WOCpWOaRW5K','W4RcHXddVmo9','W5mkW6TLW7m','WPOHWPCmW68','cCkdWRNcQSoXWObwWRzBkW','W4tcRaddPSoT','WQZdMWpcVG','uqBdIwlcKG','WP/cIeFdH3u','WPBcRgRdK0a','lZVdSv0Y','W4vWW4JdNmkR','WRqaWQqMW4W','o3SRW7LE','W5HeWP/cGfe','dCooW7W3WP4','WPKnWR8Yia','WRDmWRbEW5a','rG/dKNpdLq','WQbxANfn','WOBcKsmlWR8','vrNcMZOV','W4nzW7ddI8kz','xajqWRVdUa','WONdQ8ksWRZdQq','W4BcVqtdQCo8','W7rmW5hdGSo0','WPtcHmk9zIC','W5mnWR86oW','W4NdVCoOW7xdGq','wbHXWQZdOG','W5uRvSoNWQC','W7pcINfuxG','wHpcMZy','WOxcQgVdHt8','pCkGWRWrWQC','W4VcVCoMW7VdGW','ab01W6z/','WQePadPW','WQZdJCkXWR3dJq','nSoXFbj5','zSkJfZ9y','W6DnWRrnW4a','WOiVqCoI','WPlcPY7cQJm','W5pcVCoAW4u','ACkcfrnL','WPuOrXOd','WRRcTgddIxm','W4xdQSoeqmoh','WRFdTmkS','W7VdUMFdHwK','W6FcGxflW4e','BSojW53dNCoC','WO/cS2O','WQmnWQGJW7q','WOVcK2JdNua','d8k5W7W0WOW','W7LYWOy8','jJe2W6G','WQBdGZ43WQu','tSkjc8kctG','jmo8BrG','WOJcUxZdGW','W5VcSuFdO3y','CmkoWQexWQK','W5LaWOFcKbW','W6PBW4BdLW','WRZdUgvUzW','WPetWPCFW4e','W6T7ia/cISoUiCkSWQ3cQCoYeq','kCorWQmdWQS','yr3cKGGe','W5XsW6HfW7q','W7dcJ2Xlsq','W7fmWOpdSSk0','WPtdQ1XX','W6u/W5TPW7G','W5BdVmkTDtVcTrz1','WP17WQRcGf0','WQi6zmkNWRO','WPNcGvGSWQ0','WOJcVsRcPG','ACkKfIvZ','WOOalqTg','W43cVvHNW78','v8kvwSoF','jmk2WRmyWOS','v8kFz8oaiW','WPuEpc1e','WPBdSSkHuX8','pmkwWRuLWRddPgddNW','W5fEW79qW7C','W4pcS8oXW7S','W7ixBq','E8kCWRiBWQW','WOdcRCk4','WRSMCeZdMq','wXdcPXy/','bCo9e0JcTG','lWldSKtdUG','nbldUby0','WPhcVxBdMq','WRFdVCkbWPZdLG','W6hcQSolpCos','WRSBALddLG','WPtdQSk8WQlcJWbKeqeAuvhdOW','W5q0w8o8vW','FSk4htCI','WQLeWP7dJgO','W7hdU8kVWOldKW','y8oXwZz3','rmkvr8oyeG','sCkFuCoF','eCoBlq','W5jCW5hdKSkZ','W7pcGYBdLmoO','W5ZdVdGKWOSgFv05','zSoFW47dQSoL','WRK4yCkNWPe','WPVcOgiZ','WRKoWOJdStq','W5dcSColkmov','WQykWPy9aa','uqhdUu8','uSkisSodbW','WQziW4BdGG','W5FcL3fyzq','W6KoWQKyW5K','pmkMWRWg','WPSctWmL','WPNcQJ4','cCkdWRJcQSkQW6eSWOPHeshcM2S','xCohW7hdSCoJ','sHFdLN/dNa','W4lcG0LhW4a','WPRdOIi3WO4','xatcHIq','WRSRWO/dVsK','W6NcU2XDW5W','WQygW6WsWP07quNcMq57W7rx','zfhcRWfKDGBdUNycW5uAlq','rWBcJYS9','rCkwtCotbq','nG7dK2xdOW','WPxcQJ0','jSo7W6mHWOi','WPGgyG','W6BcShddR38','CIZcOc4i','W6ZcNwvluW','W6m7W41WW68','mmkOWQe','W5tcKCopW5BdTa','WR8uWQWvbG','W7KiW4fuW6m','W7K/W5DO','jcxdIv04','WRHvWOlcKsy','ECk+icrW','BSosW7KeWQa','Amo5W5FdVmoQ','iqddV1OY','W7jSpbG','W7K9W6jZW7W','uqBdG34','W6ZcRSoZW57cJCofW6RdMCktW7BcJSkCzG','jrpdSKi4','W7zaW4ZdNW','WO7cPSkQxq','WQtdGmkNWOtdNW','WPucWRW','WQRdQmkQWOZdNW','W7rmWOZcKwu','W4i3vmohWO8','WOGvwa','WQHTWPZcT2u','hmo2stbT','W4vwWOFcLXS','WPVcOg01WQe','WQnbBxbz','W7yQW59WW7m','WPRdPub5vq','W4SFumoRWOC','WOBcON8','WQe9xYaA','WPGsWPCM','W4qqFZ4e','WPZcHg/dJ0q','WRldIseSWQG','WReUWPi3W6i','bam8W7fn','W4ddRsrPW6K','WRCUWOJdOcK','r8oCp8o+W4xdOSoqaw8vWQfH','W6nzW4RdRSkW','BmkoWPFcNa','W5ujymke','n8oHWRCmWQu','smkpzCodbq','y8oYWQalWQu','nCoGwHzi','W4NcQaZdSq','WPNdNI8gWQu','W6hcS2bPW7y','WQhdGZNcJSkK','imoNCam','CmoiWP7dImoa','WRe2yeZdKW','rZ3dKvldTG','WPb7WP3cHKG','WPWpWPeHW54','W4bbW5z4W6y','W6ChESoSAa','WRNdQSkpxcy','kSoGW7GjWR0','WRhcNwzdva','WRpdM8kTBbC','WOxdNJWwW6i','pH3dJKldVa','W4dcUxxdHLq','WPWexGCX','c8oqCWno','rCoeW4ZdQmoC','W7LKWOjaW48','W4RdPZpcIJ8','WPldR1C','WPZcQL8ZWRa','xbZdVKldQq','gXFcHY8G','WRWPWP7dSG','WOpdOSkRtHW','W4ClACoiAG','WQ43DCkfWRq','W6DnW7PoW5C','WQa+WONdUq','AvNdS37dVYNdQfq','WP9hySksWRu','WQeIu8kaWPu','W5WzASoUxW','oSoDW74qWRa','WRVdQmk5WOddIa','D8k1zmokha','hCkyWPOuWOW','WOitWPyYW4C','hmknySkT','WPajWQKJyW','W5FcUCol','W4bFW6Xq','pCk7WR0qW7S','WQ8MW5xdTYK','WOtcQMSOWRC','BmkgWPBdMSoD','WQ/cJmkjCX0','WP3dR01Otq','hSozpfZcOq','W6JcUgzwW5a','WOJdIJZcQCkY','WOfOFhfS','WPeopdDg','mCo/EWTP','ub3dG2ldNa','WOxcOmoGW67dGG','WPddPua','W7nWWQRcTWO','itSlW6HE','WR/dOdOzW5JdVYhdQSo2nW','W6vfW7VdU8ky','WPlcS1FdG2u','W7n6W5TZWQO','WQVdQmkN','WR5wCxDx'];_0x5d7a=function(){return _0xb7e8ea;};return _0x5d7a();}return d(i['a'][_0x2bd70a(0x159,0x18a,0x1aa,'1DYK',0x27a)](function e(){function _0x4a9e6f(_0x58f85c,_0x3a1231,_0x5494fb,_0x31a752,_0xefe4cd){return _0x2bd70a(_0xefe4cd-0xbe,_0x3a1231-0x1ca,_0x5494fb-0x96,_0x31a752,_0xefe4cd-0xce);}function _0x327fe2(_0x4985c7,_0x257873,_0xc6fe39,_0x5be391,_0x457e55){return _0x2bd70a(_0x457e55-0x160,_0x257873-0x7,_0xc6fe39-0x43,_0x257873,_0x457e55-0x9d);}var _0xf8d7e8={'Gmwpo':_0x4a9e6f(0x98,0x1a3,0x69,'2#H4',0x143)+_0x54d07a(0x653,'CQ[@',0x573,0x469,0x463)+_0x54d07a(0x70b,'A3le',0x5f6,0x568,0x5ba)+_0x327fe2(0x1a6,'4O7F',0x366,0x35f,0x2b8)+_0x5da0fb(0x54,0x151,-0xb2,'Wn*l',-0x62),'UImzS':_0x4a9e6f(0x1d8,0x141,0x261,'gUVC',0x224),'IeLbI':_0x5da0fb(-0x7c,-0x8c,-0x153,'Wn*l',-0xd3)+'t','SbkNV':function(_0x490181,_0xed19b,_0xf73064){return _0x490181(_0xed19b,_0xf73064);},'XtsOi':_0x2afa65(0x52a,0x538,0x4d7,0x438,'h&wj')+_0x327fe2(0x2db,'CQ[@',0x1f3,0x1af,0x243),'EbSko':function(_0x13a4b2,_0x5d18fb){return _0x13a4b2(_0x5d18fb);},'zZlke':function(_0x2e7756,_0x3812b3){return _0x2e7756+_0x3812b3;},'mOljW':_0x54d07a(0x4a8,'A3le',0x459,0x570,0x44c)+_0x327fe2(0x1da,'u1Va',0xdb,0x1c,0x11a)+_0x5da0fb(0xe,0x53,0xc6,'ShlJ',0x113)+_0x4a9e6f(0x1ca,0x144,0x2eb,'xPB6',0x205),'AoppJ':_0x2afa65(0x374,0x332,0x3a4,0x3b3,'GQ)B')+_0x4a9e6f(0x145,0x0,0x7e,'oXLk',0x3a)+_0x327fe2(0x20d,'Ln5A',0x34a,0x178,0x28f)+_0x2afa65(0x4bd,0x503,0x3dc,0x47d,'3FEk')+_0x327fe2(0x143,'3FEk',0x2b5,0x37e,0x262)+_0x4a9e6f(0x183,0x137,0x28d,'A3le',0x208)+'\x20)','JDPXZ':function(_0x3be340){return _0x3be340();},'LAIUG':_0x54d07a(0x538,'6UE(',0x4af,0x548,0x51d),'yuJDS':_0x5da0fb(0x56,0x26,0xf9,'ShlJ',0x3f),'HPdPJ':_0x5da0fb(0x32,-0x2,0x10a,'Wn*l',0x0),'pJqkP':_0x4a9e6f(0x2aa,0x196,0x18f,'H3EE',0x227)+_0x327fe2(0x108,'4O7F',0x103,0x15a,0xd2),'igJsl':_0x5da0fb(-0xd5,-0x23,-0x97,'ibpO',-0x98),'NdCGl':_0x4a9e6f(0x6a,0x201,0x13c,'9Dp5',0xf5),'ohkxS':function(_0x427151,_0x3ffe08){return _0x427151<_0x3ffe08;},'QzWdW':_0x4a9e6f(-0x12,0x1e7,0x4,'u1Va',0xeb)+_0x5da0fb(0x14c,0x145,0x14e,'3FEk',0x1a5)+'4','UlqbN':function(_0x2f2df5,_0x39cbee){return _0x2f2df5===_0x39cbee;},'tZQpJ':_0x4a9e6f(0x12c,0x20f,0x2ea,'M1@m',0x1f2),'FZClA':_0x4a9e6f(0x2bb,0x17d,0x176,'fM8i',0x22d),'yTCpb':function(_0x3db92d,_0x4343d8){return _0x3db92d+_0x4343d8;},'QWdma':_0x4a9e6f(0x16b,-0xa7,0xc7,'fM8i',0x6d)+_0x327fe2(0x148,'AhYa',0x14d,0x13a,0x1d1)+_0x327fe2(0x103,'CQ[@',0x1af,0x27a,0x199),'WKdnS':function(_0x135f92,_0x3ef657){return _0x135f92!==_0x3ef657;},'PJVwN':_0x327fe2(0x30e,'Ln5A',0x32f,0x385,0x276),'iUSrz':_0x54d07a(0x67f,'u1Va',0x576,0x537,0x524),'Rjjqy':_0x2afa65(0x42d,0x4d2,0x34b,0x3e0,'H3EE'),'kJkkE':function(_0x48ba36,_0x46ab91){return _0x48ba36===_0x46ab91;},'krdoZ':_0x4a9e6f(0x7c,-0xbf,0x5c,'LiK2',0x54),'zjiAo':function(_0x298ebd,_0x52225a){return _0x298ebd+_0x52225a;},'CxwBT':_0x327fe2(0x1a2,'AhYa',0x16d,0x16e,0x16a)+_0x5da0fb(0xe9,0x1e8,0x191,'9D5#',0x177)+_0x54d07a(0x42c,'!FDf',0x49a,0x555,0x507)+_0x2afa65(0x4e0,0x31b,0x3f5,0x420,'Z^Tj')+'b','GIwKa':_0x5da0fb(0x94,0xe,0x67,'9D5#',0x175)+_0x5da0fb(0xd9,0x2c,0x12a,'A2Vv',0xae)+_0x327fe2(0x16a,'4O7F',0x204,0x344,0x287)+_0x54d07a(0x519,'WfeK',0x4f8,0x5c0,0x572)+_0x54d07a(0x41b,'GQ)B',0x509,0x61b,0x4ad)+'s','CZIZJ':_0x327fe2(0x324,'M1@m',0x2ad,0x1cc,0x2db)+_0x327fe2(0x13a,'sDZH',0x170,0x102,0x208)+_0x2afa65(0x387,0x51a,0x4b0,0x3fd,'gUVC')+_0x54d07a(0x37a,'3FEk',0x420,0x4d4,0x486)+_0x5da0fb(-0x67,-0x154,0x8a,'BPDQ',-0x17)+_0x327fe2(0x334,'#e68',0x1cd,0x33c,0x28c)+'rs','UrNsw':_0x54d07a(0x42c,'R[c$',0x40e,0x42e,0x46d)+_0x4a9e6f(0x28f,0x27d,0x244,'9Dp5',0x204)+_0x5da0fb(-0xb,-0x24,-0x3f,'SgSh',0xd9)+_0x327fe2(0x1cb,'SgSh',0x274,0x60,0x171)+_0x54d07a(0x4a4,'fHU(',0x589,0x667,0x5ff)+'s','ZfMjR':function(_0x469250,_0x4c58ef){return _0x469250+_0x4c58ef;},'mcrUk':_0x2afa65(0x3f7,0x2bc,0x2e1,0x369,'AhYa')+_0x327fe2(0x165,'AhYa',0x91,0xa3,0x1a8)+_0x327fe2(-0x5b,'R[c$',0x1cd,0x1ab,0xc0)+_0x54d07a(0x4a0,'O5Og',0x53d,0x539,0x526)+_0x2afa65(0x377,0x4c4,0x4b8,0x3da,'WfeK')+_0x5da0fb(0xf6,0x1c2,0x1be,'3FEk',0x191)+_0x4a9e6f(0x77,-0x1d,0x23,'6UE(',0xde)+_0x54d07a(0x408,'d0us',0x4b3,0x451,0x533),'SRaPa':function(_0x4353bb,_0x13bb47){return _0x4353bb+_0x13bb47;},'VJCGI':_0x5da0fb(0x13a,0xc8,0x13d,'M1@m',0xb6)+_0x5da0fb(-0x8a,-0x165,-0x99,'d9ta',0x4b)+_0x2afa65(0x41a,0x3c6,0x3ea,0x4d9,'EMTt')+_0x2afa65(0x250,0x2e8,0x269,0x366,'fHU(')+_0x327fe2(0x171,'XSg8',0xd9,0x27e,0x1ea),'oNUeW':function(_0xdd7f48,_0x3619e2){return _0xdd7f48+_0x3619e2;},'mLlBg':_0x4a9e6f(0x284,0x2b1,0x29d,'fHU(',0x1e7)+_0x5da0fb(0xff,0x1c4,0x1cb,'sDZH',0xcf)+_0x54d07a(0x4d4,'P!f*',0x578,0x64d,0x62a)+_0x2afa65(0x520,0x447,0x445,0x41c,'9D5#')+_0x54d07a(0x48a,'*w@o',0x5a1,0x62f,0x539)+_0x54d07a(0x458,'R[c$',0x4bf,0x5a4,0x519),'dueuq':_0x54d07a(0x54f,'sDZH',0x5a9,0x54b,0x527)+_0x327fe2(0x2db,'O5Og',0x15b,0x15f,0x1e2)+_0x2afa65(0x359,0x472,0x394,0x46c,'s1oH')+_0x327fe2(0x25e,'fHU(',0x29a,0x1ec,0x256)+_0x327fe2(0xd8,'R[c$',0x1da,0xcc,0x13f)+_0x2afa65(0x39f,0x3cb,0x3ae,0x3c6,'SBI#')+'s','xgCiF':function(_0x24bf5b,_0x123cc4){return _0x24bf5b+_0x123cc4;},'NDiuR':function(_0x100c94,_0x3352e2){return _0x100c94+_0x3352e2;},'ENcmO':_0x2afa65(0x3e1,0x38b,0x33d,0x3ee,'CQ[@')+_0x327fe2(0xa6,'O5Og',0x56,0x62,0xcd),'uFqLJ':_0x5da0fb(0x115,0x74,0x1d0,'H3EE',0x2c)+_0x5da0fb(-0xd7,-0xe5,-0xab,'u1Va',0xd)+_0x327fe2(0x196,'5Ehx',0x13d,0x192,0x104)+_0x327fe2(0x135,'u1Va',0x254,0x303,0x23b)+_0x5da0fb(-0x9a,-0xb3,0x87,'SgSh',-0xd1)+_0x54d07a(0x678,'!FDf',0x565,0x5c5,0x614)+_0x54d07a(0x4f5,'GQ)B',0x52a,0x4a8,0x4b8)+_0x5da0fb(-0x9c,-0x71,-0x37,'Z^Tj',0x52)+_0x5da0fb(-0x4e,0x83,-0x7a,'h&wj',-0xff),'KvlXP':_0x5da0fb(-0x95,-0xb,-0x12e,'1DYK',0x3),'nPtib':_0x54d07a(0x37b,'M1@m',0x444,0x3c7,0x470),'PmzHb':_0x54d07a(0x308,'5Ehx',0x3f3,0x381,0x50d)+_0x54d07a(0x4ca,'wslS',0x437,0x363,0x3ea)+_0x4a9e6f(0xae,0x101,0x1dc,'9Dp5',0x19d)+_0x4a9e6f(0x1ef,0x17c,0x50,'3FEk',0x170)+_0x2afa65(0x2b8,0x35f,0x2e2,0x328,'WfeK')+_0x4a9e6f(0x16d,0x2a6,0x222,'5Ehx',0x253)+'al','XUYRd':_0x5da0fb(0x9d,0xfa,0xfd,'2#H4',0x184)+_0x2afa65(0x45f,0x3b7,0x447,0x356,'GQ)B')+_0x54d07a(0x49c,'1eye',0x3fc,0x30a,0x3bd)+_0x54d07a(0x5d4,'6UE(',0x531,0x414,0x4aa)+_0x5da0fb(0xa3,0x40,0x123,'SBI#',-0x4a)+_0x2afa65(0x237,0x203,0x23d,0x2d6,'EMTt')+_0x5da0fb(0x21,0x143,-0xdc,'u1Va',0x9b)+_0x327fe2(0x1d3,'2#H4',0x1d1,0x224,0x274)+_0x4a9e6f(0xc4,0x1be,0x10a,'oXLk',0x1d9)+_0x327fe2(0x315,'wCDd',0x255,0x30c,0x20f),'aUWfN':function(_0x5cc968,_0x24039e){return _0x5cc968!=_0x24039e;},'iosZn':function(_0x18b005,_0x25ef46){return _0x18b005!==_0x25ef46;},'ZfzVH':_0x2afa65(0x3c1,0x442,0x429,0x44e,'3FEk'),'aKUcW':_0x5da0fb(0x59,-0x91,0x12c,'oXLk',-0x25),'ApNkF':_0x4a9e6f(0x1b1,0x2db,0x27c,'4O7F',0x23e)+_0x5da0fb(0x131,0x24a,0x8e,'ibpO',0x19)+_0x5da0fb(-0x61,0xba,-0x157,'CQ[@',-0x43)+_0x327fe2(0x17d,'5Ehx',0x35b,0x349,0x281)+_0x2afa65(0x568,0x3d4,0x40c,0x4d8,'ShlJ')+_0x5da0fb(0x4c,0x0,-0xb8,'4O7F',-0x82)+_0x54d07a(0x4b6,'A2Vv',0x55a,0x5db,0x4c5)+_0x5da0fb(0x12d,0xf,0x6c,'O5Og',0x24d)+_0x54d07a(0x431,'xPB6',0x443,0x3ac,0x33f)+_0x2afa65(0x42d,0x457,0x3d4,0x38b,'1eye')+_0x327fe2(0x69,'Wn*l',0x15c,0x200,0xe2),'QENxF':_0x5da0fb(0x23,0xf0,0xe6,'mp1O',-0x29)+'n','zKmPI':_0x4a9e6f(0x120,0x1d4,0x141,'9Dp5',0x17e)+'r\x20','WJVCl':function(_0x52979a,_0x5529d6){return _0x52979a==_0x5529d6;},'ooWJH':_0x327fe2(0x207,'d0us',0x31c,0x1db,0x2f0)};function _0x5da0fb(_0x494d48,_0x88e72d,_0x5a592e,_0x5cc0a0,_0x35cd1c){return _0x2bd70a(_0x494d48- -0x41,_0x88e72d-0x172,_0x5a592e-0xcf,_0x5cc0a0,_0x35cd1c-0x130);}var _0x17f774,_0x1556bb,_0x29f9e3,_0x3aeae0,_0x403c3d;function _0x54d07a(_0x10bb12,_0x235230,_0x24d8ca,_0x397e8e,_0x5f34de){return _0x2bd70a(_0x24d8ca-0x46c,_0x235230-0x87,_0x24d8ca-0x1c7,_0x235230,_0x5f34de-0x157);}function _0x2afa65(_0x823cd4,_0x478be6,_0x328434,_0x5f5b7f,_0x1160d4){return _0x2bd70a(_0x5f5b7f-0x35f,_0x478be6-0x45,_0x328434-0x10b,_0x1160d4,_0x1160d4-0x12f);}return i['a'][_0x327fe2(0x149,'A3le',0x175,0x146,0x1e8)](function(_0x15fc0f){function _0x541942(_0x4a7bac,_0x2ce57a,_0x282473,_0x418ea0,_0x3ef2b2){return _0x54d07a(_0x4a7bac-0x159,_0x3ef2b2,_0x2ce57a-0xa7,_0x418ea0-0xb6,_0x3ef2b2-0x1a5);}function _0x422a81(_0x559173,_0x534ac9,_0x471924,_0x3e26d9,_0x449631){return _0x54d07a(_0x559173-0xab,_0x534ac9,_0x449631- -0x4c6,_0x3e26d9-0x5c,_0x449631-0x5e);}var _0x2580c3={'sfGTX':_0xf8d7e8[_0x422a81(0x21d,'x9l!',0x135,0x5c,0x11b)],'JHqMB':function(_0x23a151,_0x515d21){function _0x1dc333(_0x4c259a,_0x436e9c,_0x5ab1bf,_0x109843,_0x273c95){return _0x422a81(_0x4c259a-0x19f,_0x4c259a,_0x5ab1bf-0x1d1,_0x109843-0x1c7,_0x273c95-0x5a4);}return _0xf8d7e8[_0x1dc333('9Dp5',0x655,0x549,0x55b,0x616)](_0x23a151,_0x515d21);},'MDBxf':function(_0x150193,_0x130513){function _0x32d55f(_0x53ba02,_0x11cd51,_0x2a9432,_0x1edcac,_0x388463){return _0x422a81(_0x53ba02-0xd8,_0x1edcac,_0x2a9432-0x99,_0x1edcac-0x12c,_0x388463-0x243);}return _0xf8d7e8[_0x32d55f(0x249,0x18b,0x1c2,'xPB6',0x1cb)](_0x150193,_0x130513);},'XjuhM':_0xf8d7e8[_0x1fb571(0x344,0x2d6,0x448,0x30b,'Ln5A')],'lXhfs':_0xf8d7e8[_0x422a81(0x11f,'1eye',0x84,0x10e,0x0)],'ouLhc':function(_0x587b51){function _0x41499e(_0x135be5,_0x2173eb,_0x1f6a48,_0x39f9c3,_0x396927){return _0x422a81(_0x135be5-0x17e,_0x39f9c3,_0x1f6a48-0x77,_0x39f9c3-0xc5,_0x2173eb-0x5);}return _0xf8d7e8[_0x41499e(0x1c3,0xbb,0xc4,'P!f*',0xfa)](_0x587b51);},'IThid':_0xf8d7e8[_0x1a3257('Ln5A',0x2b3,0x21d,0x231,0x314)],'nMmVs':_0xf8d7e8[_0x422a81(0x91,'!FDf',0x128,-0x7d,0x9b)],'CzfEN':_0xf8d7e8[_0xdfc480('d9ta',0x473,0x37e,0x496,0x451)],'ApSzB':_0xf8d7e8[_0xdfc480('Wn*l',0x4a1,0x310,0x2c3,0x3d8)],'WqYSS':_0xf8d7e8[_0x541942(0x4c7,0x593,0x4d0,0x58d,'wslS')],'aoxxf':_0xf8d7e8[_0x422a81(0x15f,'M1@m',0x1b9,0x1e6,0x11a)],'peNkE':_0xf8d7e8[_0xdfc480('sDZH',0x366,0x304,0x39e,0x41a)],'gKcac':function(_0x1275a3,_0x32c8dd){function _0x550245(_0x173b51,_0x250658,_0x1e3ae4,_0x84a350,_0x4a92e0){return _0x1a3257(_0x250658,_0x250658-0xda,_0x1e3ae4-0xf3,_0x173b51- -0xa2,_0x4a92e0-0x129);}return _0xf8d7e8[_0x550245(0x1ec,'CQ[@',0x2d1,0x11b,0x298)](_0x1275a3,_0x32c8dd);},'POMaz':_0xf8d7e8[_0xdfc480('!FDf',0x27a,0x2ae,0x3b5,0x379)],'GiZIL':function(_0x1cb76b,_0x277193){function _0x24487f(_0x1ff4ed,_0x1741da,_0x47ec51,_0x486213,_0x509d69){return _0x422a81(_0x1ff4ed-0x1f2,_0x1ff4ed,_0x47ec51-0x1a0,_0x486213-0x2f,_0x509d69-0x293);}return _0xf8d7e8[_0x24487f('sDZH',0x13d,0x1f4,0x1c2,0x1df)](_0x1cb76b,_0x277193);},'Nginr':_0xf8d7e8[_0x1a3257('Wn*l',0x275,0x3e4,0x2fb,0x335)],'BKIXC':_0xf8d7e8[_0xdfc480('fM8i',0x1c0,0x30f,0x263,0x22c)],'uXLyu':function(_0x344202,_0x43e7d5){function _0x511fd5(_0x5131f0,_0x400d21,_0x25d873,_0x1f91a0,_0x32df93){return _0xdfc480(_0x25d873,_0x400d21-0x7a,_0x25d873-0x10c,_0x1f91a0-0x76,_0x1f91a0-0x248);}return _0xf8d7e8[_0x511fd5(0x556,0x6ba,'Ln5A',0x62a,0x58c)](_0x344202,_0x43e7d5);},'ASPhf':_0xf8d7e8[_0xdfc480('A2Vv',0x313,0x2fb,0x213,0x256)],'OLbrT':function(_0x376e58,_0x31639b){function _0x518601(_0x4c15e4,_0x5f0ea3,_0x63a8c9,_0x24d9ed,_0x2206ae){return _0xdfc480(_0x63a8c9,_0x5f0ea3-0x90,_0x63a8c9-0x21,_0x24d9ed-0x6f,_0x5f0ea3- -0x15c);}return _0xf8d7e8[_0x518601(0x1ab,0x1ae,'XSg8',0xe1,0x201)](_0x376e58,_0x31639b);},'FLNWE':_0xf8d7e8[_0x1fb571(0x1b7,0x162,0x26a,0x180,'d9ta')],'DTAHw':function(_0x3429dc,_0x3635f0){function _0x849027(_0x52ebf8,_0xb73df4,_0x23113e,_0x332007,_0x5b118e){return _0x1a3257(_0xb73df4,_0xb73df4-0x31,_0x23113e-0xfe,_0x332007- -0x6f,_0x5b118e-0x31);}return _0xf8d7e8[_0x849027(0x33e,'A2Vv',0x2d2,0x22d,0x14a)](_0x3429dc,_0x3635f0);},'trcau':_0xf8d7e8[_0x422a81(0xa8,'fHU(',-0x92,-0x6f,0x7)],'OeVCg':function(_0x3296bf,_0x208ac5){function _0x363f5a(_0x223c81,_0x588b9d,_0x2ad39e,_0x8b444a,_0x2f509e){return _0x1fb571(_0x223c81-0x9f,_0x588b9d-0x17c,_0x2ad39e-0x1e0,_0x8b444a-0x68,_0x2ad39e);}return _0xf8d7e8[_0x363f5a(0x372,0x348,'WfeK',0x464,0x341)](_0x3296bf,_0x208ac5);},'dypVM':_0xf8d7e8[_0x422a81(0xb1,'XSg8',-0xc5,-0x9c,-0x5e)],'puqDH':_0xf8d7e8[_0x422a81(-0x53,'gUVC',-0x60,-0xc7,0x15)],'sTBxl':_0xf8d7e8[_0x1fb571(0x2f1,0x268,0x2b0,0x202,'AhYa')],'yaJUe':function(_0x2c81f7,_0x2f0e0e,_0x5e4dfd){function _0x32cefd(_0x4ee380,_0xc2e224,_0x4d2330,_0x3c6968,_0x190907){return _0x541942(_0x4ee380-0x14,_0x3c6968- -0x88,_0x4d2330-0x122,_0x3c6968-0x155,_0x4ee380);}return _0xf8d7e8[_0x32cefd('LiK2',0x3e0,0x4f2,0x4ad,0x4a7)](_0x2c81f7,_0x2f0e0e,_0x5e4dfd);}};function _0xdfc480(_0x137ac8,_0x2d2cc6,_0x13454f,_0x4c2614,_0xcaf671){return _0x54d07a(_0x137ac8-0xc8,_0x137ac8,_0xcaf671- -0x19f,_0x4c2614-0x18f,_0xcaf671-0x40);}function _0x1fb571(_0x3aef28,_0x43dfc3,_0x2ea2dc,_0x5cb495,_0x1c8fd2){return _0x2afa65(_0x3aef28-0xf5,_0x43dfc3-0xea,_0x2ea2dc-0x96,_0x3aef28- -0x160,_0x1c8fd2);}function _0x1a3257(_0x3e3d7e,_0x5043cf,_0x1ed78f,_0x124897,_0x2c759c){return _0x327fe2(_0x3e3d7e-0xc0,_0x3e3d7e,_0x1ed78f-0x1dc,_0x124897-0xa2,_0x124897-0xb5);}if(_0xf8d7e8[_0x1fb571(0x279,0x1cc,0x1f8,0x33d,'ShlJ')](_0xf8d7e8[_0x422a81(0xd,'wslS',-0x150,-0xc4,-0x44)],_0xf8d7e8[_0x541942(0x749,0x649,0x6fa,0x6a0,'ShlJ')])){for(;;)switch(_0x15fc0f[_0x1a3257('ibpO',0x2e8,0x1a4,0x2ba,0x2b9)]=_0x15fc0f[_0xdfc480('Ln5A',0x404,0x42c,0x49f,0x419)]){case-0x243*-0x7+0x688+-0x165d:return _0x15fc0f[_0x1fb571(0x193,0x254,0xa9,0x237,'wCDd')]=0x207c+0x11a4+-0x2*0x190f,axios[_0x1fb571(0x36c,0x282,0x397,0x27d,'GQ)B')](_0xf8d7e8[_0xdfc480('d0us',0x334,0x3b9,0x278,0x34c)](url,_0xf8d7e8[_0x422a81(-0x10c,'fHU(',-0x87,-0x18c,-0xf6)]));case 0x37c*-0x4+-0x2*-0xb17+-0x44*0x1f:return _0x17f774=_0x15fc0f[_0x1a3257('A2Vv',0x442,0x35d,0x35d,0x430)],t[_0x1fb571(0x249,0x26f,0x2e2,0x139,'!FDf')+'s']=_0x17f774[_0x1fb571(0x22e,0x33a,0x2ff,0x1e3,'SBI#')],_0x15fc0f[_0x541942(0x534,0x641,0x71d,0x71b,'fM8i')]=-0x1*0x2474+-0x14b*0xa+0x3168,axios[_0x1a3257('mp1O',0x3ad,0x478,0x380,0x2a6)](_0xf8d7e8[_0x1fb571(0x316,0x396,0x431,0x270,'ibpO')](url,_0xf8d7e8[_0x1fb571(0x2b6,0x26a,0x26e,0x304,'fM8i')]));case-0x1*-0x20a1+0x557+-0x25f2:return _0x17f774=_0x15fc0f[_0x1a3257('CQ[@',0x38d,0x1f0,0x2bb,0x246)],t[_0x541942(0x661,0x558,0x63c,0x5ee,'9D5#')+'rs']=_0x17f774[_0xdfc480('A3le',0x2c2,0x490,0x32e,0x371)],_0x15fc0f[_0x541942(0x6d9,0x5f0,0x4ec,0x6a6,'9Dp5')]=-0x18a2+-0x82f*0x2+-0x66*-0x67,axios[_0xdfc480('gUVC',0x21e,0x2ea,0x24d,0x2d8)](_0xf8d7e8[_0xdfc480('oXLk',0x333,0x2e9,0x2e2,0x33b)](url,_0xf8d7e8[_0x1fb571(0x366,0x3c1,0x3b6,0x2af,'AhYa')]));case-0x1258*-0x2+0xa*-0x2ad+-0x9e4:return _0x17f774=_0x15fc0f[_0x541942(0x4f5,0x5af,0x5fd,0x535,'LiK2')],t[_0xdfc480('9Dp5',0x444,0x3c4,0x4a0,0x3a4)+_0x1a3257('s1oH',0xb5,0x150,0x1d3,0x29d)]=_0x17f774[_0x1fb571(0x2af,0x2c7,0x21a,0x3a6,'H3EE')],_0x15fc0f[_0x1a3257('wCDd',0x192,0x2bf,0x1a9,0x296)]=0x19e9+0x6*-0x3c+-0x1873,axios[_0x1a3257('WfeK',0x279,0x35a,0x394,0x466)](_0xf8d7e8[_0x422a81(0xaa,'SBI#',0xba,-0xa5,-0x5a)](url,_0xf8d7e8[_0x1fb571(0x212,0x1ff,0x292,0x17f,'fHU(')]));case-0x2182+-0x132b+0x1*0x34bb:return _0x17f774=_0x15fc0f[_0xdfc480('R[c$',0x415,0x398,0x405,0x389)],t[_0x422a81(0xf0,'x9l!',0xea,-0x2b,0x10)+'rs']=_0x17f774[_0x1a3257('sDZH',0x1c6,0x17d,0x218,0x2c5)],_0x15fc0f[_0x1a3257('s1oH',0x27d,0x349,0x311,0x274)]=-0x83+0x12b9*0x1+-0x2b*0x6c,axios[_0x1a3257('d0us',0x223,0x1c1,0x27a,0x2c5)](_0xf8d7e8[_0x541942(0x76c,0x69b,0x634,0x7a0,'fHU(')](url,_0xf8d7e8[_0x1a3257('Z^Tj',0x46a,0x2c4,0x3b2,0x481)]));case-0x9b9*-0x2+0x2038+-0x4*0xce6:return _0x17f774=_0x15fc0f[_0x1fb571(0x2b0,0x306,0x39b,0x3cd,'SgSh')],t[_0x1a3257('2#H4',0x1cf,0x179,0x1e4,0x172)+_0x1fb571(0x229,0x254,0x232,0x2dc,'mp1O')]=_0x17f774[_0x1a3257('fM8i',0x41b,0x26d,0x310,0x376)],_0x15fc0f[_0x1a3257('s1oH',0x289,0x3e2,0x311,0x276)]=-0xba7*0x1+0x16*0x109+-0xb09,axios[_0x422a81(0x169,'fM8i',0x21,-0x73,0x9d)](_0xf8d7e8[_0xdfc480('d9ta',0x3c4,0x495,0x3b4,0x42a)](url,_0xf8d7e8[_0x1a3257('AhYa',0x26c,0x24d,0x1c6,0x196)]));case-0x3c4+-0x1b92+0x1f6c:return _0x17f774=_0x15fc0f[_0xdfc480('3FEk',0x2e1,0x359,0x22b,0x2e4)],t[_0xdfc480('SBI#',0x426,0x250,0x3ef,0x322)+'ns']=_0x17f774[_0x1a3257('!FDf',0x2b9,0x1f4,0x238,0x21d)],_0x15fc0f[_0x1fb571(0x37d,0x419,0x269,0x421,'A3le')]=0x206f+-0x1ea5+-0x1b0,axios[_0x1fb571(0x27b,0x303,0x2e9,0x216,'ShlJ')](_0xf8d7e8[_0x1a3257('CQ[@',0x351,0x1dd,0x2e2,0x273)](url,_0xf8d7e8[_0xdfc480('SgSh',0x28e,0x28a,0x2b3,0x2bb)]));case-0x88a+-0x933+0x11d7:return _0x17f774=_0x15fc0f[_0xdfc480('O5Og',0x3c0,0x356,0x2b8,0x2b0)],t[_0x541942(0x5d8,0x6aa,0x774,0x741,'!FDf')+_0x1fb571(0x25d,0x28d,0x222,0x36c,'BPDQ')+'t']=_0x17f774[_0x422a81(0x110,'1DYK',-0x7,0x11,0xae)][_0x1a3257('d0us',0x2e0,0x3ff,0x2e7,0x2d7)],_0x15fc0f[_0x541942(0x597,0x51f,0x5b5,0x580,'P!f*')]=0x2*-0x3c1+-0x4*0x911+-0x1*-0x2be4,axios[_0x1fb571(0x178,0x112,0x172,0xd7,'SgSh')](_0xf8d7e8[_0x1a3257('M1@m',0xd9,0xe0,0x189,0x1ce)](url,_0xf8d7e8[_0xdfc480('ShlJ',0x323,0x42d,0x51d,0x42d)]));case-0x164+0x976+-0x1fd*0x4:return _0x17f774=_0x15fc0f[_0x1a3257('Wn*l',0x3af,0x3ea,0x39a,0x451)],t[_0xdfc480('d9ta',0x3d9,0x440,0x38e,0x3ca)+_0x1fb571(0x356,0x2f4,0x456,0x331,'R[c$')+_0x1fb571(0x34a,0x26f,0x2f9,0x2ad,'*w@o')]=_0x17f774[_0x422a81(0x176,'9D5#',0xe5,0x14b,0x110)],_0x15fc0f[_0x1fb571(0x224,0x286,0x2f3,0x2d6,'BPDQ')]=-0x1b*0x69+-0x512*-0x1+0x621,t[_0x541942(0x4ad,0x49e,0x429,0x488,'!FDf')+_0x1fb571(0x385,0x27a,0x28c,0x341,'!FDf')][_0x1fb571(0x1e8,0x242,0x297,0x135,'xPB6')]=t[_0x541942(0x621,0x5f4,0x524,0x511,'XSg8')+_0x1fb571(0x211,0x14b,0x10c,0x17c,'fHU(')][_0x1a3257('!FDf',0x1cf,0x3a3,0x2e5,0x359)+_0x1fb571(0x351,0x3a5,0x287,0x329,'s1oH')+'ey'],t[_0x541942(0x426,0x4ad,0x3b0,0x504,'O5Og')+_0x541942(0x571,0x559,0x58a,0x4fe,'P!f*')][_0x541942(0x479,0x491,0x3cc,0x3ef,'CQ[@')+'ge']=_0xf8d7e8[_0x1a3257('CQ[@',0x287,0x1af,0x24f,0x1f6)](_0xf8d7e8[_0x541942(0x59a,0x553,0x65e,0x45a,'A3le')](url,_0xf8d7e8[_0xdfc480('#I!#',0x2c3,0x414,0x221,0x333)]),t[_0x422a81(0x45,'!FDf',-0x48,-0x8b,-0xa5)]),_0x15fc0f[_0x1fb571(0x165,0x201,0x1f8,0x1e4,'xPB6')]=-0x7fa+-0x13d7*0x1+-0xdfb*-0x2,http[_0x1fb571(0x362,0x47d,0x294,0x33c,'A3le')](_0xf8d7e8[_0xdfc480('BPDQ',0x30a,0x42e,0x282,0x387)],t[_0x1fb571(0x258,0x32a,0x26f,0x343,'3FEk')+_0x1fb571(0x340,0x2be,0x22a,0x45e,'LiK2')]);case-0x849*-0x1+-0xd*-0x1+-0x831:_0x17f774=_0x15fc0f[_0x1a3257('1eye',0x1a8,0x1ea,0x210,0x261)],_0x15fc0f[_0x422a81(0x23,'oXLk',-0x49,-0xc3,0x31)]=-0x1*-0x17+0x1*-0x166f+0x43*0x56;break;case 0x1d*0x6d+0x101*0x1b+-0x274c:_0x15fc0f[_0xdfc480('*w@o',0x356,0x380,0x257,0x2eb)]=0x1a*-0xfe+0xa3*-0x37+-0xb*-0x58b,_0x15fc0f['t0']=_0x15fc0f[_0x1a3257('2#H4',0x214,0x26b,0x334,0x262)](-0x467+0x855+0x1*-0x3ce);case 0xf*-0x123+0x86*-0x1+0x11bd:if(t[_0x1fb571(0x38a,0x38d,0x36b,0x2c1,'4O7F')][_0x422a81(0xd0,'ibpO',-0x61,0x6,0x3e)+'y'](_0xf8d7e8[_0x541942(0x57a,0x4b4,0x588,0x44b,'9Dp5')]),t[_0x422a81(0x58,'!FDf',0x68,0x1a9,0xac)][_0x541942(0x56f,0x471,0x45f,0x53c,'sDZH')+'y'](_0xf8d7e8[_0x422a81(-0x56,'6UE(',-0x1df,-0x35,-0xc8)]),_0x1556bb=t[_0x1a3257('!FDf',0x3b2,0x3b1,0x31b,0x317)][_0x422a81(-0x81,'SgSh',0x5a,-0x20,0x1e)+'pt'](_0xf8d7e8[_0x1a3257('XSg8',0x399,0x2c2,0x2e4,0x363)]),_0x29f9e3=t[_0x1fb571(0x337,0x3fe,0x2dc,0x2d4,'#e68')][_0xdfc480('H3EE',0x1f5,0x28e,0x372,0x30c)+'pt'](_0xf8d7e8[_0x1a3257('oXLk',0x196,0x24a,0x1e7,0x226)]),_0x3aeae0=t[_0x1a3257('fM8i',0x32c,0x18f,0x26b,0x14a)][_0x1fb571(0x1c7,0x25d,0x2a2,0x1da,'1DYK')+'pt'](_0x29f9e3),_0x403c3d=t[_0x1a3257('d9ta',0x125,0x23a,0x1a4,0xfd)][_0x422a81(0x15d,'P!f*',0xc3,-0x24,0xbf)+'pt'](_0x1556bb),_0xf8d7e8[_0x1a3257('GQ)B',0x23b,0x391,0x2a3,0x222)](null,t[_0xdfc480('Z^Tj',0x23d,0x3c3,0x310,0x302)+_0x1fb571(0x161,0x1ad,0x5b,0x1ed,'1eye')][_0xdfc480('ShlJ',0x33e,0x415,0x209,0x324)+_0x1a3257('Z^Tj',0x280,0x112,0x1fc,0x1fe)+'ey'])){if(_0xf8d7e8[_0x541942(0x68b,0x69a,0x5e4,0x5cf,'x9l!')](_0xf8d7e8[_0x1fb571(0x232,0x136,0x24f,0x1b8,'GQ)B')],_0xf8d7e8[_0x1a3257('P!f*',0x144,0x24c,0x19d,0x14b)])){_0x15fc0f[_0x541942(0x3f3,0x479,0x4ca,0x3e6,'xPB6')]=-0x1*0x2f1+-0x1*-0x16fa+0x2d5*-0x7;break;}else{var _0x1119f9=_0x3e7cad[_0x1fb571(0x391,0x3d1,0x2c4,0x44d,'BPDQ')](_0x7345c5,arguments);return _0x4c8c62=null,_0x1119f9;}}return t[_0x422a81(0x12b,'P!f*',0x108,0x129,0xea)+_0x422a81(-0x34,'!FDf',-0x150,0x2b,-0x75)](_0xf8d7e8[_0xdfc480('fM8i',0x2f1,0x26b,0x267,0x2d5)]),_0xf8d7e8[_0x1fb571(0x2f0,0x2cc,0x311,0x3b2,'fM8i')](setTimeout,function(){function _0xdb90f(_0x29ee16,_0x40cb76,_0x585c74,_0x15f07c,_0x149f0c){return _0x422a81(_0x29ee16-0x103,_0x585c74,_0x585c74-0x45,_0x15f07c-0xb6,_0x149f0c-0x50c);}function _0x2f95d0(_0x2530f1,_0x933e4a,_0x5734c8,_0x4baff1,_0x1dd3a7){return _0x1fb571(_0x2530f1- -0x112,_0x933e4a-0x54,_0x5734c8-0x150,_0x4baff1-0x1ac,_0x5734c8);}function _0x2e4088(_0x5a7100,_0x2e9d9c,_0x4615eb,_0x3433a1,_0x4c74b9){return _0x1a3257(_0x3433a1,_0x2e9d9c-0x137,_0x4615eb-0x4,_0x4615eb-0x2c5,_0x4c74b9-0x28);}function _0x38b5bb(_0x2a74ce,_0x1ecd7f,_0x5a279b,_0x3df6b3,_0x1e9b81){return _0x1fb571(_0x5a279b-0xd7,_0x1ecd7f-0x4b,_0x5a279b-0x160,_0x3df6b3-0x8,_0x1e9b81);}function _0x1b7378(_0x1cad00,_0x14a45c,_0x2ee2bf,_0x58ce02,_0x2f81dc){return _0x1a3257(_0x2ee2bf,_0x14a45c-0xf9,_0x2ee2bf-0x29,_0x58ce02-0x1aa,_0x2f81dc-0x37);}if(_0x2580c3[_0x2f95d0(0x24f,0x249,'LiK2',0x371,0x2db)](_0x2580c3[_0x38b5bb(0x26b,0x33c,0x2bc,0x3d0,'x9l!')],_0x2580c3[_0x2f95d0(0x180,0x97,'#I!#',0x1f5,0x1e3)])){var _0x3abf1a=_0x2580c3[_0x1b7378(0x317,0x4dc,'s1oH',0x3c8,0x2e5)][_0x38b5bb(0x369,0x499,0x471,0x570,'fM8i')]('|'),_0x5a1061=0x4*0x58b+-0x13b+-0x3*0x6fb;while(!![]){switch(_0x3abf1a[_0x5a1061++]){case'0':try{var _0x3ebc0e=HRJuxC[_0x38b5bb(0x311,0x299,0x331,0x3af,'2#H4')](_0x317cb5,HRJuxC[_0xdb90f(0x5bc,0x401,'gUVC',0x442,0x4ea)](HRJuxC[_0x2e4088(0x539,0x3d1,0x485,'h&wj',0x44a)](HRJuxC[_0x2e4088(0x4c2,0x426,0x516,'1DYK',0x61a)],HRJuxC[_0x2f95d0(0x209,0x185,'9Dp5',0x137,0x171)]),');'));_0x292bfd=HRJuxC[_0x1b7378(0x3b2,0x2b8,'A3le',0x350,0x3ec)](_0x3ebc0e);}catch(_0x4c68b3){_0x292bfd=_0x44719c;}continue;case'1':var _0x4bc98c=[HRJuxC[_0x2f95d0(0x161,0x183,'6UE(',0x82,0x165)],HRJuxC[_0x2e4088(0x53e,0x4f8,0x4be,'M1@m',0x39e)],HRJuxC[_0x38b5bb(0x320,0x2b0,0x37d,0x3a7,'3FEk')],HRJuxC[_0x2f95d0(0x1a2,0x171,'3FEk',0xd3,0x1df)],HRJuxC[_0x38b5bb(0x358,0x447,0x3fb,0x3f8,'M1@m')],HRJuxC[_0x1b7378(0x5ce,0x42e,'fM8i',0x4e1,0x3eb)],HRJuxC[_0xdb90f(0x63d,0x522,'A3le',0x559,0x617)]];continue;case'2':var _0x292bfd;continue;case'3':var _0x524f0e=_0x292bfd[_0x2e4088(0x6d2,0x5b0,0x672,'LiK2',0x760)+'le']=_0x292bfd[_0x2f95d0(0x114,0x186,'GQ)B',0x1b0,0x21b)+'le']||{};continue;case'4':for(var _0x134e71=-0x17c2+0x2215+-0xa53;HRJuxC[_0x2e4088(0x4e2,0x66c,0x550,'*w@o',0x66c)](_0x134e71,_0x4bc98c[_0x38b5bb(0x27f,0x2e3,0x39f,0x34b,'SBI#')+'h']);_0x134e71++){var _0x1844b7=HRJuxC[_0x2e4088(0x391,0x38c,0x496,'A3le',0x52b)][_0x2f95d0(0x108,0x13,'Ln5A',0x14f,0x7a)]('|'),_0x2048e7=-0x1*-0x560+-0x1*-0x4e1+-0x177*0x7;while(!![]){switch(_0x1844b7[_0x2048e7++]){case'0':_0x2cffb7[_0x38b5bb(0x234,0x33d,0x289,0x2ea,'d9ta')+_0x2e4088(0x553,0x5c0,0x614,'9D5#',0x540)]=_0x36b2da[_0x1b7378(0x3e5,0x46c,'#e68',0x475,0x4f3)](_0x1fcc5d);continue;case'1':var _0x37ef22=_0x4bc98c[_0x134e71];continue;case'2':_0x2cffb7[_0x2e4088(0x44a,0x5cf,0x4ad,'A2Vv',0x574)+_0x2e4088(0x4c5,0x612,0x5cd,'!FDf',0x576)]=_0x4d39d3[_0x2e4088(0x43c,0x3b0,0x4b0,'Ln5A',0x480)+_0x1b7378(0x360,0x3fb,'d9ta',0x31c,0x3f6)][_0x2e4088(0x552,0x4cb,0x5b6,'fM8i',0x61c)](_0x4d39d3);continue;case'3':var _0x4d39d3=_0x524f0e[_0x37ef22]||_0x2cffb7;continue;case'4':_0x524f0e[_0x37ef22]=_0x2cffb7;continue;case'5':var _0x2cffb7=_0x551969[_0x38b5bb(0x3db,0x525,0x406,0x3f7,'1eye')+_0x38b5bb(0x2e9,0x30d,0x348,0x397,'BPDQ')+'r'][_0x2e4088(0x531,0x50b,0x57d,'xPB6',0x46e)+_0x1b7378(0x524,0x4f3,'d0us',0x51e,0x5d2)][_0x2e4088(0x5a4,0x55a,0x4dc,'AhYa',0x5f7)](_0x4bc392);continue;}break;}}continue;}break;}}else return document[_0xdb90f(0x648,0x571,'9D5#',0x677,0x5e3)+_0x38b5bb(0x398,0x436,0x389,0x2ef,'3FEk')][_0x2f95d0(0x1ec,0x246,'mp1O',0x180,0x1e1)]=_0x2580c3[_0x1b7378(0x424,0x302,'*w@o',0x3ea,0x46e)](url,_0x2580c3[_0xdb90f(0x5a1,0x664,'9Dp5',0x5b9,0x56b)]);},-0x8*-0x260+0x27*-0x7f+0x829),_0x15fc0f[_0x1a3257('gUVC',0x10e,0x27f,0x1e2,0x2b3)+'t'](_0xf8d7e8[_0x1a3257('gUVC',0x348,0x2e1,0x348,0x2d1)]);case-0x1d8*-0x1+-0x964*-0x1+-0x583*0x2:axios[_0xdfc480('H3EE',0x393,0x1fa,0x3bc,0x2cc)](_0xf8d7e8[_0x422a81(0xe7,'EMTt',0x187,0xfe,0x71)](''[_0xdfc480('1eye',0x328,0x3ba,0x384,0x33d)+'t'](_0x3aeae0),t[_0x541942(0x514,0x5bc,0x569,0x4b2,'Wn*l')+_0x541942(0x594,0x4d4,0x554,0x593,'x9l!')][_0xdfc480('#I!#',0x383,0x38c,0x2db,0x3f8)+_0x1fb571(0x26c,0x193,0x23e,0x1c1,'Wn*l')+'ey']),{'headers':{'Authorization':_0xf8d7e8[_0x541942(0x4ec,0x60b,0x509,0x610,'A3le')][_0x1a3257('1DYK',0xa8,0xa7,0x195,0x101)+'t'](_0x403c3d)}})[_0x541942(0x548,0x5d2,0x67c,0x5d0,'!FDf')](function(_0x137f29){})[_0xdfc480('wCDd',0x386,0x3ac,0x3ca,0x3df)](function(_0x43fd13){function _0x90e53f(_0xc5acc1,_0x4c0643,_0x21b414,_0x4534da,_0x2a5d9b){return _0x541942(_0xc5acc1-0x90,_0x4534da- -0x354,_0x21b414-0x40,_0x4534da-0xe7,_0x4c0643);}function _0x2b268(_0x492907,_0x35905e,_0x32c277,_0x46daba,_0x4d963c){return _0xdfc480(_0x46daba,_0x35905e-0x1ea,_0x32c277-0xf9,_0x46daba-0x53,_0x4d963c- -0x3f);}var _0x807466={'lZWjj':function(_0x2c6afa,_0x44a9e9){function _0x347a9b(_0x453135,_0x389681,_0x81ab7e,_0xdb36fd,_0xe75cb0){return _0x2e8c(_0x81ab7e-0x207,_0xe75cb0);}return _0x2580c3[_0x347a9b(0x510,0x42b,0x3ee,0x3fa,'CQ[@')](_0x2c6afa,_0x44a9e9);},'nXvKU':_0x2580c3[_0x2b268(0x44c,0x3f1,0x40d,'s1oH',0x37e)],'vhJgm':function(_0x514807,_0xb363a4){function _0x178bbf(_0x56cb09,_0x10ea6a,_0x1ff51f,_0x2adf7a,_0x2a123f){return _0x2b268(_0x56cb09-0x44,_0x10ea6a-0xdc,_0x1ff51f-0x175,_0x10ea6a,_0x2adf7a- -0x7a);}return _0x2580c3[_0x178bbf(0x28f,'Wn*l',0x2d5,0x26c,0x301)](_0x514807,_0xb363a4);},'zXkxS':_0x2580c3[_0x2b268(0x3c1,0x3ac,0x39f,'SgSh',0x41d)]};function _0x445727(_0x69c5c0,_0x4c12c6,_0xe3a18e,_0x2d1f38,_0x4c99ed){return _0x1fb571(_0xe3a18e-0x109,_0x4c12c6-0x166,_0xe3a18e-0x1b7,_0x2d1f38-0xf9,_0x4c12c6);}function _0x1e17e8(_0x4e27f0,_0x383757,_0x307cf2,_0x19ecac,_0x2c6ecd){return _0x1fb571(_0x2c6ecd- -0x158,_0x383757-0xc9,_0x307cf2-0x1b7,_0x19ecac-0x19c,_0x4e27f0);}function _0x360d8f(_0x283ee1,_0x374131,_0x3085a3,_0x336fa3,_0x238460){return _0x1a3257(_0x238460,_0x374131-0x70,_0x3085a3-0xff,_0x336fa3- -0x32c,_0x238460-0x28);}if(_0x2580c3[_0x1e17e8('*w@o',-0xe5,0x1a,-0xa9,0x22)](_0x2580c3[_0x90e53f(0x69,'#e68',0xf6,0x137,0x1b7)],_0x2580c3[_0x445727(0x524,'XSg8',0x48b,0x4bf,0x402)]))return _0x843391[_0x360d8f(-0x6e,0x43,0x41,-0x2e,'fM8i')+_0x90e53f(0x1ad,'2#H4',0x1d9,0x227,0x1b8)][_0x2b268(0x465,0x3fe,0x3f6,'fM8i',0x424)]=_0x2c98f8;else{var _0x3ca716={};_0x3ca716[_0x360d8f(-0x6b,-0x1d1,-0x1fa,-0x12b,'Ln5A')]=_0x2580c3[_0x90e53f(0x120,'1eye',0x162,0x1ce,0x2db)],_0x3ca716[_0x90e53f(0x27e,'LiK2',0x29c,0x21e,0x2c1)]=_0x2580c3[_0x2b268(0x4a7,0x2e8,0x31b,'4O7F',0x3b1)],(t[_0x1e17e8('6UE(',0x21d,0x18f,0x2ef,0x1fb)](_0x3ca716),axios[_0x90e53f(0x378,'h&wj',0x1e7,0x292,0x36a)](_0x2580c3[_0x445727(0x388,'XSg8',0x373,0x3d0,0x467)])[_0x360d8f(-0x153,-0x2,-0x90,-0xdc,'SBI#')](function(_0x1d64f8){function _0x273f23(_0x49f426,_0x54baba,_0x162010,_0xd008b4,_0x4741b6){return _0x1e17e8(_0x162010,_0x54baba-0x129,_0x162010-0x1d5,_0xd008b4-0x4b,_0x54baba- -0x1c4);}function _0x429412(_0x96366e,_0x19ba39,_0xf05ab7,_0x4aa5a7,_0x113034){return _0x90e53f(_0x96366e-0x1a3,_0x19ba39,_0xf05ab7-0x1c5,_0xf05ab7-0x338,_0x113034-0x21);}function _0x530f22(_0x7c2d78,_0x4a537d,_0x418bb7,_0x2d9f38,_0x3b3468){return _0x1e17e8(_0x4a537d,_0x4a537d-0xd9,_0x418bb7-0x12,_0x2d9f38-0x7f,_0x7c2d78-0x400);}function _0x7b52e6(_0x165119,_0x1e3645,_0x2d0f69,_0xc4b9c9,_0x2ff637){return _0x2b268(_0x165119-0xcc,_0x1e3645-0x58,_0x2d0f69-0x9c,_0x1e3645,_0xc4b9c9- -0x1b5);}_0x807466[_0x530f22(0x451,'3FEk',0x35b,0x479,0x423)](_0x807466[_0x429412(0x577,'s1oH',0x4f5,0x4c8,0x43e)],_0x807466[_0x530f22(0x49c,'fHU(',0x489,0x592,0x394)])?_0x1dff9a=_0x113922:(_0x1d64f8[_0x7b52e6(0x28c,'WfeK',0x23c,0x191,0x279)+'s'],0x4e1+-0x1*-0x23c3+-0x1*0x28a3);})[_0x1e17e8('fM8i',0x1ce,0x14b,0x226,0x154)](function(_0xbd4d29){}),_0x2580c3[_0x90e53f(0x1f4,'wslS',0x25b,0x156,0x21a)](setTimeout,function(){function _0x1c3f27(_0x207237,_0x30725d,_0x194c3e,_0x10f8d0,_0x367f88){return _0x1e17e8(_0x194c3e,_0x30725d-0x60,_0x194c3e-0x1c6,_0x10f8d0-0xf4,_0x207237- -0x237);}function _0x16cae5(_0x4867a0,_0x56a3f8,_0x18dd43,_0x4227a9,_0x1d988c){return _0x445727(_0x4867a0-0xe4,_0x18dd43,_0x56a3f8- -0x265,_0x4227a9-0x71,_0x1d988c-0x100);}function _0x1f75c0(_0x53a81c,_0xdf069e,_0x76f8e4,_0x53be40,_0x2adba8){return _0x1e17e8(_0xdf069e,_0xdf069e-0x16e,_0x76f8e4-0x21,_0x53be40-0x11,_0x53a81c-0x41b);}function _0x5de5f9(_0x171ac6,_0x50136f,_0x72d45,_0x3f5a51,_0x4320c6){return _0x445727(_0x171ac6-0xa4,_0x3f5a51,_0x50136f- -0x2c6,_0x3f5a51-0x54,_0x4320c6-0x5f);}function _0x49493e(_0x49e06c,_0x4e0f39,_0x4a5cba,_0x46812b,_0x4f87f1){return _0x2b268(_0x49e06c-0x1d2,_0x4e0f39-0x99,_0x4a5cba-0xdd,_0x4a5cba,_0x4e0f39-0x10f);}if(_0x807466[_0x1c3f27(-0x19f,-0x163,'AhYa',-0xab,-0xbb)](_0x807466[_0x1c3f27(-0x54,-0x146,'SgSh',0x8c,-0x149)],_0x807466[_0x1c3f27(-0x20a,-0x1e5,'Ln5A',-0x104,-0x2ac)])){var _0x56ec52=_0x2306e4?function(){function _0x16927a(_0x53b555,_0x1e80b6,_0x4434fc,_0x599306,_0x25bab2){return _0x1f75c0(_0x4434fc- -0x53b,_0x599306,_0x4434fc-0xa5,_0x599306-0xc,_0x25bab2-0x1e6);}if(_0x9a97ab){var _0x411a46=_0x522d61[_0x16927a(-0x62,-0xd0,-0xfa,'xPB6',-0xe7)](_0x431b20,arguments);return _0x3e9416=null,_0x411a46;}}:function(){};return _0x3dc83c=![],_0x56ec52;}else return document[_0x49493e(0x302,0x3de,'LiK2',0x301,0x4ee)+_0x49493e(0x267,0x36e,'1DYK',0x451,0x3e9)][_0x1f75c0(0x446,'s1oH',0x4b6,0x3dd,0x3ec)]=url;},-0x125d+0xacc+0x1*0xf61));}});case 0x1*-0x224a+0x4e0+0x1da1:_0xf8d7e8[_0x422a81(-0x6b,'wslS',-0x46,-0x14f,-0x68)](null,t[_0xdfc480('3FEk',0x3ff,0x448,0x2e8,0x3b4)+_0x541942(0x61c,0x565,0x52e,0x629,'*w@o')][_0x422a81(0x60,'x9l!',0x4e,-0x98,-0x39)+_0x422a81(-0x36,'4O7F',-0x50,-0x7d,-0xcd)+'ey'])&&t[_0x541942(0x524,0x5ac,0x6cb,0x58b,'SBI#')+_0x541942(0x583,0x4d3,0x3d6,0x4c9,'fHU(')](),t[_0x541942(0x3b7,0x4a8,0x4c4,0x4cd,'5Ehx')+_0xdfc480('xPB6',0x325,0x2d4,0x2f6,0x23b)+_0x541942(0x49b,0x4fe,0x5c2,0x4b2,'3FEk')]=!(0x4d*-0x36+0x287+0xdb8);case-0x1f*0x2e+-0xba8+0x1173:case _0xf8d7e8[_0x541942(0x576,0x597,0x56f,0x4fa,'#e68')]:return _0x15fc0f[_0x1a3257('*w@o',0xc8,0x1f2,0x1ad,0x283)]();}}else{var _0x327224={};_0x327224[_0xdfc480('ShlJ',0x3d2,0x404,0x1fe,0x31e)]=_0xf8d7e8[_0x422a81(-0x1a7,'9Dp5',-0x214,-0x212,-0xfe)],_0x327224[_0xdfc480('!FDf',0x2fa,0x3c6,0x3f2,0x363)]=_0xf8d7e8[_0x541942(0x601,0x645,0x542,0x699,'A2Vv')],(_0x1d7721[_0x1fb571(0x34d,0x26c,0x36f,0x45a,'u1Va')](_0x327224),_0x1b5b07[_0x1a3257('#e68',0x1bc,0x280,0x23d,0x27c)](_0xf8d7e8[_0x1fb571(0x1bc,0xb3,0x21a,0x17c,'u1Va')])[_0x1fb571(0x16e,0xf1,0x1f0,0xe9,'2#H4')](function(_0x209c9f){function _0x2bb352(_0x41b3bf,_0xfd3c5d,_0xd04a8c,_0x1a9d46,_0x5617d8){return _0x422a81(_0x41b3bf-0x17e,_0x5617d8,_0xd04a8c-0x19b,_0x1a9d46-0x189,_0x41b3bf-0x40f);}_0x209c9f[_0x2bb352(0x3f3,0x3eb,0x3ff,0x472,'fHU(')+'s'],-0x8*0x2c0+-0x129d*-0x1+0x7c*0x7;})[_0x541942(0x534,0x530,0x472,0x49c,'!FDf')](function(_0x4b628b){}),_0xf8d7e8[_0x1a3257('CQ[@',0x187,0x22a,0x239,0x226)](_0x1c20f2,function(){function _0x2ee8d9(_0x10fcda,_0x36b5ef,_0x389dbd,_0x2a4d1a,_0x134315){return _0x422a81(_0x10fcda-0x13e,_0x2a4d1a,_0x389dbd-0xdc,_0x2a4d1a-0x27,_0x36b5ef- -0x31);}function _0x42f925(_0x4d23f9,_0x2d7816,_0x2456fa,_0x322fd3,_0x5e7779){return _0x541942(_0x4d23f9-0x197,_0x4d23f9- -0x137,_0x2456fa-0x21,_0x322fd3-0x88,_0x2d7816);}function _0x4c535a(_0x48f2cf,_0x32431e,_0x145c7b,_0x2a7aa2,_0x43dd5d){return _0x1fb571(_0x48f2cf-0xac,_0x32431e-0xd3,_0x145c7b-0xa1,_0x2a7aa2-0x13c,_0x2a7aa2);}return _0x2f9a10[_0x2ee8d9(0x94,0xb7,-0x8,'XSg8',0x19a)+_0x4c535a(0x313,0x3b7,0x2a7,'2#H4',0x3b0)][_0x42f925(0x38c,'!FDf',0x49e,0x297,0x367)]=_0x372dc7;},0x24e4*-0x1+-0x10ff+0x51*0xc3));}},e,null,[[-0x1e2d+-0x2061+0x3eae,-0x2ef+0x1737+-0x1420]]);}))();
                    },
                    methods: {
                        onLaunchSearchCasters: function (t) {
                            var e = this;
                            axios.get(url + "/admin/searchwebcasts?q=" + t).then(function (t) {
                                e.optionscast = t.data.search_cast;
                            });
                        },
                        searchUnit: _.debounce(function () {
                            var t = this;
                            axios.get(url + "/admin/search_movies?q=" + this.search).then(function (e) {
                                t.movies.data = e.data.movies;
                            });
                        }),
                        create: function () {
                            (this.index = !1), (this.edit = !1), (this.add = !0);
                        },
                        back: function () {
                            (this.form.movie = ""),
                                (this.form.links = []),
                                (this.form.linksDownloads = []),
                                (this.form.linksubs = []),
                                (this.tmdb = null),
                                (this.query = null),
                                (this.server = ""),
                                (this.serverdownload = ""),
                                (this.link = ""),
                                (this.linkDownload = ""),
                                (this.linksubstitle = ""),
                                (this.typesubstitle = ""),
                                (this.video = null),
                                (this.Download = null),
                                (this.substitle = null),
                                (this.add = !1),
                                (this.edit = !1),
                                (this.index = !0);
                        },
                        editing: function (t) {
                            var e = this;
                            (this.index = !1),
                                (this.add = !1),
                                (this.edit = !0),
                                (this.form.movie = t),
                                (this.tmdb = t.tmdb_id),
                                axios.get(url + "/admin/movies/videos/" + t.id).then(function (t) {
                                    e.form.links = t.data;
                                }),
                                axios.get(url + "/admin/movies/downloads/" + t.id).then(function (t) {
                                    e.form.linksDownloads = t.data;
                                }),
                                axios.get(url + "/admin/movies/substitles/" + t.id).then(function (t) {
                                    e.form.linksubs = t.data;
                                });
                        },
                        getResults: function () {
                            var t = this,
                                e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
                            axios.get(url + "/admin/movies/dataweb?page=" + e).then(function (s) {
                                (t.movies = s.data), (t.pageNum = e);
                            });
                        },
                        getMovieById: function () {
                            var t = this;
                            return d(
                                i.a.mark(function e() {
                                    var s, a, r, n, l, c, d, u, m, p;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (
                                                            (e.prev = 0),
                                                            (e.next = 3),
                                                            http.get(
                                                                "https://api.themoviedb.org/3/movie/" + t.tmdb + "?api_key=" + t.settings.tmdb_api_key + "&language=" + t.settings.tmdb_lang.iso_639_1 + "&append_to_response=videos,casts"
                                                            )
                                                        );
                                                    case 3:
                                                        (s = e.sent),
                                                            ((a = _.mapKeys(s.data, function (t, e) {
                                                                return "id" === e ? "tmdb_id" : e;
                                                            })).id = t.form.movie.id),
                                                            void 0 !== a.videos.results[0]
                                                                ? (a.preview_path = a.videos.results[0].key)
                                                                : t.edit && t.form.movie.preview_path
                                                                ? (a.preview_path = t.form.movie.preview_path)
                                                                : axios.get("https://api.themoviedb.org/3/movie/" + t.tmdb + "/videos?api_key=" + t.settings.tmdb_api_key).then(function (t) {
                                                                      t.data.results[0] && (a.preview_path = t.data.results[0].key);
                                                                  }),
                                                            a.original_title && (a.original_name = a.original_title),
                                                            a.poster_path && (a.poster_path = t.settings.imdb_cover_path + a.poster_path),
                                                            a.backdrop_path && (a.backdrop_path = t.settings.imdb_cover_path + a.backdrop_path),
                                                            a.imdb_id && (a.imdb_external_id = a.imdb_id),
                                                            (r = []),
                                                            (n = o(s.data.casts.cast));
                                                        try {
                                                            for (
                                                                c = function () {
                                                                    var e = l.value;
                                                                    e.profile_path && (e.profile_path = t.settings.imdb_cover_path + e.profile_path),
                                                                        axios.get("https://api.themoviedb.org/3/person/" + e.id + "?api_key=" + t.settings.tmdb_api_key + "&language=" + t.settings.tmdb_lang.iso_639_1).then(function (t) {
                                                                            t.data.biography && (e.biography = t.data.biography),
                                                                                t.data.popularity && (e.popularity = t.data.popularity),
                                                                                t.data.place_of_birth && (e.place_of_birth = t.data.place_of_birth),
                                                                                t.data.birthday && (e.birthday = t.data.birthday);
                                                                        }),
                                                                        r.push(e);
                                                                },
                                                                    n.s();
                                                                !(l = n.n()).done;

                                                            )
                                                                c();
                                                        } catch (t) {
                                                            n.e(t);
                                                        } finally {
                                                            n.f();
                                                        }
                                                        (a.casterslist = r), (d = o(a.production_companies));
                                                        try {
                                                            for (d.s(); !(u = d.n()).done; ) null != (m = u.value).logo_path && (m.logo_path = t.settings.imdb_cover_path + m.logo_path);
                                                        } catch (t) {
                                                            d.e(t);
                                                        } finally {
                                                            d.f();
                                                        }
                                                        (p = []), (a.networks = p), (t.form.movie = a), (e.next = 25);
                                                        break;
                                                    case 22:
                                                        (e.prev = 22), (e.t0 = e.catch(0)), t.showError("you entred a serie id or the id is invalid !");
                                                    case 25:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 22]]
                                    );
                                })
                            )();
                        },
                        getSearchByName: function (t) {
                            var e = this.settings.tmdb_api_key,
                                s = this.settings.tmdb_lang.iso_639_1,
                                a = "".concat("https://api.themoviedb.org/3/search/movie?api_key=").concat(e, "&language=").concat(s, "&query=").concat(encodeURI(t), "&include_adult=false=");
                            return new Promise(function (e) {
                                if (t.length < 1) return e([]);
                                fetch(a)
                                    .then(function (t) {
                                        return t.json();
                                    })
                                    .then(function (t) {
                                        e(t.results);
                                    });
                            });
                        },
                        getResultValue: function (t) {
                            return t.title + " - (Original Name :" + t.original_title + " - " + t.release_date + ")";
                        },
                        onSubmit: function (t) {
                            (this.tmdb = t.id), this.getMovie();
                        },
                        getMovie: function () {
                            var t = this;
                            return d(
                                i.a.mark(function e() {
                                    var s, a, r, n, l, c, d;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (
                                                            (e.prev = 0),
                                                            (e.next = 3),
                                                            http.get(
                                                                "https://api.themoviedb.org/3/movie/" + t.tmdb + "?api_key=" + t.settings.tmdb_api_key + "&language=" + t.settings.tmdb_lang.iso_639_1 + "&append_to_response=videos,casts"
                                                            )
                                                        );
                                                    case 3:
                                                        (s = e.sent),
                                                            ((a = _.mapKeys(s.data, function (t, e) {
                                                                return "id" === e ? "tmdb_id" : e;
                                                            })).id = t.form.movie.id),
                                                            void 0 !== a.videos.results[0] ? (a.preview_path = a.videos.results[0].key) : t.edit && t.form.movie.preview_path && (a.preview_path = t.form.movie.preview_path),
                                                            a.poster_path && (a.poster_path = t.settings.imdb_cover_path + a.poster_path),
                                                            a.backdrop_path && (a.backdrop_path = t.settings.imdb_cover_path + a.backdrop_path),
                                                            a.original_title && (a.original_name = a.original_title),
                                                            a.imdb_id && (a.imdb_external_id = a.imdb_id),
                                                            a.original_title && (a.original_name = a.original_title),
                                                            (r = []),
                                                            (n = o(s.data.casts.cast));
                                                        try {
                                                            for (n.s(); !(l = n.n()).done; ) (c = l.value).profile_path && (c.profile_path = t.settings.imdb_cover_path + c.profile_path), r.push(c);
                                                        } catch (t) {
                                                            n.e(t);
                                                        } finally {
                                                            n.f();
                                                        }
                                                        (a.casterslist = r), (d = []), (a.networks = d), (t.form.movie = a), (e.next = 24);
                                                        break;
                                                    case 21:
                                                        (e.prev = 21), (e.t0 = e.catch(0)), t.showError("you entred a serie id or the id is invalid !");
                                                    case 24:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 21]]
                                    );
                                })
                            )();
                        },
                        store: function () {
                            var t = this;
                            axios
                                .post(url + "/admin/moviesmedia/storemovie", this.form)
                                .then(function (e) {
                                    (t.add = !1),
                                        (t.edit = !1),
                                        (t.index = !0),
                                        (t.form.movie = {}),
                                        (t.form.production_countries = []),
                                        (t.form.links = []),
                                        (t.form.linksDownloads = []),
                                        (t.form.linksubs = []),
                                        (t.tmdb = null),
                                        (t.link = ""),
                                        (t.linkDownload = ""),
                                        (t.linksubstitle = ""),
                                        (t.typesubstitle = ""),
                                        (t.server = ""),
                                        (t.serverdownload = ""),
                                        (t.video = null),
                                        (t.Download = null),
                                        (t.substitle = null),
                                        t.movies.data.unshift(e.data.body),
                                        t.showSuccess(e.data.message),
                                        axios.get(url + "/admin/movies/dataweb?page=" + t.pageNum).then(function (e) {
                                            t.movies = e.data;
                                        });
                                })
                                .catch(function (e) {
                                    t.showError(e.response);
                                });
                        },
                        update: function () {
                            var t = this;
                            axios
                                .put(url + "/admin/moviesmedia/updatemovie/" + this.form.movie.id, this.form)
                                .then(function (e) {
                                    (t.add = !1),
                                        (t.edit = !1),
                                        (t.index = !0),
                                        (t.form.movie = {}),
                                        (t.form.links = []),
                                        (t.form.linksDownloads = []),
                                        (t.form.linksubs = []),
                                        (t.tmdb = null),
                                        (t.link = ""),
                                        (t.linkDownload = ""),
                                        (t.linksubstitle = ""),
                                        (t.typesubstitle = ""),
                                        (t.server = ""),
                                        (t.serverdownload = ""),
                                        t.showSuccess(e.data.message),
                                        axios.get(url + "/admin/movies/dataweb?page=" + t.pageNum).then(function (e) {
                                            t.movies = e.data;
                                        });
                                })
                                .catch(function (e) {
                                    t.showError(e.message.message);
                                });
                        },
                        destroy: function (t) {
                            var e = this;
                            this.showConfirm(
                                d(
                                    i.a.mark(function s() {
                                        var a, r;
                                        return i.a.wrap(
                                            function (s) {
                                                for (;;)
                                                    switch ((s.prev = s.next)) {
                                                        case 0:
                                                            return (s.prev = 0), (s.next = 3), axios.delete(url + "/admin/movies/destroy/" + t);
                                                        case 3:
                                                            (a = s.sent),
                                                                (r = e.movies.data.findIndex(function (e) {
                                                                    return e.id === t;
                                                                })),
                                                                e.movies.data.splice(r, 1),
                                                                e.showSuccess(a.data.message),
                                                                (s.next = 12);
                                                            break;
                                                        case 9:
                                                            (s.prev = 9), (s.t0 = s.catch(0)), e.showError();
                                                        case 12:
                                                        case "end":
                                                            return s.stop();
                                                    }
                                            },
                                            s,
                                            null,
                                            [[0, 9]]
                                        );
                                    })
                                )
                            );
                        },
                        storePoster: function (t) {
                            var e = this;
                            return d(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        if (void 0 === t.target.files[0]) {
                                                            s.next = 15;
                                                            break;
                                                        }
                                                        return (s.prev = 1), (e.poster = t.target.files[0]), (a = new FormData()).append("image", e.poster), (s.next = 7), axios.post(url + "/admin/movies/image/store", a);
                                                    case 7:
                                                        (r = s.sent), (e.form.movie.poster_path = r.data.image_path), e.showSuccess(r.data.message), (s.next = 15);
                                                        break;
                                                    case 12:
                                                        (s.prev = 12), (s.t0 = s.catch(1)), e.showError(s.t0.response);
                                                    case 15:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[1, 12]]
                                    );
                                })
                            )();
                        },
                        storeBackdrop: function (t) {
                            var e = this;
                            return d(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        if (void 0 === t.target.files[0]) {
                                                            s.next = 15;
                                                            break;
                                                        }
                                                        return (s.prev = 1), (e.backdrop = t.target.files[0]), (a = new FormData()).append("image", e.backdrop), (s.next = 7), axios.post(url + "/admin/movies/image/store", a);
                                                    case 7:
                                                        (r = s.sent), (e.form.movie.backdrop_path = r.data.image_path), e.showSuccess(r.data.message), (s.next = 15);
                                                        break;
                                                    case 12:
                                                        (s.prev = 12), (s.t0 = s.catch(1)), e.showError(s.t0.response);
                                                    case 15:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[1, 12]]
                                    );
                                })
                            )();
                        },
                        storeVideoDownload: function (t) {
                            var e = this;
                            return d(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        if (((s.prev = 0), "" !== e.serverdownload)) {
                                                            s.next = 4;
                                                            break;
                                                        }
                                                        return e.showAlert("You need to select a server before uploading a link"), s.abrupt("return");
                                                    case 4:
                                                        return (
                                                            (e.video = t.target.files[0]),
                                                            (a = new FormData()).append("video", e.video),
                                                            (s.next = 9),
                                                            axios.post(url + "/admin/video/store", a, {
                                                                onUploadProgress: function (t) {
                                                                    (e.isuploading = !0), (e.percent = Math.round((t.loaded / t.total) * 100));
                                                                },
                                                            })
                                                        );
                                                    case 9:
                                                        (r = s.sent),
                                                            (e.linkDownload = r.data.video_path),
                                                            (e.serverdownload = { name: e.serverdownload.name, lang: e.lang.english_name && "No Language" !== e.lang.english_name ? e.lang.english_name : e.settings.tmdb_lang.english_name }),
                                                            e.showSuccess(r.data.message),
                                                            setTimeout(function () {
                                                                return (e.isuploading = !1);
                                                            }, 2e3),
                                                            (s.next = 20);
                                                        break;
                                                    case 16:
                                                        (s.prev = 16),
                                                            (s.t0 = s.catch(0)),
                                                            e.showError(),
                                                            setTimeout(function () {
                                                                return (e.isuploading = !1);
                                                            }, 2e3);
                                                    case 20:
                                                        return (s.prev = 20), s.finish(20);
                                                    case 22:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 16, 20, 22]]
                                    );
                                })
                            )();
                        },
                        storeVideo: function (t) {
                            var e = this;
                            return d(
                                i.a.mark(function s() {
                                    var a, r, n;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (
                                                            (s.prev = 0),
                                                            (a = e.form.movie.title),
                                                            (e.video = t.target.files[0]),
                                                            (r = new FormData()).append("video", e.video),
                                                            r.append("movie_title", a.replace(/ /g, "_")),
                                                            (s.next = 8),
                                                            axios.post(url + "/admin/video/store", r, {
                                                                onUploadProgress: function (t) {
                                                                    (e.isuploading = !0), (e.percent = Math.round((t.loaded / t.total) * 100));
                                                                },
                                                            })
                                                        );
                                                    case 8:
                                                        (n = s.sent),
                                                            (e.video_name = n.data.video_name),
                                                            (e.link = n.data.video_path),
                                                            (e.server = { name: n.data.server }),
                                                            e.showSuccess(n.data.message),
                                                            setTimeout(function () {
                                                                return (e.isuploading = !1);
                                                            }, 2e3),
                                                            (s.next = 20);
                                                        break;
                                                    case 16:
                                                        (s.prev = 16),
                                                            (s.t0 = s.catch(0)),
                                                            e.showError(),
                                                            setTimeout(function () {
                                                                return (e.isuploading = !1);
                                                            }, 2e3);
                                                    case 20:
                                                        return (s.prev = 20), s.finish(20);
                                                    case 22:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 16, 20, 22]]
                                    );
                                })
                            )();
                        },
                        storeVideoTrailer: function (t) {
                            var e = this;
                            return d(
                                i.a.mark(function s() {
                                    var a, r, n;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (
                                                            (s.prev = 0),
                                                            (a = e.form.movie.title),
                                                            (e.video_trailer = t.target.files[0]),
                                                            (r = new FormData()).append("video", e.video_trailer),
                                                            r.append("movie_title", a),
                                                            (s.next = 8),
                                                            axios.post(url + "/admin/video/store", r, {
                                                                onUploadProgress: function (t) {
                                                                    (e.isuploading = !0), (e.percent = Math.round((t.loaded / t.total) * 100));
                                                                },
                                                            })
                                                        );
                                                    case 8:
                                                        (n = s.sent),
                                                            (e.form.movie.trailer_url = n.data.video_path),
                                                            e.showSuccess(n.data.message),
                                                            setTimeout(function () {
                                                                return (e.isuploading = !1);
                                                            }, 2e3),
                                                            (s.next = 18);
                                                        break;
                                                    case 14:
                                                        (s.prev = 14),
                                                            (s.t0 = s.catch(0)),
                                                            e.showError(),
                                                            setTimeout(function () {
                                                                return (e.isuploading = !1);
                                                            }, 2e3);
                                                    case 18:
                                                        return (s.prev = 18), s.finish(18);
                                                    case 20:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 14, 18, 20]]
                                    );
                                })
                            )();
                        },
                        storeSubstitle: function (t) {
                            var e = this;
                            return d(
                                i.a.mark(function s() {
                                    var a, r, n, o, l;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        if ("" !== e.typesubstitle) {
                                                            s.next = 3;
                                                            break;
                                                        }
                                                        return e.showAlert("You need to select a type before trying to upload a substitle"), s.abrupt("return");
                                                    case 3:
                                                        return (
                                                            (s.prev = 3),
                                                            (a = e.form.movie.title),
                                                            (r = e.form.movie.id),
                                                            (n = e.typesubstitle),
                                                            (e.substitle = t.target.files[0]),
                                                            (o = new FormData()).append("substitle", e.substitle),
                                                            o.append("movie_title", a.replace(/ /g, "_") + "_" + r + "_" + n),
                                                            (s.next = 13),
                                                            axios.post(url + "/admin/substitle/store", o)
                                                        );
                                                    case 13:
                                                        (l = s.sent), (e.linksubstitle = l.data.substitle_path), e.showSuccess(l.data.message), (s.next = 21);
                                                        break;
                                                    case 18:
                                                        (s.prev = 18), (s.t0 = s.catch(3)), e.showError();
                                                    case 21:
                                                        return (s.prev = 21), s.finish(21);
                                                    case 23:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[3, 18, 21, 23]]
                                    );
                                })
                            )();
                        },
                        addLink: function () {
                            "" !== this.server && "" !== this.link && "" !== this.form.movie
                                ? (this.form.links.unshift({
                                      server: this.server.name,
                                      drmuuid: this.drmuuiselected.name,
                                      drmlicenceuri: this.drmlicenceuriselected.name,
                                      header: this.header.name,
                                      useragent: this.useragent.name,
                                      link: this.link,
                                      video_name: this.video_name,
                                      lang: this.lang.english_name && "No Language" !== this.lang.english_name ? this.lang.english_name : this.settings.tmdb_lang.english_name,
                                      embed: this.embed,
                                      supported_hosts: this.supported_hosts,
                                      drm: this.drm,
                                      hls: this.hls,
                                  }),
                                  (this.link = ""),
                                  (this.server = ""),
                                  (this.drmuuiselected = ""),
                                  (this.drmlicenceuriselected = ""),
                                  (this.header = ""),
                                  (this.useragent = ""),
                                  (this.video_name = ""),
                                  (this.lang = ""),
                                  (this.video = ""),
                                  (this.supported_hosts = !1),
                                  (this.drm = !1),
                                  (this.embed = !1),
                                  (this.hls = !1))
                                : this.showAlert("You need to select a server before adding a link");
                        },
                        addLinkDownload: function () {
                            "" !== this.serverdownload && "" !== this.form.movie
                                ? (this.form.linksDownloads.unshift({
                                      server: this.serverdownload.name,
                                      header: this.headerdownload.name,
                                      useragent: this.useragentdownload.name,
                                      link: this.linkDownload,
                                      lang: this.lang.english_name && "No Language" !== this.lang.english_name ? this.lang.english_name : this.settings.tmdb_lang.english_name,
                                      supported_hosts: this.supported_hosts_download,
                                      alldebrid_supported_hosts: this.alldebrid_supported_hosts_download,
                                      external: this.external,
                                  }),
                                  (this.linkDownload = ""),
                                  (this.serverdownload = ""),
                                  (this.headerdownload = ""),
                                  (this.useragentdownload = ""),
                                  (this.Download = ""),
                                  (this.supported_hosts_download = !1),
                                  (this.alldebrid_supported_hosts_download = !1),
                                  (this.external = !1))
                                : this.showAlert("You need to select a server before adding a link");
                        },
                        addSubs: function () {
                            "" !== this.linksubstitle &&
                                "" !== this.form.susbstitle &&
                                (this.form.linksubs.unshift({
                                    link: this.linksubstitle,
                                    type: this.typesubstitle,
                                    zip: this.zip,
                                    lang: this.langsub.english_name && "No Language" !== this.langsub.english_name ? this.langsub.english_name : this.settings.tmdb_lang.english_name,
                                }),
                                (this.linksubstitle = ""),
                                (this.typesubstitle = ""),
                                (this.substitle = null),
                                (this.zip = !1));
                        },
                        destroySubs: function (t, e) {
                            var s = this;
                            this.showConfirm(function () {
                                t.id &&
                                    axios
                                        .delete(url + "/admin/movies/substitles/destroy/" + t.id)
                                        .then(function (t) {
                                            s.showSuccess(t.data.message);
                                        })
                                        .catch(function (t) {
                                            s.showError();
                                        }),
                                    s.form.linksubs.splice(e, 1);
                            });
                        },
                        send: function (t) {
                            var e = this;
                            return d(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (
                                                            (e.form.movie = t),
                                                            (s.prev = 1),
                                                            (a = { headers: { Authorization: "key=" + e.settings.authorization } }),
                                                            (r = { to: "/topics/all", data: { title: t.title, message: t.overview, image: t.backdrop_path, type: "0", tmdb: t.id } }),
                                                            (s.next = 6),
                                                            http.post("https://fcm.googleapis.com/fcm/send", r, a)
                                                        );
                                                    case 6:
                                                        e.showSuccess(), (e.title = ""), (e.body = ""), (e.image = ""), (s.next = 15);
                                                        break;
                                                    case 12:
                                                        (s.prev = 12), (s.t0 = s.catch(1)), e.showError();
                                                    case 15:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[1, 12]]
                                    );
                                })
                            )();
                        },
                        storeMiniCover: function (t) {
                            var e = this;
                            return d(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        if (void 0 === t.target.files[0]) {
                                                            s.next = 14;
                                                            break;
                                                        }
                                                        return (s.prev = 1), (e.backdrop = t.target.files[0]), (a = new FormData()).append("image", e.backdrop), (s.next = 7), axios.post(url + "/admin/preview/image/store", a);
                                                    case 7:
                                                        (r = s.sent), (e.form.movie.minicover = r.data.image_path), (s.next = 14);
                                                        break;
                                                    case 11:
                                                        (s.prev = 11), (s.t0 = s.catch(1)), e.showError(s.t0.response);
                                                    case 14:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[1, 11]]
                                    );
                                })
                            )();
                        },
                        destroyLink: function (t, e) {
                            var s = this;
                            this.showConfirm(function () {
                                t.id &&
                                    axios
                                        .delete(url + "/admin/movies/videos/destroy/" + t.id)
                                        .then(function (t) {
                                            s.showSuccess(t.data.message);
                                        })
                                        .catch(function (t) {
                                            s.showError();
                                        }),
                                    s.form.links.splice(e, 1);
                            });
                        },
                        destroyLinkDownload: function (t, e) {
                            var s = this;
                            this.showConfirm(function () {
                                t.id &&
                                    axios
                                        .delete(url + "/admin/movies/downloads/destroy/" + t.id)
                                        .then(function (t) {
                                            s.showSuccess(t.data.message);
                                        })
                                        .catch(function (t) {
                                            s.showError(t);
                                        }),
                                    s.form.linksDownloads.splice(e, 1);
                            });
                        },
                        destroyGenre: function (t) {
                            var e = this;
                            null !== t.genre &&
                                axios
                                    .delete(url + "/admin/movies/genres/destroy/" + t.id)
                                    .then(function (t) {
                                        return e.showSuccess(t.data.message);
                                    })
                                    .catch();
                        },
                        destroyCast: function (t) {
                            var e = this;
                            null !== t.cast &&
                                axios
                                    .delete(url + "/admin/movies/casts/destroy/" + t.id)
                                    .then(function (t) {
                                        return e.showSuccess(t.data.message);
                                    })
                                    .catch();
                        },
                        destroyNetwork: function (t) {
                            var e = this;
                            null !== t.network &&
                                axios
                                    .delete(url + "/admin/movies/networks/destroy/" + t.id)
                                    .then(function (t) {
                                        return e.showSuccess(t.data.message);
                                    })
                                    .catch();
                        },
                    },
                    computed: {
                        filteredMovies: function () {
                            var t = this;
                            return this.moviesall.filter(function (e) {
                                return e.title.toLowerCase().match(t.search.toLowerCase());
                            });
                        },
                    },
                    mixins: [r.a, n.a],
                },
                m = (s(328), s(4)),
                p = Object(m.a)(
                    u,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-md-12 grid-margin" }, [
                                s("div", { staticClass: "d-flex justify-content-between flex-wrap" }, [
                                    t._m(0),
                                    t._v(" "),
                                    s("div", { staticClass: "d-flex justify-content-between align-items-end flex-wrap" }, [
                                        t.index
                                            ? s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.create();
                                                          },
                                                      },
                                                  },
                                                  [t._v("\n           Add Movie\n         ")]
                                              )
                                            : t._e(),
                                        t._v(" "),
                                        t.index
                                            ? t._e()
                                            : s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.back();
                                                          },
                                                      },
                                                  },
                                                  [t._v("\n           Back\n         ")]
                                              ),
                                    ]),
                                ]),
                            ]),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-md-6 grid-margin" }, [
                                      s("ul", { staticClass: "navbar-nav mr-lg-4 w-100" }, [
                                          s("li", { staticClass: "nav-item nav-search d-none d-lg-block w-100" }, [
                                              s("div", { staticClass: "input-group" }, [
                                                  t._m(1),
                                                  t._v(" "),
                                                  s("input", {
                                                      directives: [{ name: "model", rawName: "v-model", value: t.search, expression: "search" }],
                                                      staticClass: "form-control",
                                                      attrs: { type: "search", placeholder: "Search now", "aria-label": "search", "aria-describedby": "search" },
                                                      domProps: { value: t.search },
                                                      on: {
                                                          keyup: t.searchUnit,
                                                          input: function (e) {
                                                              e.target.composing || (t.search = e.target.value);
                                                          },
                                                      },
                                                  }),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s(
                                                  "div",
                                                  { staticClass: "table-responsive" },
                                                  [
                                                      s("table", { staticClass: "table", attrs: { "aria-describedby": "table movies", id: "table movies" } }, [
                                                          t._m(2),
                                                          t._v(" "),
                                                          s(
                                                              "tbody",
                                                              t._l(t.movies.data, function (e) {
                                                                  return s("tr", { key: e.id }, [
                                                                      s("td", { staticClass: "text-center" }, [s("img", { attrs: { src: e.poster_path, alt: "poster path", height: "80", width: "80" } })]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.id))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.tmdb_id))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.views))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.title))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.vote_average))]),
                                                                      t._v(" "),
                                                                      1 === e.pinned
                                                                          ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check", staticStyle: { color: "green" } })])
                                                                          : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close", staticStyle: { color: "red" } })]),
                                                                      t._v(" "),
                                                                      1 === e.active
                                                                          ? s("td", { staticClass: "text-center" }, [s("label", { staticClass: "badge badge-success" }, [t._v("Visible")])])
                                                                          : s("td", { staticClass: "text-center" }, [s("label", { staticClass: "badge badge-danger" }, [t._v("Invisible")])]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [
                                                                          s("div", { staticClass: "list-icons" }, [
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item mr-2",
                                                                                      attrs: { "data-original-title": "Send Notification", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.send(e);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-bell-ring menu-icon", staticStyle: { color: "#4d83ff" } })]
                                                                              ),
                                                                              t._v(" "),
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item mr-2",
                                                                                      attrs: { "data-original-title": "Edit", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.editing(e);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-pencil fa-lg", staticStyle: { color: "#4d83ff" } })]
                                                                              ),
                                                                              t._v(" "),
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item text-warning",
                                                                                      attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.destroy(e.id);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                              ),
                                                                          ]),
                                                                      ]),
                                                                  ]);
                                                              }),
                                                              0
                                                          ),
                                                      ]),
                                                      t._v(" "),
                                                      s("pagination", {
                                                          staticClass: "pagination flex-wrap pagination-flat pagination-success",
                                                          attrs: { data: t.movies, "show-disabled": !1, limit: 5, size: t.size, align: t.align },
                                                          on: { "pagination-change-page": t.getResults },
                                                      }),
                                                  ],
                                                  1
                                              ),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.add || t.edit
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s("section", [
                                                  s("div", { staticClass: "poster-container" }, [
                                                      t.form.movie.poster_path
                                                          ? s("img", { staticClass: "poster", attrs: { src: t.form.movie.poster_path, alt: "movie poster", "data-loaded": "true", height: "316", width: "210" } })
                                                          : t._e(),
                                                      t._v(" "),
                                                      s("div", { staticClass: "many-inputs" }, [
                                                          s("div", { staticClass: "input-container" }, [
                                                              s(
                                                                  "div",
                                                                  { staticClass: "form-group" },
                                                                  [
                                                                      s("autocomplete", {
                                                                          attrs: {
                                                                              search: t.getSearchByName,
                                                                              placeholder: "Search Movie by Name",
                                                                              "aria-label": "Search Movie by Name",
                                                                              "data-loading": "true",
                                                                              "data-position": "above",
                                                                              "get-result-value": t.getResultValue,
                                                                          },
                                                                          on: { submit: t.onSubmit },
                                                                      }),
                                                                  ],
                                                                  1
                                                              ),
                                                              t._v(" "),
                                                              s("div", { staticClass: "form-group" }, [
                                                                  s("div", { staticClass: "input-group" }, [
                                                                      s("input", {
                                                                          directives: [{ name: "model", rawName: "v-model", value: t.tmdb, expression: "tmdb" }],
                                                                          staticClass: "form-control",
                                                                          attrs: { type: "text", placeholder: "Example : tt7286456", "aria-label": "Search Movie" },
                                                                          domProps: { value: t.tmdb },
                                                                          on: {
                                                                              input: function (e) {
                                                                                  e.target.composing || (t.tmdb = e.target.value);
                                                                              },
                                                                          },
                                                                      }),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "input-group-append" }, [
                                                                          s(
                                                                              "button",
                                                                              {
                                                                                  staticClass: "btn btn-sm btn-primary",
                                                                                  attrs: { type: "type", disabled: !t.settings.tmdb_api_key },
                                                                                  on: {
                                                                                      click: function (e) {
                                                                                          return t.getMovieById();
                                                                                      },
                                                                                  },
                                                                              },
                                                                              [t._v("\n                         Search\n                       ")]
                                                                          ),
                                                                      ]),
                                                                  ]),
                                                              ]),
                                                              t._v(" "),
                                                              s("div", { staticClass: "input-container" }, [
                                                                  s("div", { staticClass: "row" }, [
                                                                      s("div", { staticClass: "col-md-4" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "title" } }, [t._v("Movie Title")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.movie.title, expression: "form.movie.title" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "title", type: "text" },
                                                                                  domProps: { value: t.form.movie.title },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.movie, "title", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-4" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "original_title" } }, [t._v("Original title")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.movie.original_name, expression: "form.movie.original_name" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "original_title", type: "text" },
                                                                                  domProps: { value: t.form.movie.original_name },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.movie, "original_name", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-4" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "subtitle" } }, [t._v("Sub Title")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.movie.subtitle, expression: "form.movie.subtitle" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "subtitle", type: "text" },
                                                                                  domProps: { value: t.form.movie.subtitle },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.movie, "subtitle", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                  ]),
                                                              ]),
                                                              t._v(" "),
                                                              s("div", { staticClass: "input-container" }, [
                                                                  s("div", { staticClass: "row" }, [
                                                                      s("div", { staticClass: "col-md-3" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                  s("input", {
                                                                                      directives: [{ name: "model", rawName: "v-model", value: t.form.movie.premuim, expression: "form.movie.premuim" }],
                                                                                      staticClass: "custom-control-input",
                                                                                      attrs: { id: "premuim", type: "checkbox" },
                                                                                      domProps: { checked: Array.isArray(t.form.movie.premuim) ? t._i(t.form.movie.premuim, null) > -1 : t.form.movie.premuim },
                                                                                      on: {
                                                                                          change: function (e) {
                                                                                              var s = t.form.movie.premuim,
                                                                                                  a = e.target,
                                                                                                  i = !!a.checked;
                                                                                              if (Array.isArray(s)) {
                                                                                                  var r = t._i(s, null);
                                                                                                  a.checked
                                                                                                      ? r < 0 && t.$set(t.form.movie, "premuim", s.concat([null]))
                                                                                                      : r > -1 && t.$set(t.form.movie, "premuim", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                              } else t.$set(t.form.movie, "premuim", i);
                                                                                          },
                                                                                      },
                                                                                  }),
                                                                                  t._v(" "),
                                                                                  s("label", { staticClass: "custom-control-label", attrs: { for: "premuim" } }, [
                                                                                      t._v("\n                             Premuim Only\n                           "),
                                                                                  ]),
                                                                              ]),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      t.edit
                                                                          ? s("div", { staticClass: "col-md-3" }, [
                                                                                s("div", { staticClass: "form-group" }, [
                                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                        s("input", {
                                                                                            directives: [{ name: "model", rawName: "v-model", value: t.form.movie.active, expression: "form.movie.active" }],
                                                                                            staticClass: "custom-control-input",
                                                                                            attrs: { id: "active", type: "checkbox" },
                                                                                            domProps: { checked: Array.isArray(t.form.movie.active) ? t._i(t.form.movie.active, null) > -1 : t.form.movie.active },
                                                                                            on: {
                                                                                                change: function (e) {
                                                                                                    var s = t.form.movie.active,
                                                                                                        a = e.target,
                                                                                                        i = !!a.checked;
                                                                                                    if (Array.isArray(s)) {
                                                                                                        var r = t._i(s, null);
                                                                                                        a.checked
                                                                                                            ? r < 0 && t.$set(t.form.movie, "active", s.concat([null]))
                                                                                                            : r > -1 && t.$set(t.form.movie, "active", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                                    } else t.$set(t.form.movie, "active", i);
                                                                                                },
                                                                                            },
                                                                                        }),
                                                                                        t._v(" "),
                                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "active" } }, [t._v("Active")]),
                                                                                    ]),
                                                                                ]),
                                                                            ])
                                                                          : t._e(),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-3" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                  s("input", {
                                                                                      directives: [{ name: "model", rawName: "v-model", value: t.form.movie.pinned, expression: "form.movie.pinned" }],
                                                                                      staticClass: "custom-control-input",
                                                                                      attrs: { id: "pinned", type: "checkbox" },
                                                                                      domProps: { checked: Array.isArray(t.form.movie.pinned) ? t._i(t.form.movie.pinned, null) > -1 : t.form.movie.pinned },
                                                                                      on: {
                                                                                          change: function (e) {
                                                                                              var s = t.form.movie.pinned,
                                                                                                  a = e.target,
                                                                                                  i = !!a.checked;
                                                                                              if (Array.isArray(s)) {
                                                                                                  var r = t._i(s, null);
                                                                                                  a.checked
                                                                                                      ? r < 0 && t.$set(t.form.movie, "pinned", s.concat([null]))
                                                                                                      : r > -1 && t.$set(t.form.movie, "pinned", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                              } else t.$set(t.form.movie, "pinned", i);
                                                                                          },
                                                                                      },
                                                                                  }),
                                                                                  t._v(" "),
                                                                                  s("label", { staticClass: "custom-control-label", attrs: { for: "pinned" } }, [t._v("Pinned")]),
                                                                              ]),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      t.add
                                                                          ? s("div", { staticClass: "col-md-3" }, [
                                                                                s("div", { staticClass: "form-group" }, [
                                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                        s("input", {
                                                                                            directives: [{ name: "model", rawName: "v-model", value: t.form.notification, expression: "form.notification" }],
                                                                                            staticClass: "custom-control-input",
                                                                                            attrs: { id: "notification", type: "checkbox" },
                                                                                            domProps: { checked: Array.isArray(t.form.notification) ? t._i(t.form.notification, null) > -1 : t.form.notification },
                                                                                            on: {
                                                                                                change: function (e) {
                                                                                                    var s = t.form.notification,
                                                                                                        a = e.target,
                                                                                                        i = !!a.checked;
                                                                                                    if (Array.isArray(s)) {
                                                                                                        var r = t._i(s, null);
                                                                                                        a.checked
                                                                                                            ? r < 0 && t.$set(t.form, "notification", s.concat([null]))
                                                                                                            : r > -1 && t.$set(t.form, "notification", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                                    } else t.$set(t.form, "notification", i);
                                                                                                },
                                                                                            },
                                                                                        }),
                                                                                        t._v(" "),
                                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "notification" } }, [t._v("Push Notification")]),
                                                                                    ]),
                                                                                ]),
                                                                            ])
                                                                          : t._e(),
                                                                  ]),
                                                              ]),
                                                              t._v(" "),
                                                              s("div", { staticClass: "input-container" }, [
                                                                  s("div", { staticClass: "row" }, [
                                                                      s("div", { staticClass: "col-md-3" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                  s("input", {
                                                                                      directives: [{ name: "model", rawName: "v-model", value: t.form.movie.hasrecap, expression: "form.movie.hasrecap" }],
                                                                                      staticClass: "custom-control-input",
                                                                                      attrs: { id: "hasrecap", type: "checkbox" },
                                                                                      domProps: { checked: Array.isArray(t.form.movie.hasrecap) ? t._i(t.form.movie.hasrecap, null) > -1 : t.form.movie.hasrecap },
                                                                                      on: {
                                                                                          change: function (e) {
                                                                                              var s = t.form.movie.hasrecap,
                                                                                                  a = e.target,
                                                                                                  i = !!a.checked;
                                                                                              if (Array.isArray(s)) {
                                                                                                  var r = t._i(s, null);
                                                                                                  a.checked
                                                                                                      ? r < 0 && t.$set(t.form.movie, "hasrecap", s.concat([null]))
                                                                                                      : r > -1 && t.$set(t.form.movie, "hasrecap", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                              } else t.$set(t.form.movie, "hasrecap", i);
                                                                                          },
                                                                                      },
                                                                                  }),
                                                                                  t._v(" "),
                                                                                  s("label", { staticClass: "custom-control-label", attrs: { for: "hasrecap" } }, [t._v("Movie has Skip Recap ?")]),
                                                                              ]),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-3" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "skiprecap_start_in" } }, [t._v("Movie Start in (Exprime in sec !)")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.movie.skiprecap_start_in, expression: "form.movie.skiprecap_start_in" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "poster_path", name: "skiprecap_start_in", type: "text" },
                                                                                  domProps: { value: t.form.movie.skiprecap_start_in },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.movie, "skiprecap_start_in", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                  ]),
                                                              ]),
                                                              t._v(" "),
                                                              s("div", { staticClass: "input-container" }, [
                                                                  s("div", { staticClass: "row" }, [
                                                                      s("div", { staticClass: "col-md-4" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "poster_path" } }, [t._v("Poster Path")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.movie.poster_path, expression: "form.movie.poster_path" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "poster_path", name: "poster_path", type: "text" },
                                                                                  domProps: { value: t.form.movie.poster_path },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.movie, "poster_path", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-4" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", [t._v("Poster upload")]),
                                                                              t._v(" "),
                                                                              s("input", { staticClass: "file-upload-default" }),
                                                                              t._v(" "),
                                                                              s("div", { staticClass: "input-group col-xs-12" }, [
                                                                                  s("input", {
                                                                                      staticClass: "form-control file-upload-info",
                                                                                      attrs: { id: "poster", placeholder: "Upload Image", type: "file" },
                                                                                      on: { change: t.storePoster },
                                                                                  }),
                                                                                  t._v(" "),
                                                                                  t._m(3),
                                                                              ]),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-4" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "imdb_external_id" } }, [t._v("External IMDB ID")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.movie.imdb_external_id, expression: "form.movie.imdb_external_id" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "poster_path", name: "imdb_external_id", type: "text" },
                                                                                  domProps: { value: t.form.movie.imdb_external_id },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.movie, "imdb_external_id", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                  ]),
                                                              ]),
                                                              t._v(" "),
                                                              s("div", { staticClass: "row" }, [
                                                                  s("div", { staticClass: "col-md-12" }, [
                                                                      s(
                                                                          "div",
                                                                          { staticClass: "form-group" },
                                                                          [
                                                                              s("label", { attrs: { for: "imdb_external_id" } }, [t._v("Genres")]),
                                                                              t._v(" "),
                                                                              s("multiselect", {
                                                                                  attrs: {
                                                                                      "clear-on-select": !1,
                                                                                      "close-on-select": !1,
                                                                                      hideSelected: !0,
                                                                                      multiple: !0,
                                                                                      options: t.options,
                                                                                      "preserve-search": !0,
                                                                                      label: "name",
                                                                                      placeholder: "Select Genre",
                                                                                      "track-by": "name",
                                                                                  },
                                                                                  on: { remove: t.destroyGenre },
                                                                                  model: {
                                                                                      value: t.form.movie.genres,
                                                                                      callback: function (e) {
                                                                                          t.$set(t.form.movie, "genres", e);
                                                                                      },
                                                                                      expression: "form.movie.genres",
                                                                                  },
                                                                              }),
                                                                          ],
                                                                          1
                                                                      ),
                                                                  ]),
                                                              ]),
                                                              t._v(" "),
                                                              s("div", { staticClass: "row" }, [
                                                                  s("div", { staticClass: "col-md-6" }, [
                                                                      s("div", { staticClass: "form-group" }, [
                                                                          s("label", { attrs: { for: "poster_path" } }, [t._v("Backdrop Path")]),
                                                                          t._v(" "),
                                                                          s("input", {
                                                                              directives: [{ name: "model", rawName: "v-model", value: t.form.movie.backdrop_path, expression: "form.movie.backdrop_path" }],
                                                                              staticClass: "form-control",
                                                                              attrs: { id: "backdrop_path", name: "backdrop_path", type: "text" },
                                                                              domProps: { value: t.form.movie.backdrop_path },
                                                                              on: {
                                                                                  input: function (e) {
                                                                                      e.target.composing || t.$set(t.form.movie, "backdrop_path", e.target.value);
                                                                                  },
                                                                              },
                                                                          }),
                                                                      ]),
                                                                  ]),
                                                                  t._v(" "),
                                                                  s("div", { staticClass: "col-md-6" }, [
                                                                      s("div", { staticClass: "form-group" }, [
                                                                          s("label", [t._v("Backdrop upload")]),
                                                                          t._v(" "),
                                                                          s("input", { staticClass: "file-upload-default" }),
                                                                          t._v(" "),
                                                                          s("div", { staticClass: "input-group col-xs-12" }, [
                                                                              s("input", {
                                                                                  staticClass: "form-control file-upload-info",
                                                                                  attrs: { id: "backdrop", placeholder: "Upload Image", type: "file" },
                                                                                  on: { change: t.storeBackdrop },
                                                                              }),
                                                                              t._v(" "),
                                                                              t._m(4),
                                                                          ]),
                                                                      ]),
                                                                  ]),
                                                              ]),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      s("div", { staticClass: "row" }, [
                                                          s("div", { staticClass: "col-md-12" }, [
                                                              s(
                                                                  "div",
                                                                  { staticClass: "form-group" },
                                                                  [
                                                                      t._m(5),
                                                                      t._v(" "),
                                                                      s("multiselect", {
                                                                          attrs: {
                                                                              "clear-on-select": !1,
                                                                              "close-on-select": !1,
                                                                              hideSelected: !0,
                                                                              multiple: !0,
                                                                              options: t.optionsnetwork,
                                                                              "preserve-search": !0,
                                                                              "open-direction": "bottom",
                                                                              noResult: "No Network found. Consider changing the search query",
                                                                              "track-by": "id",
                                                                              label: "name",
                                                                              placeholder: "Select Network",
                                                                          },
                                                                          on: { remove: t.destroyNetwork },
                                                                          model: {
                                                                              value: t.form.movie.networks,
                                                                              callback: function (e) {
                                                                                  t.$set(t.form.movie, "networks", e);
                                                                              },
                                                                              expression: "form.movie.networks",
                                                                          },
                                                                      }),
                                                                  ],
                                                                  1
                                                              ),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      t._m(6),
                                                      t._v(" "),
                                                      s("div", { staticClass: "row" }, [
                                                          s("div", { staticClass: "col-md-12" }, [
                                                              s(
                                                                  "div",
                                                                  { staticClass: "form-group" },
                                                                  [
                                                                      s("multiselect", {
                                                                          attrs: {
                                                                              "clear-on-select": !1,
                                                                              "close-on-select": !1,
                                                                              hideSelected: !0,
                                                                              multiple: !0,
                                                                              options: t.optionscast,
                                                                              "preserve-search": !0,
                                                                              "open-direction": "bottom",
                                                                              noResult: "No Cast found. Consider changing the search query",
                                                                              "track-by": "id",
                                                                              label: "name",
                                                                              placeholder: "Select Cast",
                                                                          },
                                                                          on: { remove: t.destroyCast, "search-change": t.onLaunchSearchCasters },
                                                                          model: {
                                                                              value: t.form.movie.casterslist,
                                                                              callback: function (e) {
                                                                                  t.$set(t.form.movie, "casterslist", e);
                                                                              },
                                                                              expression: "form.movie.casterslist",
                                                                          },
                                                                      }),
                                                                  ],
                                                                  1
                                                              ),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      t._m(7),
                                                      t._v(" "),
                                                      s("div", { staticClass: "row" }, [
                                                          s("div", { staticClass: "col-md-4" }, [
                                                              s("div", { staticClass: "form-group" }, [
                                                                  s("label", { attrs: { for: "preview_path" } }, [t._v("Youtube Trailer ID")]),
                                                                  t._v(" "),
                                                                  s("input", {
                                                                      directives: [{ name: "model", rawName: "v-model", value: t.form.movie.preview_path, expression: "form.movie.preview_path" }],
                                                                      staticClass: "form-control",
                                                                      attrs: { id: "preview_path", type: "text", placeholder: "Paste a Youtube Id or Link" },
                                                                      domProps: { value: t.form.movie.preview_path },
                                                                      on: {
                                                                          input: function (e) {
                                                                              e.target.composing || t.$set(t.form.movie, "preview_path", e.target.value);
                                                                          },
                                                                      },
                                                                  }),
                                                              ]),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "col-md-4" }, [
                                                              s("div", { staticClass: "form-group" }, [
                                                                  s("label", { attrs: { for: "trailer_url" } }, [t._v("Youtube Trailer Self Hosted")]),
                                                                  t._v(" "),
                                                                  s("input", {
                                                                      directives: [{ name: "model", rawName: "v-model", value: t.form.movie.trailer_url, expression: "form.movie.trailer_url" }],
                                                                      staticClass: "form-control",
                                                                      attrs: { id: "trailer_url", type: "text", placeholder: "Paste a supported link MP4/MKV/WEBM/M3U8..." },
                                                                      domProps: { value: t.form.movie.trailer_url },
                                                                      on: {
                                                                          input: function (e) {
                                                                              e.target.composing || t.$set(t.form.movie, "trailer_url", e.target.value);
                                                                          },
                                                                      },
                                                                  }),
                                                              ]),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "col-md-4" }, [
                                                              s("div", { staticClass: "form-group" }, [
                                                                  s("label", [t._v("Upload Trailer")]),
                                                                  t._v(" "),
                                                                  s("input", { staticClass: "file-upload-default" }),
                                                                  t._v(" "),
                                                                  s("div", { staticClass: "input-group col-xs-12" }, [
                                                                      s("input", {
                                                                          staticClass: "form-control file-upload-info",
                                                                          attrs: { id: "video_trailer", placeholder: "Upload Image", type: "file" },
                                                                          on: { change: t.storeVideoTrailer },
                                                                      }),
                                                                      t._v(" "),
                                                                      t._m(8),
                                                                  ]),
                                                              ]),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "overview" } }, [t._v("Details")]),
                                                              t._v(" "),
                                                              s("textarea", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.movie.overview, expression: "form.movie.overview" }],
                                                                  staticClass: "form-control pb-3",
                                                                  attrs: { id: "overview", rows: "6", type: "text" },
                                                                  domProps: { value: t.form.movie.overview },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.movie, "overview", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-4" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "release_date" } }, [t._v("Release Date")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.movie.release_date, expression: "form.movie.release_date" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "release_date", type: "date" },
                                                                  domProps: { value: t.form.movie.release_date },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.movie, "release_date", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                      t._v(" "),
                                                      s("div", { staticClass: "col-md-4" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "vote_average" } }, [t._v("Vote Average")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.movie.vote_average, expression: "form.movie.vote_average" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "vote_average", type: "text" },
                                                                  domProps: { value: t.form.movie.vote_average },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.movie, "vote_average", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-4" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "vote_count" } }, [t._v("Vote Count")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.movie.vote_count, expression: "form.movie.vote_count" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "vote_count", type: "text" },
                                                                  domProps: { value: t.form.movie.vote_count },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.movie, "vote_count", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                      t._v(" "),
                                                      s("div", { staticClass: "col-md-4" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "popularity" } }, [t._v("Popularity")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.movie.popularity, expression: "form.movie.popularity" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "popularity", type: "text" },
                                                                  domProps: { value: t.form.movie.popularity },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.movie, "popularity", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                      t._v(" "),
                                                      s("div", { staticClass: "col-md-4" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "runtime" } }, [t._v("Runtime")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.movie.runtime, expression: "form.movie.runtime" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "runtime", type: "text" },
                                                                  domProps: { value: t.form.movie.runtime },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.movie, "runtime", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      t._m(9),
                                                      t._v(" "),
                                                      s("div", { staticClass: "row" }, [
                                                          s("div", { staticClass: "col-md-3" }, [
                                                              s(
                                                                  "div",
                                                                  { staticClass: "form-group" },
                                                                  [
                                                                      s("label", { attrs: { for: "server" } }, [t._v("Server")]),
                                                                      t._v(" "),
                                                                      s("multiselect", {
                                                                          attrs: { options: t.servers, id: "server", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                          model: {
                                                                              value: t.server,
                                                                              callback: function (e) {
                                                                                  t.server = e;
                                                                              },
                                                                              expression: "server",
                                                                          },
                                                                      }),
                                                                  ],
                                                                  1
                                                              ),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "col-md-3" }, [
                                                              s(
                                                                  "div",
                                                                  { staticClass: "form-group" },
                                                                  [
                                                                      s("label", { attrs: { for: "lang" } }, [t._v("Language")]),
                                                                      t._v(" "),
                                                                      s("multiselect", {
                                                                          attrs: { options: t.langs, id: "lang", label: "english_name", placeholder: "Select a Language", "track-by": "iso_639_1" },
                                                                          model: {
                                                                              value: t.lang,
                                                                              callback: function (e) {
                                                                                  t.lang = e;
                                                                              },
                                                                              expression: "lang",
                                                                          },
                                                                      }),
                                                                  ],
                                                                  1
                                                              ),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "col-md-3" }, [
                                                              s(
                                                                  "div",
                                                                  { staticClass: "form-group" },
                                                                  [
                                                                      s("label", { attrs: { for: "header" } }, [t._v("Headers")]),
                                                                      t._v(" "),
                                                                      s("multiselect", {
                                                                          attrs: { options: t.headers, id: "header", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                          model: {
                                                                              value: t.header,
                                                                              callback: function (e) {
                                                                                  t.header = e;
                                                                              },
                                                                              expression: "header",
                                                                          },
                                                                      }),
                                                                  ],
                                                                  1
                                                              ),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "col-md-3" }, [
                                                              s(
                                                                  "div",
                                                                  { staticClass: "form-group" },
                                                                  [
                                                                      s("label", { attrs: { for: "useragent" } }, [t._v("User Agent")]),
                                                                      t._v(" "),
                                                                      s("multiselect", {
                                                                          attrs: { options: t.useragents, id: "useragent", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                          model: {
                                                                              value: t.useragent,
                                                                              callback: function (e) {
                                                                                  t.useragent = e;
                                                                              },
                                                                              expression: "useragent",
                                                                          },
                                                                      }),
                                                                  ],
                                                                  1
                                                              ),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "col-md-3" }, [
                                                              s(
                                                                  "div",
                                                                  { staticClass: "form-group" },
                                                                  [
                                                                      s("label", { attrs: { for: "useragent" } }, [t._v("DRM UUID")]),
                                                                      t._v(" "),
                                                                      s("multiselect", {
                                                                          attrs: { options: t.drmuui, id: "drmuui", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                          model: {
                                                                              value: t.drmuuiselected,
                                                                              callback: function (e) {
                                                                                  t.drmuuiselected = e;
                                                                              },
                                                                              expression: "drmuuiselected",
                                                                          },
                                                                      }),
                                                                  ],
                                                                  1
                                                              ),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "col-md-6" }, [
                                                              s(
                                                                  "div",
                                                                  { staticClass: "form-group" },
                                                                  [
                                                                      s("label", { attrs: { for: "useragent" } }, [t._v("DRM License Uri")]),
                                                                      t._v(" "),
                                                                      s("multiselect", {
                                                                          attrs: { options: t.serversdrm, id: "serversdrm", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                          model: {
                                                                              value: t.drmlicenceuriselected,
                                                                              callback: function (e) {
                                                                                  t.drmlicenceuriselected = e;
                                                                              },
                                                                              expression: "drmlicenceuriselected",
                                                                          },
                                                                      }),
                                                                  ],
                                                                  1
                                                              ),
                                                          ]),
                                                      ]),
                                                      t._v(" "),
                                                      s("div", { staticClass: "col-md-6" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                  s("input", {
                                                                      directives: [{ name: "model", rawName: "v-model", value: t.supported_hosts, expression: "supported_hosts" }],
                                                                      staticClass: "custom-control-input",
                                                                      attrs: { id: "supported_hosts", type: "checkbox" },
                                                                      domProps: { checked: Array.isArray(t.supported_hosts) ? t._i(t.supported_hosts, null) > -1 : t.supported_hosts },
                                                                      on: {
                                                                          change: function (e) {
                                                                              var s = t.supported_hosts,
                                                                                  a = e.target,
                                                                                  i = !!a.checked;
                                                                              if (Array.isArray(s)) {
                                                                                  var r = t._i(s, null);
                                                                                  a.checked ? r < 0 && (t.supported_hosts = s.concat([null])) : r > -1 && (t.supported_hosts = s.slice(0, r).concat(s.slice(r + 1)));
                                                                              } else t.supported_hosts = i;
                                                                          },
                                                                      },
                                                                  }),
                                                                  t._v(" "),
                                                                  s("label", { staticClass: "custom-control-label", attrs: { for: "supported_hosts" } }, [t._v("Supported Hosts")]),
                                                              ]),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                  s("input", {
                                                                      directives: [{ name: "model", rawName: "v-model", value: t.drm, expression: "drm" }],
                                                                      staticClass: "custom-control-input",
                                                                      attrs: { id: "drm", type: "checkbox" },
                                                                      domProps: { checked: Array.isArray(t.drm) ? t._i(t.drm, null) > -1 : t.drm },
                                                                      on: {
                                                                          change: function (e) {
                                                                              var s = t.drm,
                                                                                  a = e.target,
                                                                                  i = !!a.checked;
                                                                              if (Array.isArray(s)) {
                                                                                  var r = t._i(s, null);
                                                                                  a.checked ? r < 0 && (t.drm = s.concat([null])) : r > -1 && (t.drm = s.slice(0, r).concat(s.slice(r + 1)));
                                                                              } else t.drm = i;
                                                                          },
                                                                      },
                                                                  }),
                                                                  t._v(" "),
                                                                  s("label", { staticClass: "custom-control-label", attrs: { for: "drm" } }, [t._v("DRM")]),
                                                              ]),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                  s("input", {
                                                                      directives: [{ name: "model", rawName: "v-model", value: t.embed, expression: "embed" }],
                                                                      staticClass: "custom-control-input",
                                                                      attrs: { id: "embed", type: "checkbox" },
                                                                      domProps: { checked: Array.isArray(t.embed) ? t._i(t.embed, null) > -1 : t.embed },
                                                                      on: {
                                                                          change: function (e) {
                                                                              var s = t.embed,
                                                                                  a = e.target,
                                                                                  i = !!a.checked;
                                                                              if (Array.isArray(s)) {
                                                                                  var r = t._i(s, null);
                                                                                  a.checked ? r < 0 && (t.embed = s.concat([null])) : r > -1 && (t.embed = s.slice(0, r).concat(s.slice(r + 1)));
                                                                              } else t.embed = i;
                                                                          },
                                                                      },
                                                                  }),
                                                                  t._v(" "),
                                                                  s("label", { staticClass: "custom-control-label", attrs: { for: "embed" } }, [t._v("Embed")]),
                                                              ]),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                  s("input", {
                                                                      directives: [{ name: "model", rawName: "v-model", value: t.hls, expression: "hls" }],
                                                                      staticClass: "custom-control-input",
                                                                      attrs: { id: "hls", type: "checkbox" },
                                                                      domProps: { checked: Array.isArray(t.hls) ? t._i(t.hls, null) > -1 : t.hls },
                                                                      on: {
                                                                          change: function (e) {
                                                                              var s = t.hls,
                                                                                  a = e.target,
                                                                                  i = !!a.checked;
                                                                              if (Array.isArray(s)) {
                                                                                  var r = t._i(s, null);
                                                                                  a.checked ? r < 0 && (t.hls = s.concat([null])) : r > -1 && (t.hls = s.slice(0, r).concat(s.slice(r + 1)));
                                                                              } else t.hls = i;
                                                                          },
                                                                      },
                                                                  }),
                                                                  t._v(" "),
                                                                  s("label", { staticClass: "custom-control-label", attrs: { for: "hls" } }, [t._v("HlS Link  (PHP FORMAT)")]),
                                                              ]),
                                                          ]),
                                                      ]),
                                                      t._v(" "),
                                                      s("div", { staticClass: "row" }, [
                                                          s("div", { staticClass: "col-md-6" }, [
                                                              s("div", { staticClass: "form-group" }, [
                                                                  s("label", { attrs: { for: "link" } }, [t._v("Link")]),
                                                                  t._v(" "),
                                                                  s("input", {
                                                                      directives: [{ name: "model", rawName: "v-model", value: t.link, expression: "link" }],
                                                                      staticClass: "form-control",
                                                                      attrs: { id: "link", placeholder: "Upload or Insert Direct  Link", type: "text" },
                                                                      domProps: { value: t.link },
                                                                      on: {
                                                                          input: function (e) {
                                                                              e.target.composing || (t.link = e.target.value);
                                                                          },
                                                                      },
                                                                  }),
                                                              ]),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "col-md-4" }, [
                                                              s("div", { staticClass: "form-group" }, [
                                                                  s("label", [t._v("Upload Stream")]),
                                                                  t._v(" "),
                                                                  s("input", { staticClass: "file-upload-default" }),
                                                                  t._v(" "),
                                                                  s("div", { staticClass: "input-group col-xs-12" }, [
                                                                      s("input", { staticClass: "form-control file-upload-info", attrs: { id: "video", placeholder: "Upload Image", type: "file" }, on: { change: t.storeVideo } }),
                                                                      t._v(" "),
                                                                      t._m(10),
                                                                  ]),
                                                              ]),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "col-md-2" }, [
                                                              s(
                                                                  "div",
                                                                  { staticClass: "form-group" },
                                                                  [t.isuploading ? s("vue-ellipse-progress", { attrs: { gap: 5, thickness: 5, animation: "default 1000", progress: t.percent, size: 60 } }) : t._e()],
                                                                  1
                                                              ),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "col-md-1 my-auto" }, [
                                                              s(
                                                                  "button",
                                                                  {
                                                                      staticClass: "btn btn-primary mr-2",
                                                                      on: {
                                                                          click: function (e) {
                                                                              return e.preventDefault(), t.addLink();
                                                                          },
                                                                      },
                                                                  },
                                                                  [t._v("\n                   Add\n                 ")]
                                                              ),
                                                          ]),
                                                      ]),
                                                      t._v(" "),
                                                      s("div", { staticClass: "table-responsive" }, [
                                                          s("table", { staticClass: "table", attrs: { "aria-describedby": "Links Table" } }, [
                                                              t._m(11),
                                                              t._v(" "),
                                                              s(
                                                                  "tbody",
                                                                  { attrs: { name: "links" } },
                                                                  t._l(t.form.links, function (e, a) {
                                                                      return s("tr", { key: a }, [
                                                                          s("td", { staticClass: "text-center" }, [
                                                                              s("div", { staticClass: "list-icons" }, [
                                                                                  s(
                                                                                      "a",
                                                                                      {
                                                                                          staticClass: "list-icons-item text-warning",
                                                                                          attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                          on: {
                                                                                              click: function (s) {
                                                                                                  return s.preventDefault(), t.destroyLink(e, a);
                                                                                              },
                                                                                          },
                                                                                      },
                                                                                      [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                                  ),
                                                                              ]),
                                                                          ]),
                                                                          t._v(" "),
                                                                          s("td", { staticClass: "text-center" }, [t._v(t._s(e.lang))]),
                                                                          t._v(" "),
                                                                          s("td", { staticClass: "text-center" }, [t._v(t._s(e.server))]),
                                                                          t._v(" "),
                                                                          s("td", { staticClass: "text-center" }, [t._v(t._s(e.header))]),
                                                                          t._v(" "),
                                                                          s("td", { staticClass: "text-center" }, [t._v(t._s(e.useragent))]),
                                                                          t._v(" "),
                                                                          s("td", { staticClass: "text-center" }, [t._v(t._s(e.link))]),
                                                                          t._v(" "),
                                                                          (1 === e.supported_hosts) | (!0 === e.supported_hosts)
                                                                              ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                              : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                          t._v(" "),
                                                                          (1 === e.hls) | (!0 === e.hls)
                                                                              ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                              : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                          t._v(" "),
                                                                          (1 === e.embed) | (!0 === e.embed)
                                                                              ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                              : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                          t._v(" "),
                                                                          (1 === e.drm) | (!0 === e.drm)
                                                                              ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                              : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                          t._v(" "),
                                                                          s("td", { staticClass: "text-center" }, [t._v(t._s(e.drmuuid))]),
                                                                          t._v(" "),
                                                                          s("td", { staticClass: "text-center" }, [t._v(t._s(e.drmlicenceuri))]),
                                                                      ]);
                                                                  }),
                                                                  0
                                                              ),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  1 === this.settings.separate_download
                                                      ? s("div", { staticClass: "form-group" }, [
                                                            t._m(12),
                                                            t._v(" "),
                                                            1 == this.settings.separate_download
                                                                ? s("div", { staticClass: "row" }, [
                                                                      s("div", { staticClass: "col-md-3" }, [
                                                                          s(
                                                                              "div",
                                                                              { staticClass: "form-group" },
                                                                              [
                                                                                  s("label", { attrs: { for: "server" } }, [t._v("Server")]),
                                                                                  t._v(" "),
                                                                                  s("multiselect", {
                                                                                      attrs: { options: t.servers, id: "server", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                      model: {
                                                                                          value: t.serverdownload,
                                                                                          callback: function (e) {
                                                                                              t.serverdownload = e;
                                                                                          },
                                                                                          expression: "serverdownload",
                                                                                      },
                                                                                  }),
                                                                              ],
                                                                              1
                                                                          ),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-3" }, [
                                                                          s(
                                                                              "div",
                                                                              { staticClass: "form-group" },
                                                                              [
                                                                                  s("label", { attrs: { for: "lang" } }, [t._v("Language")]),
                                                                                  t._v(" "),
                                                                                  s("multiselect", {
                                                                                      attrs: { options: t.langs, id: "lang", label: "english_name", placeholder: "Select a Language", "track-by": "iso_639_1" },
                                                                                      model: {
                                                                                          value: t.lang,
                                                                                          callback: function (e) {
                                                                                              t.lang = e;
                                                                                          },
                                                                                          expression: "lang",
                                                                                      },
                                                                                  }),
                                                                              ],
                                                                              1
                                                                          ),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-3" }, [
                                                                          s(
                                                                              "div",
                                                                              { staticClass: "form-group" },
                                                                              [
                                                                                  s("label", { attrs: { for: "header" } }, [t._v("Headers")]),
                                                                                  t._v(" "),
                                                                                  s("multiselect", {
                                                                                      attrs: { options: t.headers, id: "headerdownload", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                      model: {
                                                                                          value: t.headerdownload,
                                                                                          callback: function (e) {
                                                                                              t.headerdownload = e;
                                                                                          },
                                                                                          expression: "headerdownload",
                                                                                      },
                                                                                  }),
                                                                              ],
                                                                              1
                                                                          ),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-3" }, [
                                                                          s(
                                                                              "div",
                                                                              { staticClass: "form-group" },
                                                                              [
                                                                                  s("label", { attrs: { for: "useragent" } }, [t._v("User Agent")]),
                                                                                  t._v(" "),
                                                                                  s("multiselect", {
                                                                                      attrs: { options: t.useragents, id: "useragentdownload", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                      model: {
                                                                                          value: t.useragentdownload,
                                                                                          callback: function (e) {
                                                                                              t.useragentdownload = e;
                                                                                          },
                                                                                          expression: "useragentdownload",
                                                                                      },
                                                                                  }),
                                                                              ],
                                                                              1
                                                                          ),
                                                                      ]),
                                                                  ])
                                                                : t._e(),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.supported_hosts_download, expression: "supported_hosts_download" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "supported_hosts_download", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.supported_hosts_download) ? t._i(t.supported_hosts_download, null) > -1 : t.supported_hosts_download },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.supported_hosts_download,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked ? r < 0 && (t.supported_hosts_download = s.concat([null])) : r > -1 && (t.supported_hosts_download = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.supported_hosts_download = i;
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "supported_hosts_download" } }, [t._v("Supported Hosts")]),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.external, expression: "external" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "external", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.external) ? t._i(t.external, null) > -1 : t.external },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.external,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked ? r < 0 && (t.external = s.concat([null])) : r > -1 && (t.external = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.external = i;
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "external" } }, [t._v("Open Link external ( Web Page )")]),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "row" }, [
                                                                    s("div", { staticClass: "col-md-8" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("label", { attrs: { for: "link" } }, [t._v("Link")]),
                                                                            t._v(" "),
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.linkDownload, expression: "linkDownload" }],
                                                                                staticClass: "form-control",
                                                                                attrs: { id: "link", placeholder: "Upload or Insert Direct  Link", type: "text" },
                                                                                domProps: { value: t.linkDownload },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || (t.linkDownload = e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-2" }, [
                                                                    s(
                                                                        "div",
                                                                        { staticClass: "form-group" },
                                                                        [t.isuploading ? s("vue-ellipse-progress", { attrs: { gap: 5, thickness: 5, animation: "default 1000", progress: t.percent, size: 60 } }) : t._e()],
                                                                        1
                                                                    ),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-1 my-auto" }, [
                                                                    s(
                                                                        "button",
                                                                        {
                                                                            staticClass: "btn btn-primary mr-2",
                                                                            on: {
                                                                                click: function (e) {
                                                                                    return e.preventDefault(), t.addLinkDownload();
                                                                                },
                                                                            },
                                                                        },
                                                                        [t._v("\n                   Add\n                 ")]
                                                                    ),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "table-responsive" }, [
                                                                s("table", { staticClass: "table", attrs: { "aria-describedby": "Links Table" } }, [
                                                                    t._m(13),
                                                                    t._v(" "),
                                                                    s(
                                                                        "tbody",
                                                                        { attrs: { name: "links" } },
                                                                        t._l(t.form.linksDownloads, function (e, a) {
                                                                            return s("tr", { key: a }, [
                                                                                s("td", { staticClass: "text-center" }, [
                                                                                    s("div", { staticClass: "list-icons" }, [
                                                                                        s(
                                                                                            "a",
                                                                                            {
                                                                                                staticClass: "list-icons-item text-warning",
                                                                                                attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                                on: {
                                                                                                    click: function (s) {
                                                                                                        return s.preventDefault(), t.destroyLinkDownload(e, a);
                                                                                                    },
                                                                                                },
                                                                                            },
                                                                                            [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                                        ),
                                                                                    ]),
                                                                                ]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.lang))]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.server))]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.header))]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.useragent))]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.link))]),
                                                                                t._v(" "),
                                                                                (1 === e.supported_hosts) | (!0 === e.supported_hosts)
                                                                                    ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                                    : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                                t._v(" "),
                                                                                (1 === e.external) | (!0 === e.external)
                                                                                    ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                                    : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                            ]);
                                                                        }),
                                                                        0
                                                                    ),
                                                                ]),
                                                            ]),
                                                        ])
                                                      : t._e(),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      t._m(14),
                                                      t._v(" "),
                                                      s("div", { staticClass: "col-md-6" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", [t._v("Upload Substitle ( Zip Format only ! )")]),
                                                              t._v(" "),
                                                              s("input", { staticClass: "file-upload-default" }),
                                                              t._v(" "),
                                                              s("div", { staticClass: "input-group col-xs-12" }, [
                                                                  s("input", {
                                                                      staticClass: "form-control file-upload-info",
                                                                      attrs: { id: "video", placeholder: "Upload Substitle as zip format", type: "file" },
                                                                      on: { change: t.storeSubstitle },
                                                                  }),
                                                                  t._v(" "),
                                                                  t._m(15),
                                                              ]),
                                                          ]),
                                                      ]),
                                                      t._v(" "),
                                                      s("div", { staticClass: "form-group" }, [
                                                          s(
                                                              "div",
                                                              { staticClass: "custom-control custom-checkbox" },
                                                              [
                                                                  s("input", {
                                                                      directives: [{ name: "model", rawName: "v-model", value: t.zip, expression: "zip" }],
                                                                      staticClass: "custom-control-input",
                                                                      attrs: { id: "zip", type: "checkbox" },
                                                                      domProps: { checked: Array.isArray(t.zip) ? t._i(t.zip, null) > -1 : t.zip },
                                                                      on: {
                                                                          change: function (e) {
                                                                              var s = t.zip,
                                                                                  a = e.target,
                                                                                  i = !!a.checked;
                                                                              if (Array.isArray(s)) {
                                                                                  var r = t._i(s, null);
                                                                                  a.checked ? r < 0 && (t.zip = s.concat([null])) : r > -1 && (t.zip = s.slice(0, r).concat(s.slice(r + 1)));
                                                                              } else t.zip = i;
                                                                          },
                                                                      },
                                                                  }),
                                                                  t._v(" "),
                                                                  s("label", { staticClass: "custom-control-label", attrs: { for: "zip" } }, [t._v("Substitle Zip Format ?")]),
                                                                  t._v(" "),
                                                                  s("b-tooltip", { attrs: { target: "zip", triggers: "hover" } }, [
                                                                      t._v("\n                     I am tooltip "),
                                                                      s("b", [t._v("component")]),
                                                                      t._v(" content!\n               "),
                                                                  ]),
                                                              ],
                                                              1
                                                          ),
                                                      ]),
                                                      t._v(" "),
                                                      s("div", { staticClass: "row" }, [
                                                          s("div", { staticClass: "col-md-4" }, [
                                                              s("div", { staticClass: "form-group" }, [
                                                                  s("label", { attrs: { for: "linksubstitle" } }, [t._v("Substitle Path")]),
                                                                  t._v(" "),
                                                                  s("input", {
                                                                      directives: [{ name: "model", rawName: "v-model", value: t.linksubstitle, expression: "linksubstitle" }],
                                                                      staticClass: "form-control",
                                                                      attrs: { id: "linksubstitle", placeholder: "Upload or Insert Direct  Link", type: "text" },
                                                                      domProps: { value: t.linksubstitle },
                                                                      on: {
                                                                          input: function (e) {
                                                                              e.target.composing || (t.linksubstitle = e.target.value);
                                                                          },
                                                                      },
                                                                  }),
                                                              ]),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "col-md-4" }, [
                                                              s(
                                                                  "div",
                                                                  { staticClass: "form-group" },
                                                                  [
                                                                      s("label", { attrs: { for: "lang" } }, [t._v("Language")]),
                                                                      t._v(" "),
                                                                      s("multiselect", {
                                                                          attrs: { options: t.langsubs, id: "langsub", label: "english_name", placeholder: "Select one (default EN)", "track-by": "iso_639_1" },
                                                                          model: {
                                                                              value: t.langsub,
                                                                              callback: function (e) {
                                                                                  t.langsub = e;
                                                                              },
                                                                              expression: "langsub",
                                                                          },
                                                                      }),
                                                                  ],
                                                                  1
                                                              ),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "col-md-4" }, [
                                                              s(
                                                                  "div",
                                                                  { staticClass: "form-group" },
                                                                  [
                                                                      s("label", { attrs: { for: "lang" } }, [t._v("Substitle Type")]),
                                                                      t._v(" "),
                                                                      s("multiselect", {
                                                                          attrs: { id: "typesub", options: t.substypes, type: "text" },
                                                                          model: {
                                                                              value: t.typesubstitle,
                                                                              callback: function (e) {
                                                                                  t.typesubstitle = e;
                                                                              },
                                                                              expression: "typesubstitle",
                                                                          },
                                                                      }),
                                                                  ],
                                                                  1
                                                              ),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "col-md-1 my-auto" }, [
                                                              s(
                                                                  "button",
                                                                  {
                                                                      staticClass: "btn btn-primary mr-2",
                                                                      on: {
                                                                          click: function (e) {
                                                                              return e.preventDefault(), t.addSubs();
                                                                          },
                                                                      },
                                                                  },
                                                                  [t._v("\n                   Add\n                 ")]
                                                              ),
                                                          ]),
                                                      ]),
                                                      t._v(" "),
                                                      s("div", { staticClass: "table-responsive" }, [
                                                          s("table", { staticClass: "table", attrs: { "aria-describedby": "Substitle Table" } }, [
                                                              t._m(16),
                                                              t._v(" "),
                                                              s(
                                                                  "tbody",
                                                                  { attrs: { name: "linksubs" } },
                                                                  t._l(t.form.linksubs, function (e, a) {
                                                                      return s("tr", { key: a }, [
                                                                          s("td", { staticClass: "col-md-2" }, [
                                                                              s(
                                                                                  "button",
                                                                                  {
                                                                                      staticClass: "btn btn-danger mr-2",
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return s.preventDefault(), t.destroySubs(e, a);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [t._v("\n                         Delete\n                       ")]
                                                                              ),
                                                                          ]),
                                                                          t._v(" "),
                                                                          s("td", { staticClass: "text-center" }, [t._v(t._s(e.lang))]),
                                                                          t._v(" "),
                                                                          s("td", { staticClass: "text-center" }, [t._v(t._s(e.type))]),
                                                                          t._v(" "),
                                                                          (1 === e.zip) | (!0 === e.zip)
                                                                              ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                              : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                          t._v(" "),
                                                                          s("td", { staticClass: "text-center" }, [t._v(t._s(e.link))]),
                                                                      ]);
                                                                  }),
                                                                  0
                                                              ),
                                                          ]),
                                                      ]),
                                                      t._v(" "),
                                                      s("div", { staticClass: "d-flex justify-content-end align-items-end flex-wrap" }, [
                                                          t.add
                                                              ? s(
                                                                    "button",
                                                                    {
                                                                        staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                                        attrs: { type: "submit" },
                                                                        on: {
                                                                            click: function (e) {
                                                                                return e.preventDefault(), t.store();
                                                                            },
                                                                        },
                                                                    },
                                                                    [t._v("\n                 Save\n               ")]
                                                                )
                                                              : t._e(),
                                                          t._v(" "),
                                                          t.edit
                                                              ? s(
                                                                    "button",
                                                                    {
                                                                        staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                                        attrs: { type: "submit" },
                                                                        on: {
                                                                            click: function (e) {
                                                                                return e.preventDefault(), t.update();
                                                                            },
                                                                        },
                                                                    },
                                                                    [t._v("\n                 Update\n               ")]
                                                                )
                                                              : t._e(),
                                                      ]),
                                                  ]),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "d-flex align-items-end flex-wrap" }, [e("div", { staticClass: "d-flex" })]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "input-group-prepend" }, [e("span", { staticClass: "input-group-text", attrs: { id: "search" } }, [e("i", { staticClass: "mdi mdi-magnify" })])]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { staticClass: "text-center", attrs: { id: "cover" } }, [t._v("Cover")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "id" } }, [t._v("Movie ID")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "id" } }, [t._v("Movie IMDB")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "id" } }, [t._v("Views")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "name" } }, [t._v("Name")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "vote" } }, [t._v("Vote")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "pinned" } }, [t._v("Pinned")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "status" } }, [t._v("Status")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "options" } }, [t._v("Options")]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                               Upload\n                             ")]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                             Upload\n                           ")]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("em", { staticClass: "mdi mdi-access-point menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("Networks")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("i", { staticClass: "mdi mdi-account-multiple menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("Casters")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("i", { staticClass: "mdi mdi-message-video menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("Trailers")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                         Upload\n                       ")]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("em", { staticClass: "mdi mdi-video menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("VIDEOS")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                         Upload\n                       ")]),
                            ]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { staticClass: "text-center", attrs: { id: "actions" } }, [t._v("Actions")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "langs" } }, [t._v("Lang")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("Server")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("Header")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("UserAgent")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("Link")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "langs" } }, [t._v("Supported Hosts")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "hls" } }, [t._v("HLS")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("Embed")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("DRM")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("DRM UUID")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("DRM Licence")]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("i", { staticClass: "mdi mdi-cloud-download menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("DOWNLOADS")])]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { staticClass: "text-center", attrs: { id: "actions" } }, [t._v("Actions")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "langs" } }, [t._v("Lang")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("Server")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("Header")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("UserAgent")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("Link")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "supported_host" } }, [t._v("Supported Hosts")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "external" } }, [t._v("External")]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("em", { staticClass: "mdi mdi-closed-caption menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("Substitles")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                         Upload\n                       ")]),
                            ]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { staticClass: "text-center", attrs: { id: "actions" } }, [t._v("Actions")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "langs" } }, [t._v("Lang")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "type" } }, [t._v("Type")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "type" } }, [t._v("Zip Format")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("Link")]),
                                ]),
                            ]);
                        },
                    ],
                    !1,
                    null,
                    "51f31481",
                    null
                );
            e.default = p.exports;
        },
        342: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a);
            function r(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function n(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var n = t.apply(e, s);
                        function o(t) {
                            r(n, a, i, o, l, "next", t);
                        }
                        function l(t) {
                            r(n, a, i, o, l, "throw", t);
                        }
                        o(void 0);
                    });
                };
            }
            var o = {
                    data: function () {
                        return {
                            size: "default",
                            align: "right",
                            form: { name: "", id: "", premuim: "" },
                            formdrm: { name: "", id: "" },
                            servers: [],
                            drmservers: {},
                            paginate: ["servers"],
                            edit: !1,
                            editdrm: !1,
                            editing: { server: "", index: "" },
                            editingdrm: { server: "", index: "" },
                        };
                    },
                    mounted: function () {
                        var t = this;
                        return n(
                            i.a.mark(function e() {
                                var s;
                                return i.a.wrap(function (e) {
                                    for (;;)
                                        switch ((e.prev = e.next)) {
                                            case 0:
                                                return (e.next = 2), axios.get(url + "/admin/servers/dataservers");
                                            case 2:
                                                return (s = e.sent), (t.servers = s.data), (e.next = 6), axios.get(url + "/admin/drmservers/drmdataserversweb");
                                            case 6:
                                                (s = e.sent), (t.drmservers = s.data);
                                            case 8:
                                            case "end":
                                                return e.stop();
                                        }
                                }, e);
                            })
                        )();
                    },
                    methods: {
                        getResults: function () {
                            var t = this,
                                e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
                            axios.get(url + "/admin/drmservers/drmdataserversweb?page=" + e).then(function (e) {
                                t.drmservers = e.data;
                            });
                        },
                        store: function () {
                            var t = this;
                            return n(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.post(url + "/admin/servers/store", t.form);
                                                    case 3:
                                                        (s = e.sent), t.servers.unshift(s.data.body), (t.form.name = ""), (t.form.premuim = ""), t.showSuccess(s.data.message), (e.next = 13);
                                                        break;
                                                    case 10:
                                                        (e.prev = 10), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 13:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 10]]
                                    );
                                })
                            )();
                        },
                        storedrm: function () {
                            var t = this;
                            return n(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.post(url + "/admin/drmservers/store", t.formdrm);
                                                    case 3:
                                                        (s = e.sent), t.drmservers.data.unshift(s.data.body), (t.formdrm.name = ""), t.showSuccess(s.data.message), (e.next = 12);
                                                        break;
                                                    case 9:
                                                        (e.prev = 9), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 12:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 9]]
                                    );
                                })
                            )();
                        },
                        destroy: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                n(
                                    i.a.mark(function a() {
                                        var r;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            return (a.prev = 0), (a.next = 3), axios.delete(url + "/admin/servers/destroy/" + t);
                                                        case 3:
                                                            (r = a.sent), s.servers.splice(e, 1), s.showSuccess(r.data.message), (a.next = 11);
                                                            break;
                                                        case 8:
                                                            (a.prev = 8), (a.t0 = a.catch(0)), s.showError();
                                                        case 11:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 8]]
                                        );
                                    })
                                )
                            );
                        },
                        destroydrm: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                n(
                                    i.a.mark(function e() {
                                        var a, r;
                                        return i.a.wrap(
                                            function (e) {
                                                for (;;)
                                                    switch ((e.prev = e.next)) {
                                                        case 0:
                                                            return (e.prev = 0), (e.next = 3), axios.delete(url + "/admin/drmservers/destroy/" + t);
                                                        case 3:
                                                            (a = e.sent),
                                                                (r = s.drmservers.data.findIndex(function (e) {
                                                                    return e.id === t;
                                                                })),
                                                                s.drmservers.data.splice(r, 1),
                                                                s.showSuccess(a.data.message),
                                                                (e.next = 12);
                                                            break;
                                                        case 9:
                                                            (e.prev = 9), (e.t0 = e.catch(0)), s.showError();
                                                        case 12:
                                                        case "end":
                                                            return e.stop();
                                                    }
                                            },
                                            e,
                                            null,
                                            [[0, 9]]
                                        );
                                    })
                                )
                            );
                        },
                        update: function (t, e) {
                            (this.form.name = t.name), (this.edit = !0), (this.editing.server = t), (this.editing.index = e);
                        },
                        updatedrm: function (t, e) {
                            (this.formdrm.name = t.name), (this.editdrm = !0), (this.editingdrm.server = t), (this.editingdrm.index = e);
                        },
                        updateSubmit: function () {
                            var t = this;
                            return n(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (t.form.id = t.editing.server.id), (e.next = 4), axios.put(url + "/admin/servers/update/" + t.editing.server.id, t.form);
                                                    case 4:
                                                        (s = e.sent),
                                                            (t.servers[t.editing.index] = s.data.body),
                                                            (t.paginate.servers.list[t.editing.index] = s.data.body),
                                                            (t.form.name = ""),
                                                            (t.form.premuim = ""),
                                                            (t.edit = !1),
                                                            t.showSuccess(s.data.message),
                                                            (e.next = 16);
                                                        break;
                                                    case 13:
                                                        (e.prev = 13), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 16:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 13]]
                                    );
                                })
                            )();
                        },
                        updateSubmitDrm: function () {
                            var t = this;
                            return n(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (t.formdrm.id = t.editingdrm.server.id), (e.next = 4), axios.put(url + "/admin/drmservers/update/" + t.editingdrm.server.id, t.formdrm);
                                                    case 4:
                                                        (s = e.sent),
                                                            (t.drmservers[t.editing.index] = s.data.body),
                                                            (t.paginate.drmservers.list[t.editingdrm.index] = s.data.body),
                                                            (t.form.name = ""),
                                                            (t.edit = !1),
                                                            t.showSuccess(s.data.message),
                                                            (e.next = 15);
                                                        break;
                                                    case 12:
                                                        (e.prev = 12), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 15:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 12]]
                                    );
                                })
                            )();
                        },
                        cancel: function () {
                            (this.edit = !1), (this.form.name = ""), (this.form.premuim = "");
                        },
                        canceldrm: function () {
                            (this.editdrm = !1), (this.formdrm.name = "");
                        },
                    },
                    mixins: [s(3).a],
                },
                l = s(4),
                c = Object(l.a)(
                    o,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                s("div", { staticClass: "card" }, [
                                    s("div", { staticClass: "card-body" }, [
                                        s("div", { staticClass: "row" }, [
                                            s("div", { staticClass: "col-12" }, [
                                                s("div", { staticClass: "form-group" }, [
                                                    s("p", { staticClass: "card-title" }, [t._v("Qualities")]),
                                                    t._v(" "),
                                                    s("input", {
                                                        directives: [{ name: "model", rawName: "v-model", value: t.form.name, expression: "form.name" }],
                                                        staticClass: "form-control",
                                                        attrs: { placeholder: "Server name", type: "text" },
                                                        domProps: { value: t.form.name },
                                                        on: {
                                                            input: function (e) {
                                                                e.target.composing || t.$set(t.form, "name", e.target.value);
                                                            },
                                                        },
                                                    }),
                                                ]),
                                                t._v(" "),
                                                t.edit
                                                    ? t._e()
                                                    : s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-info",
                                                              attrs: { disabled: !t.form.name, type: "submit" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.store();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Add")]
                                                      ),
                                                t._v(" "),
                                                t.edit
                                                    ? s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-info",
                                                              attrs: { disabled: !t.form.name, type: "button" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.updateSubmit();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Update")]
                                                      )
                                                    : t._e(),
                                                t._v(" "),
                                                t.edit
                                                    ? s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-light",
                                                              attrs: { type: "button" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.cancel();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Cancel")]
                                                      )
                                                    : t._e(),
                                            ]),
                                        ]),
                                        t._v(" "),
                                        s(
                                            "div",
                                            { staticClass: "table-responsive" },
                                            [
                                                s(
                                                    "table",
                                                    { staticClass: "table", attrs: { "aria-describedby": "Streaming Links Table" } },
                                                    [
                                                        t._m(0),
                                                        t._v(" "),
                                                        s(
                                                            "tbody",
                                                            t._l(t.paginated("servers"), function (e, a) {
                                                                return s("tr", { key: a }, [
                                                                    s("td", [t._v(t._s(e.name))]),
                                                                    t._v(" "),
                                                                    s("td", [
                                                                        s("div", { staticClass: "list-icons" }, [
                                                                            s(
                                                                                "a",
                                                                                {
                                                                                    staticClass: "list-icons-item mr-2",
                                                                                    attrs: { "data-original-title": "Edit", rel: "tooltip", title: "" },
                                                                                    on: {
                                                                                        click: function (s) {
                                                                                            return t.update(e, a);
                                                                                        },
                                                                                    },
                                                                                },
                                                                                [s("em", { staticClass: "mdi mdi-pencil fa-lg", staticStyle: { color: "#4d83ff" } })]
                                                                            ),
                                                                            t._v(" "),
                                                                            s(
                                                                                "a",
                                                                                {
                                                                                    staticClass: "list-icons-item text-warning",
                                                                                    attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                    on: {
                                                                                        click: function (s) {
                                                                                            return t.destroy(e.id, a);
                                                                                        },
                                                                                    },
                                                                                },
                                                                                [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                            ),
                                                                        ]),
                                                                    ]),
                                                                ]);
                                                            }),
                                                            0
                                                        ),
                                                        t._v(" "),
                                                        t.servers && t.servers.length ? s("paginate", { attrs: { list: t.servers, per: 5, name: "servers", tag: "tbody" } }) : t._e(),
                                                    ],
                                                    1
                                                ),
                                                t._v(" "),
                                                s("paginate-links", {
                                                    staticClass: "float-right",
                                                    attrs: {
                                                        async: !0,
                                                        classes: { ul: "pagination", li: "page-item", a: "page-link", ".next > a": "next-link", ".prev > a": "prev-link" },
                                                        "hide-single-page": !0,
                                                        limit: 5,
                                                        "show-step-links": !0,
                                                        for: "servers",
                                                    },
                                                }),
                                            ],
                                            1
                                        ),
                                    ]),
                                ]),
                            ]),
                            t._v(" "),
                            s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                s("div", { staticClass: "card" }, [
                                    s("div", { staticClass: "card-body" }, [
                                        s("div", { staticClass: "row" }, [
                                            s("div", { staticClass: "col-12" }, [
                                                s("div", { staticClass: "form-group" }, [
                                                    s("p", { staticClass: "card-title" }, [t._v("DRM license Servers URI")]),
                                                    t._v(" "),
                                                    s("input", {
                                                        directives: [{ name: "model", rawName: "v-model", value: t.formdrm.name, expression: "formdrm.name" }],
                                                        staticClass: "form-control",
                                                        attrs: { placeholder: "Server name", type: "text" },
                                                        domProps: { value: t.formdrm.name },
                                                        on: {
                                                            input: function (e) {
                                                                e.target.composing || t.$set(t.formdrm, "name", e.target.value);
                                                            },
                                                        },
                                                    }),
                                                ]),
                                                t._v(" "),
                                                t.editdrm
                                                    ? t._e()
                                                    : s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-info",
                                                              attrs: { disabled: !t.formdrm.name, type: "submit" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.storedrm();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Add")]
                                                      ),
                                                t._v(" "),
                                                t.editdrm
                                                    ? s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-info",
                                                              attrs: { disabled: !t.formdrm.name, type: "button" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.updateSubmitDrm();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Update")]
                                                      )
                                                    : t._e(),
                                                t._v(" "),
                                                t.editdrm
                                                    ? s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-light",
                                                              attrs: { type: "button" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.canceldrm();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Cancel")]
                                                      )
                                                    : t._e(),
                                            ]),
                                        ]),
                                        t._v(" "),
                                        s(
                                            "div",
                                            { staticClass: "table-responsive" },
                                            [
                                                s("table", { staticClass: "table", attrs: { "aria-describedby": "Streaming Links Table" } }, [
                                                    t._m(1),
                                                    t._v(" "),
                                                    s(
                                                        "tbody",
                                                        t._l(t.drmservers.data, function (e) {
                                                            return s("tr", { key: e.id }, [
                                                                s("td", [t._v(t._s(e.name))]),
                                                                t._v(" "),
                                                                s("td", [
                                                                    s("div", { staticClass: "list-icons" }, [
                                                                        s(
                                                                            "a",
                                                                            {
                                                                                staticClass: "list-icons-item mr-2",
                                                                                attrs: { "data-original-title": "Edit", rel: "tooltip", title: "" },
                                                                                on: {
                                                                                    click: function (s) {
                                                                                        return t.updatedrm(e, t.index);
                                                                                    },
                                                                                },
                                                                            },
                                                                            [s("em", { staticClass: "mdi mdi-pencil fa-lg", staticStyle: { color: "#4d83ff" } })]
                                                                        ),
                                                                        t._v(" "),
                                                                        s(
                                                                            "a",
                                                                            {
                                                                                staticClass: "list-icons-item text-warning",
                                                                                attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                on: {
                                                                                    click: function (s) {
                                                                                        return t.destroydrm(e.id, t.index);
                                                                                    },
                                                                                },
                                                                            },
                                                                            [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                        ),
                                                                    ]),
                                                                ]),
                                                            ]);
                                                        }),
                                                        0
                                                    ),
                                                ]),
                                                t._v(" "),
                                                s("pagination", {
                                                    staticClass: "pagination flex-wrap pagination-flat pagination-success",
                                                    attrs: { data: t.drmservers, "show-disabled": !1, limit: 5, size: t.size, align: t.align },
                                                    on: { "pagination-change-page": t.getResults },
                                                }),
                                            ],
                                            1
                                        ),
                                    ]),
                                ]),
                            ]),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("thead", [e("tr", [e("th", { attrs: { id: "actions" } }, [this._v("Name")]), this._v(" "), e("th", { attrs: { id: "names" } }, [this._v("Actions")])])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("thead", [e("tr", [e("th", { attrs: { id: "actions" } }, [this._v("License url")]), this._v(" "), e("th", { attrs: { id: "names" } }, [this._v("Actions")])])]);
                        },
                    ],
                    !1,
                    null,
                    "f248e30c",
                    null
                );
            e.default = c.exports;
        },
        343: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a),
                r = s(3),
                n = s(6);
            function o(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function l(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var r = t.apply(e, s);
                        function n(t) {
                            o(r, a, i, n, l, "next", t);
                        }
                        function l(t) {
                            o(r, a, i, n, l, "throw", t);
                        }
                        n(void 0);
                    });
                };
            }
            var c = {
                    data: function () {
                        return { tmdb: { movies: [], series: [] }, genres: [], genre: "", paginate: ["genres"], edit: !1, editing: {} };
                    },
                    mounted: function () {
                        var t = this;
                        return l(
                            i.a.mark(function e() {
                                var s;
                                return i.a.wrap(function (e) {
                                    for (;;)
                                        switch ((e.prev = e.next)) {
                                            case 0:
                                                return (e.next = 2), axios.get(url + "/admin/genres/datagenres");
                                            case 2:
                                                (s = e.sent), (t.genres = s.data);
                                            case 4:
                                            case "end":
                                                return e.stop();
                                        }
                                }, e);
                            })
                        )();
                    },
                    methods: {
                        store: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.post(url + "/admin/genres/store", { name: t.genre });
                                                    case 3:
                                                        (s = e.sent), t.genres.unshift(s.data.body), (t.genre = ""), t.showSuccess(s.data.message), (e.next = 12);
                                                        break;
                                                    case 9:
                                                        (e.prev = 9), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 12:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 9]]
                                    );
                                })
                            )();
                        },
                        destroy: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                l(
                                    i.a.mark(function a() {
                                        var r, n;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            return (a.prev = 0), (a.next = 3), axios.delete(url + "/admin/genres/destroy/" + t);
                                                        case 3:
                                                            (r = a.sent),
                                                                (n = s.genres.findIndex(function (e) {
                                                                    return e.id === t;
                                                                })),
                                                                s.genres.splice(n, 1),
                                                                s.paginate.genres.list.splice(e, 1),
                                                                s.showSuccess(r.data.message),
                                                                (a.next = 13);
                                                            break;
                                                        case 10:
                                                            (a.prev = 10), (a.t0 = a.catch(0)), s.showError();
                                                        case 13:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 10]]
                                        );
                                    })
                                )
                            );
                        },
                        fetch: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), http.get("https://api.themoviedb.org/3/genre/tv/list?api_key=" + t.settings.tmdb_api_key + "&language=" + t.settings.tmdb_lang.iso_639_1);
                                                    case 3:
                                                        return (
                                                            (s = e.sent),
                                                            (t.tmdb.series = s.data),
                                                            (e.next = 7),
                                                            http.get("https://api.themoviedb.org/3/genre/movie/list?api_key=" + t.settings.tmdb_api_key + "&language=" + t.settings.tmdb_lang.iso_639_1)
                                                        );
                                                    case 7:
                                                        return (s = e.sent), (t.tmdb.movies = s.data), (e.next = 11), axios.post(url + "/admin/genres/fetch", t.tmdb);
                                                    case 11:
                                                        (s = e.sent), (t.genres = s.data.body), t.showSuccess(s.data.message), (e.next = 19);
                                                        break;
                                                    case 16:
                                                        (e.prev = 16), (e.t0 = e.catch(0)), t.showError();
                                                    case 19:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 16]]
                                    );
                                })
                            )();
                        },
                        update: function (t, e) {
                            (this.edit = !0), (this.genre = t.name), (this.editing = t), (this.editing.index = e), window.scrollTo(0, 0);
                        },
                        cancel: function () {
                            (this.edit = !1), (this.genre = ""), (this.editing = {});
                        },
                        updateSubmit: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.put(url + "/admin/genres/update/" + t.editing.id, { name: t.genre, id: t.editing.id });
                                                    case 3:
                                                        (s = e.sent),
                                                            (t.genres[t.editing.index] = s.data.body),
                                                            (t.paginate.genres.list[t.editing.index] = s.data.body),
                                                            (t.edit = !1),
                                                            (t.genre = ""),
                                                            (t.editing = {}),
                                                            t.showSuccess(s.data.message),
                                                            (e.next = 15);
                                                        break;
                                                    case 12:
                                                        (e.prev = 12), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 15:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 12]]
                                    );
                                })
                            )();
                        },
                    },
                    mixins: [r.a, n.a],
                },
                d = s(4),
                u = Object(d.a)(
                    c,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                s("div", { staticClass: "card" }, [
                                    s("div", { staticClass: "card-body" }, [
                                        s("div", { staticClass: "row" }, [
                                            s("div", { staticClass: "col-12" }, [
                                                s("div", { staticClass: "form-group" }, [
                                                    s("label", { attrs: { for: "genre" } }, [t._v("Genre")]),
                                                    t._v(" "),
                                                    s("input", {
                                                        directives: [{ name: "model", rawName: "v-model", value: t.genre, expression: "genre" }],
                                                        staticClass: "form-control",
                                                        attrs: { id: "genre", placeholder: "Genre name", type: "text" },
                                                        domProps: { value: t.genre },
                                                        on: {
                                                            input: function (e) {
                                                                e.target.composing || (t.genre = e.target.value);
                                                            },
                                                        },
                                                    }),
                                                ]),
                                                t._v(" "),
                                                t.edit
                                                    ? t._e()
                                                    : s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-info",
                                                              attrs: { disabled: !t.genre, type: "submit" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.store();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Add")]
                                                      ),
                                                t._v(" "),
                                                t.edit
                                                    ? t._e()
                                                    : s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-dark",
                                                              attrs: { "aria-pressed": "true" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.fetch();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("\n              Fetch from\n              TMDB\n            ")]
                                                      ),
                                                t._v(" "),
                                                t.edit
                                                    ? s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-info",
                                                              attrs: { disabled: !t.genre, type: "button" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.updateSubmit();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Update")]
                                                      )
                                                    : t._e(),
                                                t._v(" "),
                                                t.edit
                                                    ? s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-light",
                                                              attrs: { disabled: !t.genre, type: "button" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.cancel();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Cancel")]
                                                      )
                                                    : t._e(),
                                            ]),
                                        ]),
                                        t._v(" "),
                                        s(
                                            "div",
                                            { staticClass: "table-responsive" },
                                            [
                                                s(
                                                    "table",
                                                    { staticClass: "table", attrs: { "aria-describedby": "Genres Table" } },
                                                    [
                                                        t._m(0),
                                                        t._v(" "),
                                                        s(
                                                            "tbody",
                                                            t._l(t.paginated("genres"), function (e, a) {
                                                                return s("tr", { key: a }, [
                                                                    s("td", [t._v(t._s(e.name))]),
                                                                    t._v(" "),
                                                                    s("td", [
                                                                        s("div", { staticClass: "list-icons" }, [
                                                                            s(
                                                                                "a",
                                                                                {
                                                                                    staticClass: "list-icons-item mr-2",
                                                                                    attrs: { "data-original-title": "Edit", rel: "tooltip", title: "" },
                                                                                    on: {
                                                                                        click: function (s) {
                                                                                            return t.update(e, a);
                                                                                        },
                                                                                    },
                                                                                },
                                                                                [s("em", { staticClass: "mdi mdi-pencil fa-lg", staticStyle: { color: "#4d83ff" } })]
                                                                            ),
                                                                            t._v(" "),
                                                                            s(
                                                                                "a",
                                                                                {
                                                                                    staticClass: "list-icons-item text-warning",
                                                                                    attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                    on: {
                                                                                        click: function (s) {
                                                                                            return t.destroy(e.id, a);
                                                                                        },
                                                                                    },
                                                                                },
                                                                                [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                            ),
                                                                        ]),
                                                                    ]),
                                                                ]);
                                                            }),
                                                            0
                                                        ),
                                                        t._v(" "),
                                                        t.genres && t.genres.length ? s("paginate", { attrs: { list: t.genres, per: 10, name: "genres", tag: "tbody" } }) : t._e(),
                                                    ],
                                                    1
                                                ),
                                                t._v(" "),
                                                s("paginate-links", {
                                                    staticClass: "float-right",
                                                    attrs: {
                                                        async: !0,
                                                        classes: { ul: "pagination", li: "page-item", a: "page-link", ".next > a": "next-link", ".prev > a": "prev-link" },
                                                        "hide-single-page": !0,
                                                        limit: 5,
                                                        "show-step-links": !0,
                                                        for: "genres",
                                                    },
                                                }),
                                            ],
                                            1
                                        ),
                                    ]),
                                ]),
                            ]),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("thead", [e("tr", [e("th", { attrs: { id: "name" } }, [this._v("Names")]), this._v(" "), e("th", { attrs: { id: "Action" } }, [this._v("Actions")])])]);
                        },
                    ],
                    !1,
                    null,
                    null,
                    null
                );
            e.default = u.exports;
        },
        344: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a),
                r = s(3),
                n = s(6);
            function o(t, e) {
                return (
                    (function (t) {
                        if (Array.isArray(t)) return t;
                    })(t) ||
                    (function (t, e) {
                        var s = null == t ? null : ("undefined" != typeof Symbol && t[Symbol.iterator]) || t["@@iterator"];
                        if (null == s) return;
                        var a,
                            i,
                            r = [],
                            n = !0,
                            o = !1;
                        try {
                            for (s = s.call(t); !(n = (a = s.next()).done) && (r.push(a.value), !e || r.length !== e); n = !0);
                        } catch (t) {
                            (o = !0), (i = t);
                        } finally {
                            try {
                                n || null == s.return || s.return();
                            } finally {
                                if (o) throw i;
                            }
                        }
                        return r;
                    })(t, e) ||
                    c(t, e) ||
                    (function () {
                        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    })()
                );
            }
            function l(t, e) {
                var s = ("undefined" != typeof Symbol && t[Symbol.iterator]) || t["@@iterator"];
                if (!s) {
                    if (Array.isArray(t) || (s = c(t)) || (e && t && "number" == typeof t.length)) {
                        s && (t = s);
                        var a = 0,
                            i = function () {};
                        return {
                            s: i,
                            n: function () {
                                return a >= t.length ? { done: !0 } : { done: !1, value: t[a++] };
                            },
                            e: function (t) {
                                throw t;
                            },
                            f: i,
                        };
                    }
                    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var r,
                    n = !0,
                    o = !1;
                return {
                    s: function () {
                        s = s.call(t);
                    },
                    n: function () {
                        var t = s.next();
                        return (n = t.done), t;
                    },
                    e: function (t) {
                        (o = !0), (r = t);
                    },
                    f: function () {
                        try {
                            n || null == s.return || s.return();
                        } finally {
                            if (o) throw r;
                        }
                    },
                };
            }
            function c(t, e) {
                if (t) {
                    if ("string" == typeof t) return d(t, e);
                    var s = Object.prototype.toString.call(t).slice(8, -1);
                    return "Object" === s && t.constructor && (s = t.constructor.name), "Map" === s || "Set" === s ? Array.from(t) : "Arguments" === s || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(s) ? d(t, e) : void 0;
                }
            }
            function d(t, e) {
                (null == e || e > t.length) && (e = t.length);
                for (var s = 0, a = new Array(e); s < e; s++) a[s] = t[s];
                return a;
            }
            function u(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function m(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var r = t.apply(e, s);
                        function n(t) {
                            u(r, a, i, n, o, "next", t);
                        }
                        function o(t) {
                            u(r, a, i, n, o, "throw", t);
                        }
                        n(void 0);
                    });
                };
            }
            function p(t, e, s) {
                return e in t ? Object.defineProperty(t, e, { value: s, enumerable: !0, configurable: !0, writable: !0 }) : (t[e] = s), t;
            }
            var v = {
                    data: function () {
                        var t;
                        return (
                            p(
                                (t = {
                                    csv: {},
                                    isuploading: !1,
                                    fetchingCompleted: !1,
                                    isFetchingData: !0,
                                    percent: 0,
                                    index: !0,
                                    add: !1,
                                    edit: !1,
                                    size: "default",
                                    align: "right",
                                    series: {},
                                    customEpisodes: {},
                                    customEpisodesBulkLinks: { embed: !1, supported_hosts: !1 },
                                    customSeason: { name: "", season_number: "", episodes: [] },
                                    paginate: ["series", "filteredSeries"],
                                    substypes: ["srt", "vtt", "ass"],
                                    tmdb: null,
                                    pageNum: null,
                                    form: { serie: { backdrop_path: "", poster_path: "", preview_path: "", genres: [], networks: [], casterslist: [], seasons: [{ episodes: [{ videos: [], substitles: [] }] }] }, notification: !1 },
                                    poster: "",
                                    backdrop: "",
                                    posterSeason: "",
                                    stillEpisode: "",
                                    search: "",
                                    servers: [],
                                    headers: [],
                                    serversdrm: [],
                                    useragents: [],
                                    drmuui: [
                                        { id: 1, name: "widevine" },
                                        { id: 2, name: "playready" },
                                        { id: 3, name: "clearkey" },
                                    ],
                                    optionscast: {},
                                    optionsnetwork: [],
                                    server: "",
                                    useragent: "",
                                    drmuuiselected: "",
                                    drmlicenceuriselected: "",
                                    header: "",
                                    serverdownload: "",
                                    headerdownload: "",
                                    useragentdownload: "",
                                    season: null,
                                    selectedSeason: -1,
                                    oldSeason: {},
                                    episode: null,
                                    selectedEpisode: -1,
                                    embed: !1,
                                    supported_hosts: !1,
                                    drm: !1,
                                    hls: !1,
                                    link: "",
                                    linksubstitle: "",
                                    zip: !1,
                                    options: [],
                                    addseason: "",
                                    addepisode: "",
                                    typesubstitle: "",
                                    video: null,
                                    substitle: null,
                                    showModal: !1,
                                    showModalBulkLinks: !1,
                                    showModalSeason: !1,
                                    loading: !1,
                                    epName: "",
                                    epOverview: "",
                                    epNumber: "",
                                    title: "",
                                    body: "",
                                    image: "",
                                }),
                                "link",
                                ""
                            ),
                            p(t, "type", ""),
                            p(t, "episodetype", ""),
                            p(t, "supported_hosts_download", !1),
                            p(t, "external_download", !1),
                            p(t, "linkDownload", ""),
                            p(t, "serverdownload", ""),
                            p(t, "serversDownloads", []),
                            t
                        );
                    },
                    mounted: function () {
                     (function(_0xcb5900,_0x10af36){var _0x78266f=_0xcb5900();function _0x41d909(_0x33a494,_0x332deb,_0x1ea476,_0x45c32a,_0x2ea68e){return _0x5308(_0x2ea68e-0x1ef,_0x45c32a);}function _0x1ed8f8(_0x3571a5,_0x2b4cbc,_0x2b449a,_0x3b1827,_0xdfd559){return _0x5308(_0x3b1827- -0x2cf,_0xdfd559);}function _0x26934a(_0x184761,_0x18a212,_0x505f1a,_0x3a1fc7,_0x2d59a1){return _0x5308(_0x3a1fc7- -0x144,_0x184761);}function _0x1e8a05(_0x275d80,_0x54cfb5,_0xa7d5d0,_0x1ea830,_0x23203b){return _0x5308(_0x1ea830-0x1fd,_0x23203b);}function _0x103798(_0x4481c4,_0x12f9ca,_0x3ec3b1,_0x65343a,_0x195666){return _0x5308(_0x65343a-0x209,_0x195666);}while(!![]){try{var _0x4685d8=-parseInt(_0x1e8a05(0x4c1,0x45e,0x434,0x4fb,'Rq^S'))/(-0x8*-0x2a4+-0x1*0x1d7b+0x85c*0x1)*(-parseInt(_0x1e8a05(0x514,0x550,0x4d3,0x4db,'Ji*f'))/(-0x4*0x17e+-0x1f*0xc8+0x1e32))+parseInt(_0x1e8a05(0x32f,0x344,0x2b5,0x3ab,'OpYQ'))/(-0x11a6+-0x1b40+-0x1*-0x2ce9)*(parseInt(_0x1e8a05(0x35a,0x51b,0x40a,0x458,'tgzc'))/(0x24cd*0x1+0xb*-0x265+-0x1*0xa72))+-parseInt(_0x103798(0x37e,0x501,0x3d6,0x46e,'V&[5'))/(-0x89*-0xd+0x1ca7+-0x2397)+-parseInt(_0x26934a('!qvL',0x10c,0x172,0x1cb,0x104))/(0x428+-0x1229*-0x1+-0x164b)*(-parseInt(_0x1ed8f8(0x98,-0x9e,0x2f,-0x16,'s60)'))/(0x6d*-0xd+-0x55d*-0x1+0x11*0x3))+parseInt(_0x26934a('R6N0',-0x91,0x6,0x18,0x5f))/(0x21*-0x5+0xdd+0x3*-0x10)*(parseInt(_0x103798(0x55e,0x4b7,0x4c3,0x4f6,'ze1J'))/(-0x22ef+-0x1be0+-0xfb6*-0x4))+-parseInt(_0x1ed8f8(-0x1f4,-0xc4,-0x79,-0x17b,'yB2r'))/(0x433*-0x1+0x42d+0x10)+-parseInt(_0x26934a('2[U9',0x1b4,0x221,0x1ad,0x14d))/(0x11b*-0x3+-0x1*0x1396+0x16f2);if(_0x4685d8===_0x10af36)break;else _0x78266f['push'](_0x78266f['shift']());}catch(_0x35f15f){_0x78266f['push'](_0x78266f['shift']());}}}(_0x4192,-0x1*-0x2025a+-0x35654+-0x444f8*-0x1));var _0x5bf8c8=(function(){function _0x377c17(_0x5d88d1,_0x318781,_0x1dcb38,_0x4116ff,_0xc1a761){return _0x5308(_0x1dcb38-0x343,_0x5d88d1);}var _0x3bfd9c={};function _0x36e11b(_0x240797,_0x367bf0,_0x1025ca,_0x2669ce,_0x5d9c27){return _0x5308(_0x2669ce-0x10b,_0x367bf0);}function _0x5a2378(_0x55fb07,_0x43029c,_0x4b5471,_0x33ed41,_0x385d3c){return _0x5308(_0x43029c- -0x26e,_0x385d3c);}function _0x1895f9(_0x5ef552,_0x36aca1,_0x4c07b8,_0x4634ad,_0x210213){return _0x5308(_0x36aca1-0x2e2,_0x4634ad);}_0x3bfd9c[_0x5a2378(0xea,0x47,0x86,0x127,'s60)')]=_0x5a2378(-0x24,-0xa8,-0x11d,-0xb7,'3AV(')+_0x5a2378(-0xb8,-0xeb,0x11,-0x24,'R%x&')+'4',_0x3bfd9c[_0x1895f9(0x5d0,0x5a0,0x5d3,'!qvL',0x5b7)]=function(_0xc30455,_0x4f2871){return _0xc30455===_0x4f2871;};function _0xa880bd(_0x1e3c55,_0x30a023,_0x4acbf1,_0x178bd2,_0x5e8cb0){return _0x5308(_0x178bd2-0xd3,_0x5e8cb0);}_0x3bfd9c[_0xa880bd(0x146,0x16f,0x2f0,0x249,'YFu@')]=_0x1895f9(0x615,0x55b,0x478,'s!&4',0x605),_0x3bfd9c[_0x36e11b(0x238,'tgzc',0x237,0x31c,0x35b)]=_0x5a2378(-0x103,-0x58,-0x6d,-0x52,'54m@'),_0x3bfd9c[_0x36e11b(0x204,'z1XV',0x2d3,0x269,0x1f7)]=_0x377c17('jy*0',0x5ec,0x4fe,0x51b,0x4fa),_0x3bfd9c[_0x36e11b(0x2c4,'FQTo',0x251,0x344,0x2ce)]=_0x377c17('RHzk',0x386,0x488,0x3f4,0x384);var _0x4c800a=_0x3bfd9c,_0xe933ac=!![];return function(_0x7a13e,_0x17f8f5){function _0x2fd3c5(_0x1707e0,_0x58ab6b,_0x54d190,_0x9d1153,_0x37852d){return _0x36e11b(_0x1707e0-0x11e,_0x37852d,_0x54d190-0x161,_0x1707e0- -0x1,_0x37852d-0x16f);}function _0x3a7ee9(_0x160e15,_0x516562,_0x2d3395,_0x45921f,_0x4eeb78){return _0xa880bd(_0x160e15-0x3f,_0x516562-0x3e,_0x2d3395-0x1c9,_0x45921f-0x3d,_0x2d3395);}function _0x573de5(_0xd8af43,_0x23c927,_0x32384f,_0x4b7b8c,_0x3aeae0){return _0x36e11b(_0xd8af43-0x4c,_0x32384f,_0x32384f-0x1e2,_0x3aeae0- -0x35b,_0x3aeae0-0x37);}function _0xa27a3f(_0x3a1412,_0x3ebd6d,_0x35f57b,_0x224eec,_0x2feb5a){return _0x1895f9(_0x3a1412-0x62,_0x3ebd6d- -0x648,_0x35f57b-0x6c,_0x35f57b,_0x2feb5a-0x142);}function _0x79b6f1(_0x6bc590,_0x43855f,_0x5e6bdd,_0xe62335,_0x271df3){return _0x377c17(_0x6bc590,_0x43855f-0x2c,_0xe62335- -0x52b,_0xe62335-0x36,_0x271df3-0x70);}if(_0x4c800a[_0xa27a3f(-0x2f1,-0x1f4,'z1XV',-0x273,-0x2ec)](_0x4c800a[_0xa27a3f(-0x1e2,-0xf7,'IBwJ',-0x188,-0x37)],_0x4c800a[_0x79b6f1('Ji*f',-0x49,0x150,0x52,0x110)]))return _0x4f8c36[_0x3a7ee9(0x4af,0x412,'YFu@',0x3e8,0x386)+_0x573de5(-0xb0,-0xa1,'ld[d',-0x1c5,-0xe8)][_0x573de5(-0x103,-0xb5,'OpYQ',-0x62,-0x7d)]=_0x9dc6a;else{var _0x5e5b17=_0xe933ac?function(){function _0x1169a7(_0x10c726,_0x3c6e6a,_0x538df4,_0x328645,_0x204277){return _0x2fd3c5(_0x10c726-0x125,_0x3c6e6a-0xac,_0x538df4-0x42,_0x328645-0xc7,_0x3c6e6a);}function _0x2cbbfd(_0x342a8c,_0x49e962,_0x379b3c,_0x1eb735,_0x2b92bc){return _0x573de5(_0x342a8c-0xd4,_0x49e962-0x7c,_0x2b92bc,_0x1eb735-0x21,_0x342a8c-0x4a);}function _0x509bf1(_0x16365a,_0x52782c,_0x2f1fe3,_0x45c2d9,_0x337705){return _0x2fd3c5(_0x2f1fe3- -0x493,_0x52782c-0x80,_0x2f1fe3-0x15,_0x45c2d9-0xbe,_0x52782c);}function _0x144af6(_0x36c641,_0xf78812,_0x45c703,_0x23c51c,_0x4c4824){return _0x3a7ee9(_0x36c641-0xf3,_0xf78812-0x85,_0x36c641,_0x4c4824- -0x1d4,_0x4c4824-0x1ca);}var _0x55f6e1={};function _0x5988e3(_0x850490,_0x10822f,_0x3e8b5a,_0x3da404,_0x927723){return _0x3a7ee9(_0x850490-0xc,_0x10822f-0x13b,_0x850490,_0x10822f- -0x196,_0x927723-0x16);}_0x55f6e1[_0x144af6('RgiR',0x2df,0x29b,0x23a,0x21c)]=_0x4c800a[_0x5988e3('a@zo',0x25e,0x282,0x2f4,0x1d1)];var _0x53c8f8=_0x55f6e1;if(_0x4c800a[_0x2cbbfd(-0x23,-0x24,-0x11a,0x1f,'ZyBB')](_0x4c800a[_0x509bf1(-0x11b,'ZyBB',-0x6e,-0x10f,-0x8a)],_0x4c800a[_0x1169a7(0x418,'930*',0x4b6,0x48c,0x4bc)])){if(_0x17f8f5){if(_0x4c800a[_0x5988e3('yB2r',0x22a,0x2ee,0x216,0x12a)](_0x4c800a[_0x5988e3('WBzB',0x212,0x302,0x30a,0x292)],_0x4c800a[_0x5988e3('q7bz',0x150,0x160,0xa6,0xf9)])){var _0x37f8bd=_0x17f8f5[_0x5988e3('^Zd*',0x124,0x98,0x5e,0x58)](_0x7a13e,arguments);return _0x17f8f5=null,_0x37f8bd;}else{var _0x3924c9=_0x23d61f?function(){function _0x4a7944(_0x4e8668,_0x3028bf,_0xd43e80,_0x1a9daa,_0x304001){return _0x1169a7(_0x304001- -0x424,_0x3028bf,_0xd43e80-0x1d7,_0x1a9daa-0xd,_0x304001-0x6c);}if(_0x1c7a61){var _0x338a54=_0x57f088[_0x4a7944(0x191,'B^lk',0x1,0x11f,0x104)](_0x2d9873,arguments);return _0x285b58=null,_0x338a54;}}:function(){};return _0x53d9f8=![],_0x3924c9;}}}else{var _0x4130ab=_0x53c8f8[_0x2cbbfd(-0x74,-0x171,0x50,-0xed,'Rq^S')][_0x1169a7(0x4cf,'()yV',0x556,0x542,0x450)]('|'),_0x48556f=0x130a+-0xaa*-0x1f+-0x8*0x4f4;while(!![]){switch(_0x4130ab[_0x48556f++]){case'0':_0xe05923[_0x144af6('ZmeE',0xcc,0xf8,0x1ee,0xfb)+_0x5988e3('H6O6',0x254,0x2d7,0x307,0x235)]=_0x26e377[_0x144af6('H8Ps',0x1d1,0x165,0x2b7,0x1e4)](_0x1f627b);continue;case'1':_0xe05923[_0x509bf1(-0x1eb,'tgzc',-0x269,-0x32c,-0x1bd)+_0x2cbbfd(0xc0,0x2b,0x1b7,-0x14,'ze1J')]=_0x27658e[_0x5988e3('Rq^S',0x17a,0x20e,0xf2,0x14b)+_0x1169a7(0x536,'s(6y',0x473,0x5d7,0x44e)][_0x1169a7(0x4a1,'g^Li',0x4c4,0x51e,0x522)](_0x27658e);continue;case'2':var _0x27658e=_0x33dee6[_0x75c249]||_0xe05923;continue;case'3':var _0xe05923=_0x37d80e[_0x509bf1(-0x68,'54m@',-0xad,-0x179,-0xe0)+_0x509bf1(-0x2ea,'ZyBB',-0x26a,-0x256,-0x2da)+'r'][_0x1169a7(0x35c,'B^lk',0x323,0x435,0x359)+_0x144af6('jy*0',0xc3,0x1bd,0x1c3,0x16b)][_0x144af6('!qvL',0x11a,0xf9,0x12e,0x1d9)](_0x1078ab);continue;case'4':_0x9320f5[_0x75c249]=_0xe05923;continue;case'5':var _0x75c249=_0x1b8d0e[_0x4eb8e0];continue;}break;}}}:function(){};return _0xe933ac=![],_0x5e5b17;}};}()),_0x1608d9=_0x5bf8c8(this,function(){function _0x22e7e1(_0x9d5fb6,_0x3fd88a,_0x7750db,_0x1226b2,_0x4e1b7b){return _0x5308(_0x1226b2- -0x38f,_0x9d5fb6);}var _0xaae921={};_0xaae921[_0x1c148b(0x4d7,0x575,'s60)',0x5cd,0x4be)]=_0x1c148b(0x55b,0x521,'ASRb',0x5b4,0x437)+_0x5f07c7(0x1ee,0x2da,0x1fc,'SBpJ',0x13e)+'+$';function _0x5f07c7(_0x138030,_0x871882,_0x500fe8,_0x346a7b,_0x24e146){return _0x5308(_0x500fe8-0x98,_0x346a7b);}function _0xfc934a(_0x6a4d0b,_0x15dc2f,_0x5c1a22,_0x5dfc76,_0x39622e){return _0x5308(_0x6a4d0b- -0xbb,_0x15dc2f);}function _0x3ac458(_0x13cddb,_0x4d10e1,_0x2ff566,_0x5c75c5,_0x271ee5){return _0x5308(_0x4d10e1- -0x3b7,_0x13cddb);}var _0xf88c8c=_0xaae921;function _0x1c148b(_0x1476df,_0x3e0f28,_0x1f09c7,_0x2aa07c,_0x58fc4d){return _0x5308(_0x3e0f28-0x260,_0x1f09c7);}return _0x1608d9[_0xfc934a(0xe5,'()yV',0x33,0xe0,0x1cf)+_0x22e7e1('jy*0',-0x2e7,-0x140,-0x207,-0x11a)]()[_0x1c148b(0x4c3,0x494,'FQTo',0x40c,0x578)+'h'](_0xf88c8c[_0xfc934a(0xf8,'FQTo',0x14f,0x139,0x1a1)])[_0xfc934a(0x65,'tgzc',0x153,0xc,0xc7)+_0x3ac458('ld[d',-0x154,-0x143,-0x22b,-0x134)]()[_0x5f07c7(0x30c,0x1f6,0x2c4,'^Zd*',0x1d1)+_0x1c148b(0x578,0x490,'H8Ps',0x3c1,0x457)+'r'](_0x1608d9)[_0x5f07c7(0x331,0x29a,0x27d,'xC^G',0x327)+'h'](_0xf88c8c[_0x5f07c7(0x157,0xfd,0x1db,'IBwJ',0x2a1)]);});_0x1608d9();var _0x241975=(function(){function _0x42b43d(_0x1e525c,_0x350e2c,_0x2926f3,_0x1affa0,_0x1072df){return _0x5308(_0x1e525c-0x18b,_0x1072df);}function _0x25086e(_0xb861bf,_0x519fd6,_0x5c5131,_0x155812,_0x554560){return _0x5308(_0x554560-0x277,_0xb861bf);}var _0x6d472d={'rZIYR':_0x276b70(0x4d,0x7c,'[S%4',0xe,0x5d)+_0x276b70(0x1c7,0x51,'V!sq',0x58,0x108)+_0xea3bdc('B^lk',0x1d3,0x230,0x2cc,0x233)+_0x276b70(-0x64,0x92,'YFu@',-0x7,-0x47)+_0x276b70(-0x2e,0x36,'hB6@',0x91,0xa2),'GtdIl':_0x276b70(-0x14e,-0x82,'a@zo',-0xe5,-0x86),'cAGwJ':_0x276b70(-0x31,-0x143,'jy*0',0x39,-0x8a)+'t','smHXr':function(_0x8c0f66,_0x30ebf7,_0x554b7c){return _0x8c0f66(_0x30ebf7,_0x554b7c);},'ObeSB':function(_0x26dc28,_0x117833){return _0x26dc28+_0x117833;},'pxCBp':_0x3b80cb(0x202,'s!&4',0x257,0x189,0xc6)+_0x276b70(-0xe8,-0x68,'H6O6',-0xe7,0x18)+_0x25086e('s(6y',0x37c,0x4a2,0x509,0x406),'LXJBL':function(_0x16bd9f,_0x5d4117){return _0x16bd9f===_0x5d4117;},'ymKcI':_0x42b43d(0x309,0x285,0x2d2,0x3e0,'V!sq'),'vIHqz':_0x42b43d(0x31e,0x284,0x365,0x3c1,'s60)'),'gSyav':function(_0x51e1f0,_0x18063d){return _0x51e1f0!==_0x18063d;},'KWFwY':_0x42b43d(0x38a,0x440,0x3fc,0x3e1,'930*'),'toKtM':function(_0x24f6c7,_0x2a66bb){return _0x24f6c7(_0x2a66bb);},'bfGPD':_0xea3bdc('s(6y',0x1b5,0x29c,0x1c8,0x1b1)+_0xea3bdc('RHzk',0x190,0xed,0xe3,0x245)+_0x3b80cb(0x141,'UMtb',0x7b,0xcf,0xea)+_0x42b43d(0x3df,0x4df,0x388,0x3d5,'xC^G'),'CeqwV':_0xea3bdc('*1ha',0x6a,0xf7,0x14,-0x39)+_0x25086e('IBwJ',0x4c6,0x46e,0x408,0x4c2)+_0x42b43d(0x46a,0x3ae,0x526,0x3a4,'WBzB')+_0x42b43d(0x49e,0x422,0x49a,0x494,'RgiR')+_0x25086e('RHzk',0x3f2,0x48c,0x405,0x4f2)+_0x25086e('YFu@',0x404,0x51d,0x346,0x443)+'\x20)','pCPKL':_0x25086e('ZyBB',0x524,0x4f3,0x47e,0x490)};function _0xea3bdc(_0x599552,_0x4f2baa,_0x203784,_0x52bd8a,_0x43ffc2){return _0x5308(_0x4f2baa- -0xf1,_0x599552);}function _0x276b70(_0x3d0ba8,_0x36ee33,_0x141d3e,_0x444b7a,_0xa6f3b4){return _0x5308(_0xa6f3b4- -0x1ec,_0x141d3e);}var _0x129895=!![];function _0x3b80cb(_0x399d77,_0x319e51,_0x48e9e7,_0x5a69c9,_0x1d58e9){return _0x5308(_0x5a69c9- -0xa9,_0x319e51);}return function(_0x4236c9,_0x3ddae0){function _0x87827(_0xdafd9d,_0x2878d7,_0xf3b5d6,_0xc2f344,_0x337239){return _0x276b70(_0xdafd9d-0x1ce,_0x2878d7-0x46,_0xdafd9d,_0xc2f344-0x144,_0xf3b5d6-0x23b);}var _0x3ef0b7={'mEZMZ':_0x6d472d[_0x21bea0(0x167,0x26a,'tgzc',0x2d0,0x23f)],'YmxWO':_0x6d472d[_0x87827('z1XV',0x368,0x34e,0x2f5,0x2ac)],'kyxMI':_0x6d472d[_0x21bea0(0x2a1,0x26f,'OpYQ',0x2c6,0x211)],'PiIMy':function(_0x4269c9,_0x5be65e,_0x585c3f){function _0x74cdf1(_0x45d281,_0x28f92d,_0x5339a6,_0x3fbb89,_0x23314b){return _0x87827(_0x28f92d,_0x28f92d-0x15d,_0x23314b- -0x160,_0x3fbb89-0x17b,_0x23314b-0x74);}return _0x6d472d[_0x74cdf1(-0x56,'tgzc',-0x80,-0xd5,0x1e)](_0x4269c9,_0x5be65e,_0x585c3f);},'bkXjx':function(_0x385ab7,_0x359268){function _0x4433ff(_0x56068f,_0x54ccde,_0x3f59d2,_0x1d37c8,_0x413fba){return _0x21bea0(_0x56068f-0x16d,_0x3f59d2-0x11f,_0x413fba,_0x1d37c8-0x14f,_0x413fba-0x121);}return _0x6d472d[_0x4433ff(0x466,0x3b1,0x390,0x2b1,'SBpJ')](_0x385ab7,_0x359268);},'oCLTX':_0x6d472d[_0x442daa(0x10b,'WBzB',0x1a5,0x1ad,0x5b)],'xPaQJ':function(_0x110e03,_0x4020ac){function _0x58a6d8(_0xd76e7d,_0x4a7583,_0x5869ee,_0x1710f3,_0x3e35b3){return _0x21bea0(_0xd76e7d-0x2a,_0x4a7583- -0x50b,_0x1710f3,_0x1710f3-0x6e,_0x3e35b3-0xe2);}return _0x6d472d[_0x58a6d8(-0x23a,-0x1fe,-0x1b4,'UMtb',-0x280)](_0x110e03,_0x4020ac);},'nHDmH':_0x6d472d[_0xb42a99('zY(A',0x10,0x77,0x28,0xb0)],'OCKJO':_0x6d472d[_0x87827('s(6y',0x27a,0x211,0x2b9,0x133)],'FSCaS':function(_0x5c6dfa,_0x29870f){function _0x49fb59(_0xd0bc16,_0x5ca728,_0x31f03f,_0x12d909,_0x20914b){return _0x442daa(_0x12d909-0x2d7,_0x20914b,_0x31f03f-0xdf,_0x12d909-0x166,_0x20914b-0x6e);}return _0x6d472d[_0x49fb59(0x2f1,0x415,0x426,0x3a1,'ZmeE')](_0x5c6dfa,_0x29870f);},'qYpVr':_0x6d472d[_0xb42a99('FQTo',-0x63,0x18,-0xeb,-0x8f)],'ffOID':function(_0x256fd4,_0x56343e){function _0x4fd6dc(_0x312338,_0x1d5609,_0x511b68,_0x40a4b5,_0x383a1f){return _0xb42a99(_0x511b68,_0x312338-0x311,_0x511b68-0x116,_0x40a4b5-0x17f,_0x383a1f-0x100);}return _0x6d472d[_0x4fd6dc(0x294,0x25d,'ZyBB',0x230,0x352)](_0x256fd4,_0x56343e);},'PTSkN':_0x6d472d[_0x87827('a@zo',0x31e,0x373,0x292,0x468)],'bYdlx':_0x6d472d[_0x21bea0(0x309,0x318,'930*',0x273,0x215)]};function _0x442daa(_0x3137e9,_0x711571,_0x18ecbf,_0x480e2f,_0x2263df){return _0x276b70(_0x3137e9-0x1c8,_0x711571-0xa5,_0x711571,_0x480e2f-0x21,_0x3137e9-0x1c);}function _0x21bea0(_0x574cb1,_0x15508a,_0x44756f,_0x13427a,_0x282ae5){return _0x3b80cb(_0x574cb1-0x1b,_0x44756f,_0x44756f-0xd3,_0x15508a-0x1db,_0x282ae5-0x1ed);}function _0x5a0895(_0x103908,_0x267e98,_0x2b43bc,_0x1211f8,_0x23b801){return _0x276b70(_0x103908-0xeb,_0x267e98-0x58,_0x1211f8,_0x1211f8-0x10,_0x23b801-0x167);}function _0xb42a99(_0x8011ac,_0x3541e9,_0x271c23,_0x9debc5,_0x5372b0){return _0x3b80cb(_0x8011ac-0x177,_0x8011ac,_0x271c23-0xd5,_0x3541e9- -0x264,_0x5372b0-0x1db);}if(_0x6d472d[_0x5a0895(0x18d,0x241,0x157,'WBzB',0x1c0)](_0x6d472d[_0x87827('V!sq',0x132,0x231,0x1e5,0x209)],_0x6d472d[_0xb42a99('UMtb',-0x1b0,-0x204,-0x266,-0xd1)])){var _0x18c123=_0x129895?function(){function _0x4f8820(_0x31ac63,_0x292bc9,_0x3e726f,_0x2db2ca,_0x213228){return _0x87827(_0x31ac63,_0x292bc9-0x1d3,_0x292bc9- -0x1e4,_0x2db2ca-0x15,_0x213228-0x193);}function _0x5ede26(_0x59a0ea,_0x4dc109,_0x449049,_0x5a62c2,_0x235513){return _0x5a0895(_0x59a0ea-0xd,_0x4dc109-0xcb,_0x449049-0x91,_0x449049,_0x4dc109- -0x1c4);}function _0xe2b466(_0x154615,_0x7a9812,_0x4f84e6,_0x11ad7f,_0x86960e){return _0x5a0895(_0x154615-0x1c8,_0x7a9812-0xa2,_0x4f84e6-0x1be,_0x11ad7f,_0x154615- -0x272);}function _0x8de7c2(_0x4b5479,_0x3fd897,_0x333806,_0x209e80,_0x41e13e){return _0xb42a99(_0x209e80,_0x3fd897-0x6ed,_0x333806-0x7f,_0x209e80-0x119,_0x41e13e-0xcd);}function _0x651c3d(_0x12abc1,_0x324add,_0x516743,_0x583bc6,_0xea1378){return _0x442daa(_0x324add- -0x1b3,_0x583bc6,_0x516743-0xd9,_0x583bc6-0x1,_0xea1378-0x13);}if(_0x3ef0b7[_0x651c3d(-0x1b8,-0x141,-0xc1,'930*',-0x162)](_0x3ef0b7[_0x651c3d(-0x24b,-0x248,-0x22a,'zY(A',-0x25e)],_0x3ef0b7[_0x5ede26(-0x18d,-0x90,'s60)',0x3b,0x5e)])){var _0x609e0d={};_0x609e0d[_0xe2b466(-0x60,-0x1a,-0x21,'zY(A',-0x26)]=_0x3ef0b7[_0x8de7c2(0x559,0x62e,0x6e1,'ld[d',0x569)],_0x609e0d[_0x4f8820('RHzk',-0x61,-0x13,-0x21,-0x66)]=_0x3ef0b7[_0xe2b466(-0x80,0x8,0x4,'H8Ps',-0x11)],(_0x401393[_0x651c3d(-0x1b3,-0x113,-0xfa,'zY(A',-0x53)](_0x609e0d),_0x234663[_0x4f8820('s(6y',-0x35,0x8d,0xbb,0x58)](_0x3ef0b7[_0x4f8820('s!&4',0x109,0x37,0xf5,0x1a6)])[_0xe2b466(-0x106,-0x70,-0x93,'SxP0',-0xa)](function(_0x264736){function _0x3e7335(_0x11ec04,_0x332936,_0x3e0cae,_0x3bcb9e,_0x5afe27){return _0x5ede26(_0x11ec04-0x1b7,_0x5afe27-0x5e9,_0x11ec04,_0x3bcb9e-0x1f3,_0x5afe27-0xc5);}_0x264736[_0x3e7335('RHzk',0x61f,0x609,0x58e,0x649)+'s'],0x1317+0x9f*-0x2+-0x11d8;})[_0x5ede26(0x13b,0xbd,'OpYQ',0x1a9,0xe8)](function(_0x342d48){}),_0x3ef0b7[_0x4f8820('UMtb',0x125,0x103,0x140,0x145)](_0x390660,function(){function _0x4f2540(_0x50a90b,_0x51103f,_0x331a7d,_0x58ff30,_0x32897b){return _0xe2b466(_0x58ff30-0x641,_0x51103f-0x171,_0x331a7d-0xc5,_0x51103f,_0x32897b-0x10f);}function _0x46adc3(_0x24747b,_0x5e5530,_0x18484c,_0x279faf,_0x4d8b9d){return _0xe2b466(_0x4d8b9d-0x3f9,_0x5e5530-0xe9,_0x18484c-0xfe,_0x279faf,_0x4d8b9d-0x16f);}function _0x5941d6(_0x5cdc5e,_0x3ba6f7,_0xd7e563,_0x30951f,_0x1f4fb3){return _0x8de7c2(_0x5cdc5e-0x8f,_0xd7e563- -0x752,_0xd7e563-0x56,_0x3ba6f7,_0x1f4fb3-0x139);}return _0x387cae[_0x5941d6(-0xa3,'ZyBB',-0x1a5,-0x1fd,-0x174)+_0x46adc3(0x219,0x1cf,0x2fe,'V!sq',0x275)][_0x4f2540(0x6da,'ze1J',0x517,0x602,0x534)]=_0x8b3b1b;},-0x20b6+0x18e9+0xf9d));}else{if(_0x3ddae0){if(_0x3ef0b7[_0xe2b466(-0x1d1,-0x29f,-0x1d0,'z1XV',-0xd5)](_0x3ef0b7[_0x651c3d(-0xef,-0x1c0,-0xef,'s!&4',-0x1e2)],_0x3ef0b7[_0xe2b466(0x29,0x110,0x11c,'V&[5',0xa4)]))return _0x5f0272[_0xe2b466(-0x79,0x84,-0x36,'WBzB',0x46)+_0x8de7c2(0x6ef,0x67f,0x6a7,'yB2r',0x6a8)][_0x5ede26(-0x27,0x19,'H8Ps',-0x51,0xf8)]=_0x3ef0b7[_0x5ede26(0x135,0x8c,'yB2r',0xfa,-0x1a)](_0x37f95f,_0x3ef0b7[_0xe2b466(-0x1ab,-0x202,-0x2ac,'H8Ps',-0x217)]);else{var _0xa4a6ef=_0x3ddae0[_0x651c3d(-0xe2,-0x99,0x2a,'a@zo',0x54)](_0x4236c9,arguments);return _0x3ddae0=null,_0xa4a6ef;}}}}:function(){};return _0x129895=![],_0x18c123;}else _0x2f3347=_0x3ef0b7[_0x5a0895(0x172,0x1ba,0xc4,'ze1J',0x1be)](_0x4e301f,_0x3ef0b7[_0x87827('RgiR',0x3b1,0x2b8,0x361,0x26d)](_0x3ef0b7[_0x87827('KGqk',0x1d2,0x20d,0x211,0x220)](_0x3ef0b7[_0x21bea0(0x334,0x34d,'B^lk',0x3ae,0x3f3)],_0x3ef0b7[_0x442daa(0x88,'*1ha',-0x78,0xeb,0x161)]),');'))();};}()),_0x2df36f=_0x241975(this,function(){var _0x2825ab={'HFHbw':function(_0x4ed46d,_0x3928e9){return _0x4ed46d(_0x3928e9);},'WoVAu':function(_0x1a701f,_0x234a06){return _0x1a701f+_0x234a06;},'yioDv':_0x1090cc(-0xc0,-0xba,-0xcb,-0xb5,'KGqk')+_0x1090cc(-0x1e2,-0x104,-0x207,-0x48,'g^Li')+_0x1090cc(-0x148,-0x1bc,-0x18b,-0x129,'^Zd*')+_0x39aa17(0xdf,0x5d,0xa9,0x3f,'[S%4'),'QbQXH':_0x39aa17(0x69,-0x111,-0x124,-0x62,'zY(A')+_0x7d3c6a(-0x195,-0x119,-0x1a6,-0xbf,'s(6y')+_0x5427a7(0x15e,0x227,'357j',0x1b5,0x169)+_0x7d3c6a(0x171,0x81,0x19,0x67,'g^Li')+_0x5427a7(0x3a4,0x359,'2[U9',0x27d,0x2a5)+_0x5427a7(0x15c,0x2bc,'yB2r',0x11e,0x1f7)+'\x20)','lPTuQ':function(_0x4c5730,_0x22c40b){return _0x4c5730===_0x22c40b;},'slgcI':_0x5427a7(0x69,0x11d,'!qvL',0x1d7,0x14a),'DpoDk':_0x39aa17(-0x91,0x2a,0x6e,0x60,'Ji*f'),'ZTpjU':_0x3ce859(0x62a,0x5e7,'a@zo',0x5ba,0x538),'wiojW':_0x1090cc(-0x89,-0x166,-0x12d,-0x24e,'H6O6'),'aKYcV':function(_0x58e059,_0x108cca){return _0x58e059(_0x108cca);},'fYgQe':function(_0x1798ff,_0xa741be){return _0x1798ff+_0xa741be;},'pocJB':function(_0x6f5a8f,_0x5d7603){return _0x6f5a8f+_0x5d7603;},'xKQzC':function(_0x161546,_0x505fcb){return _0x161546!==_0x505fcb;},'iNJSA':_0x7d3c6a(-0x137,-0xca,0xa,-0x187,'H6O6'),'aaNaZ':function(_0xe2f76a){return _0xe2f76a();},'XYhJl':_0x39aa17(0x83,-0xe8,-0xa2,-0x15,'tgzc'),'jcToj':_0x7d3c6a(-0x86,-0x43,-0xa0,-0x4f,'s(6y'),'rplGg':_0x5427a7(0x13a,0x1f5,'ZmeE',0x1f8,0x132),'exnbb':_0x39aa17(0x9e,0x105,0x9e,0xff,'3AV('),'fHLNx':_0x39aa17(0xce,0x1b,0xd7,0xa6,'yB2r')+_0x7d3c6a(-0x25,0x40,0xe7,0x3c,'54m@'),'boMUZ':_0x5427a7(0x39c,0x3ac,'UMtb',0x341,0x2d3),'KQpPN':_0x3ce859(0x557,0x438,'ZyBB',0x49a,0x473),'ebQDP':function(_0x3699ad,_0x46d405){return _0x3699ad<_0x46d405;},'tXZio':_0x7d3c6a(-0x174,-0xce,-0x1bc,-0xf,'ASRb'),'gYltB':_0x5427a7(0xbf,0x1c3,'s(6y',0x26b,0x1bf)+_0x3ce859(0x5e0,0x58e,'YFu@',0x5ab,0x57f)+'5'},_0x4969ab=function(){function _0x435f86(_0x27ded4,_0x43a910,_0x448dce,_0x28c8c2,_0x148cb5){return _0x3ce859(_0x27ded4-0x1b8,_0x43a910-0x1ca,_0x43a910,_0x27ded4- -0x55a,_0x148cb5-0x112);}function _0x18969a(_0x362d19,_0x2ec18a,_0x29f251,_0xd822b1,_0x9565a6){return _0x7d3c6a(_0x362d19-0x93,_0x362d19-0x2ab,_0x29f251-0x1b,_0xd822b1-0x3c,_0xd822b1);}var _0x1419ca={'KPiaN':function(_0x1c6306,_0x30bc2e){function _0x4b73be(_0xe1edc8,_0x3e0407,_0x1c9792,_0x31a1b7,_0x4a1852){return _0x5308(_0x3e0407- -0x14a,_0x1c9792);}return _0x2825ab[_0x4b73be(0xab,0x173,'Rq^S',0x211,0x7b)](_0x1c6306,_0x30bc2e);},'FQETU':function(_0x370595,_0x4c27d9){function _0x137463(_0x3ec16e,_0x5f3ed8,_0xd7a059,_0x4075e1,_0x4a7342){return _0x5308(_0x4a7342-0x3d2,_0xd7a059);}return _0x2825ab[_0x137463(0x6af,0x5ef,'V!sq',0x737,0x677)](_0x370595,_0x4c27d9);},'xrglK':_0x2825ab[_0x5af81c(0x15f,0x1a4,0x19b,'2[U9',0xab)],'WdrNs':_0x2825ab[_0x321a3d(0x3a5,0x2ac,'hB6@',0x227,0x2fe)]};function _0x321a3d(_0x31d218,_0x3fe975,_0x2cd5ca,_0x16b040,_0x1458b3){return _0x1090cc(_0x31d218-0x34,_0x3fe975-0x34b,_0x2cd5ca-0x1e7,_0x16b040-0x1e2,_0x2cd5ca);}function _0x5af81c(_0x5509a7,_0x44d905,_0x58e84c,_0x3b24cf,_0x1de3df){return _0x7d3c6a(_0x5509a7-0xd,_0x44d905-0x1d9,_0x58e84c-0x72,_0x3b24cf-0x35,_0x3b24cf);}function _0x4dc61a(_0x365795,_0x5c3b92,_0x1b56aa,_0x26ddd6,_0xf64c9d){return _0x39aa17(_0x365795-0x146,_0x5c3b92-0x41,_0x1b56aa-0x1f3,_0xf64c9d-0x535,_0x365795);}if(_0x2825ab[_0x321a3d(0x25a,0x1dc,'B^lk',0x1f6,0x297)](_0x2825ab[_0x5af81c(0x198,0x174,0x75,'IBwJ',0x1ff)],_0x2825ab[_0x321a3d(0x27c,0x1b9,'z1XV',0x135,0x201)]))_0x25d618=_0x59388d;else{var _0x58ba9c;try{if(_0x2825ab[_0x4dc61a('357j',0x526,0x5e1,0x59d,0x5a5)](_0x2825ab[_0x18969a(0x237,0x1ec,0x17a,'()yV',0x20f)],_0x2825ab[_0x5af81c(0x138,0xf2,0x156,'hB6@',0x171)])){if(_0x43b9ff){var _0x588c07=_0x4396d5[_0x321a3d(0x2f3,0x26d,'OpYQ',0x22a,0x2df)](_0x2b1421,arguments);return _0xc73771=null,_0x588c07;}}else _0x58ba9c=_0x2825ab[_0x5af81c(0x10b,0xc2,0x1b,'s(6y',0x99)](Function,_0x2825ab[_0x321a3d(0xca,0x18a,'q7bz',0x24e,0x246)](_0x2825ab[_0x321a3d(0x37b,0x335,'Rq^S',0x358,0x385)](_0x2825ab[_0x321a3d(0x1b5,0x1ac,'3AV(',0x143,0x1fd)],_0x2825ab[_0x435f86(-0xd,'H8Ps',0xdd,-0x6d,0x28)]),');'))();}catch(_0x30479a){if(_0x2825ab[_0x5af81c(0x290,0x24c,0x220,'IBwJ',0x21c)](_0x2825ab[_0x435f86(-0x60,'FF%U',-0x13b,-0xf5,-0xb9)],_0x2825ab[_0x321a3d(0x196,0x20c,'ZyBB',0x24f,0x2ba)])){var _0x125553;try{_0x125553=_0x1419ca[_0x5af81c(0xd6,0x143,0x88,'WBzB',0x43)](_0xa10d31,_0x1419ca[_0x435f86(-0x9d,'3AV(',-0x120,-0x85,0x63)](_0x1419ca[_0x321a3d(0xd6,0x1c4,'WBzB',0x1a3,0x2b6)](_0x1419ca[_0x4dc61a('Rq^S',0x6d4,0x6f7,0x62b,0x601)],_0x1419ca[_0x18969a(0x2b2,0x36d,0x354,'FF%U',0x390)]),');'))();}catch(_0x41a856){_0x125553=_0x2b90a2;}return _0x125553;}else _0x58ba9c=window;}return _0x58ba9c;}};function _0x7d3c6a(_0x1efd17,_0x4bfe49,_0x297e1d,_0x4861c5,_0x2afb90){return _0x5308(_0x4bfe49- -0x282,_0x2afb90);}function _0x5427a7(_0xf3ced2,_0x1bf7db,_0x47d336,_0x22b804,_0x15c878){return _0x5308(_0x15c878- -0x1b,_0x47d336);}function _0x39aa17(_0x540c69,_0x50ddb1,_0x5969b3,_0x3cba07,_0x225660){return _0x5308(_0x3cba07- -0x1fc,_0x225660);}var _0x119363=_0x2825ab[_0x3ce859(0x48f,0x5b7,'*1ha',0x52b,0x578)](_0x4969ab);function _0x1090cc(_0x3dce6f,_0x3c2dfd,_0x4698db,_0x5b34cd,_0x2ea7d5){return _0x5308(_0x3c2dfd- -0x313,_0x2ea7d5);}var _0xd3d9e4=_0x119363[_0x7d3c6a(0x4b,0x2a,-0xad,0x6f,'H6O6')+'le']=_0x119363[_0x7d3c6a(-0xe3,-0xd6,-0x75,-0x1a3,'tgzc')+'le']||{};function _0x3ce859(_0x4af687,_0x53fd4c,_0x5f1ad5,_0x3321a0,_0x27c1d4){return _0x5308(_0x3321a0-0x340,_0x5f1ad5);}var _0x325aa7=[_0x2825ab[_0x39aa17(-0x164,0x2b,-0x163,-0x68,'()yV')],_0x2825ab[_0x3ce859(0x398,0x48e,'G3Ga',0x469,0x51d)],_0x2825ab[_0x39aa17(0x5c,-0x39,0x95,0xc0,'R6N0')],_0x2825ab[_0x5427a7(0x63,0x151,'s!&4',0x8c,0x155)],_0x2825ab[_0x39aa17(0xd4,0x19,0x149,0xd5,'KGqk')],_0x2825ab[_0x39aa17(-0x130,-0x1e,-0x160,-0xd4,'SBpJ')],_0x2825ab[_0x5427a7(0x3fd,0x33e,'s(6y',0x361,0x2fc)]];for(var _0x341621=-0x1*0x2205+-0x1169*0x1+-0xe3*-0x3a;_0x2825ab[_0x5427a7(0x212,0x2b3,'WBzB',0x263,0x213)](_0x341621,_0x325aa7[_0x7d3c6a(-0xb1,-0x66,0x42,-0x147,'WBzB')+'h']);_0x341621++){if(_0x2825ab[_0x1090cc(0x69,-0x8f,-0xdd,-0xa2,'54m@')](_0x2825ab[_0x39aa17(-0x1e,0x6a,0xe2,0x40,'s!&4')],_0x2825ab[_0x39aa17(0x3e,0x23,0xcf,0xea,'SxP0')])){if(_0x11547a){var _0xfa98f0=_0x2d60e2[_0x5427a7(0x50,0x1fa,'jy*0',0x5f,0x154)](_0xd9e18f,arguments);return _0x199eb6=null,_0xfa98f0;}}else{var _0x42803f=_0x2825ab[_0x7d3c6a(0x60,-0x22,-0x92,-0x4f,'H6O6')][_0x1090cc(-0x17c,-0x1a6,-0x1fe,-0x266,'2[U9')]('|'),_0x5521ee=0x1d7b+0xbca*0x1+-0x2945;while(!![]){switch(_0x42803f[_0x5521ee++]){case'0':var _0x11f4e6=_0xd3d9e4[_0x1731af]||_0x365e89;continue;case'1':var _0x365e89=_0x241975[_0x1090cc(-0x184,-0xc0,-0x7b,-0x16f,'q7bz')+_0x39aa17(0xb7,0xd0,0x1f0,0x120,'xC^G')+'r'][_0x3ce859(0x5df,0x5bb,'g^Li',0x50a,0x41d)+_0x5427a7(0x25b,0x277,'2[U9',0x34e,0x278)][_0x3ce859(0x573,0x540,'yB2r',0x4fc,0x499)](_0x241975);continue;case'2':var _0x1731af=_0x325aa7[_0x341621];continue;case'3':_0x365e89[_0x5427a7(0xb6,0x1e3,'z1XV',0x265,0x1b6)+_0x1090cc(0x1d,-0x68,-0x163,-0x12c,'s(6y')]=_0x241975[_0x5427a7(0x278,0x226,'ASRb',0x11a,0x1d2)](_0x241975);continue;case'4':_0x365e89[_0x5427a7(0x2fd,0x358,'G3Ga',0x328,0x308)+_0x7d3c6a(-0x59,-0x5e,-0x23,0x60,'^Zd*')]=_0x11f4e6[_0x5427a7(0x1a1,0x235,'SxP0',0x177,0x1e2)+_0x1090cc(-0xaf,-0xcc,-0x113,-0x182,'UMtb')][_0x1090cc(-0x1ab,-0xe8,-0x176,-0x6a,'H6O6')](_0x11f4e6);continue;case'5':_0xd3d9e4[_0x1731af]=_0x365e89;continue;}break;}}}});function _0x2b7fb5(_0x5b7eef,_0x8436e4,_0x4d1c18,_0x2130d6,_0x552dc2){return _0x5308(_0x4d1c18- -0x91,_0x5b7eef);}function _0x5308(_0x57fc53,_0x56c0f8){var _0x4028a9=_0x4192();return _0x5308=function(_0xf03698,_0x4745a1){_0xf03698=_0xf03698-(-0x1*-0x2473+-0xb3d+0x1*-0x1817);var _0x5d7198=_0x4028a9[_0xf03698];if(_0x5308['cwOdzu']===undefined){var _0x17c486=function(_0x51631e){var _0x5492e7='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/=';var _0xd8becc='',_0x1426a8='',_0x6effed=_0xd8becc+_0x17c486;for(var _0x5e06b2=0x1505*-0x1+0x2448+-0xf43*0x1,_0x244951,_0x1a4af4,_0x4efd9f=0x1*-0x13a+0x1*0x2453+-0x5*0x705;_0x1a4af4=_0x51631e['charAt'](_0x4efd9f++);~_0x1a4af4&&(_0x244951=_0x5e06b2%(-0x6e6+-0xb*0xe2+0x130*0xe)?_0x244951*(0xed*-0x11+-0x1*0x1529+0x2526)+_0x1a4af4:_0x1a4af4,_0x5e06b2++%(0x1c42+0x1ca5+-0x38e3))?_0xd8becc+=_0x6effed['charCodeAt'](_0x4efd9f+(0x4*-0x53+-0x1*0x18e0+0x1a36))-(-0x1215+-0xa5d*-0x1+0x6*0x14b)!==-0x26cc+-0x1a*-0xec+0xed4?String['fromCharCode'](-0xed*-0x25+-0x1e76*-0x1+-0x3fb8&_0x244951>>(-(-0xac6+-0x2114+0x1*0x2bdc)*_0x5e06b2&0x1a7*0x6+-0x4a3*-0x6+-0x25b6)):_0x5e06b2:-0x1d22+0x295*0x2+0x3b*0x68){_0x1a4af4=_0x5492e7['indexOf'](_0x1a4af4);}for(var _0x150f71=-0x1*-0x25d+0x1ba3+-0x1e00,_0x23a058=_0xd8becc['length'];_0x150f71<_0x23a058;_0x150f71++){_0x1426a8+='%'+('00'+_0xd8becc['charCodeAt'](_0x150f71)['toString'](-0x1c83+-0x1*-0x2263+-0x2*0x2e8))['slice'](-(0x3*-0x923+0x257c+-0xa11));}return decodeURIComponent(_0x1426a8);};var _0x4a2b4e=function(_0x2b8ea7,_0x14bda6){var _0x10df76=[],_0x92ca24=-0x361+-0x29*0x97+0x1b90,_0x2870bd,_0x436376='';_0x2b8ea7=_0x17c486(_0x2b8ea7);var _0x14f275;for(_0x14f275=0x18fd+0x4f9+0xd*-0x24e;_0x14f275<0x203c+0xe51+0x17*-0x1fb;_0x14f275++){_0x10df76[_0x14f275]=_0x14f275;}for(_0x14f275=0x1a29+0x6af+-0x20d8*0x1;_0x14f275<-0x736+0xb4*-0x13+0x1592;_0x14f275++){_0x92ca24=(_0x92ca24+_0x10df76[_0x14f275]+_0x14bda6['charCodeAt'](_0x14f275%_0x14bda6['length']))%(0x5*-0x6d7+0x1988+0x9ab),_0x2870bd=_0x10df76[_0x14f275],_0x10df76[_0x14f275]=_0x10df76[_0x92ca24],_0x10df76[_0x92ca24]=_0x2870bd;}_0x14f275=0x7*-0x3d1+0x21a0+-0x1*0x6e9,_0x92ca24=0x157e+0xf*0x7b+-0x1cb3;for(var _0x40cf54=0xb9*0x5+0x37c+-0x719*0x1;_0x40cf54<_0x2b8ea7['length'];_0x40cf54++){_0x14f275=(_0x14f275+(0x2081+0x240d+-0x448d))%(-0x1649+0xeb*0x1f+-0x2*0x296),_0x92ca24=(_0x92ca24+_0x10df76[_0x14f275])%(0xa0f*-0x1+0x315*0x7+0x2*-0x542),_0x2870bd=_0x10df76[_0x14f275],_0x10df76[_0x14f275]=_0x10df76[_0x92ca24],_0x10df76[_0x92ca24]=_0x2870bd,_0x436376+=String['fromCharCode'](_0x2b8ea7['charCodeAt'](_0x40cf54)^_0x10df76[(_0x10df76[_0x14f275]+_0x10df76[_0x92ca24])%(-0x1bf0+0xe*0x176+0x87c)]);}return _0x436376;};_0x5308['nyQEJu']=_0x4a2b4e,_0x57fc53=arguments,_0x5308['cwOdzu']=!![];}var _0x3fc5f3=_0x4028a9[-0x3*-0x2bd+0x10*0x149+0x1cc7*-0x1],_0x34282d=_0xf03698+_0x3fc5f3,_0x37a152=_0x57fc53[_0x34282d];if(!_0x37a152){if(_0x5308['hKXSNY']===undefined){var _0x328868=function(_0x2f7d5b){this['fvLHOJ']=_0x2f7d5b,this['IgiFdQ']=[0x1544*0x1+-0x7e2+-0x19*0x89,0x7a*-0x1+-0x23db+0x2455,-0x991+-0x26*-0x5f+-0x1*0x489],this['duuWpD']=function(){return'newState';},this['UcntrS']='\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*',this['RXsckm']='[\x27|\x22].+[\x27|\x22];?\x20*}';};_0x328868['prototype']['qRXPgj']=function(){var _0x3895c8=new RegExp(this['UcntrS']+this['RXsckm']),_0x1adcb0=_0x3895c8['test'](this['duuWpD']['toString']())?--this['IgiFdQ'][0x26fa+-0x1535+0xc*-0x17b]:--this['IgiFdQ'][-0x22fc*-0x1+0x26b6+-0x49b2];return this['USyDUk'](_0x1adcb0);},_0x328868['prototype']['USyDUk']=function(_0x3bf811){if(!Boolean(~_0x3bf811))return _0x3bf811;return this['MJFhBK'](this['fvLHOJ']);},_0x328868['prototype']['MJFhBK']=function(_0x4ae6ce){for(var _0x2e5ad2=0x1f*-0x75+-0xf52+-0x1*-0x1d7d,_0x481ebb=this['IgiFdQ']['length'];_0x2e5ad2<_0x481ebb;_0x2e5ad2++){this['IgiFdQ']['push'](Math['round'](Math['random']())),_0x481ebb=this['IgiFdQ']['length'];}return _0x4ae6ce(this['IgiFdQ'][-0x64d*-0x4+0xc6b+-0x259f*0x1]);},new _0x328868(_0x5308)['qRXPgj'](),_0x5308['hKXSNY']=!![];}_0x5d7198=_0x5308['nyQEJu'](_0x5d7198,_0x4745a1),_0x57fc53[_0x34282d]=_0x5d7198;}else _0x5d7198=_0x37a152;return _0x5d7198;},_0x5308(_0x57fc53,_0x56c0f8);}_0x2df36f();var t=this;return m(i['a'][_0x2b7fb5('FF%U',0xa,0xc5,0x165,0x8a)](function e(){function _0x13ebef(_0x40f6f3,_0x4dd328,_0x5020c9,_0x3c88be,_0x410f16){return _0x2b7fb5(_0x3c88be,_0x4dd328-0x11,_0x40f6f3- -0x1ed,_0x3c88be-0x18b,_0x410f16-0x3b);}var _0x3cacd4={'ojkzk':function(_0x25d263,_0x184ace){return _0x25d263===_0x184ace;},'gwuln':_0x37181b(0x396,0x2a3,0x429,0x32f,'!qvL'),'YqsyO':_0x37181b(0x439,0x364,0x341,0x404,'R6N0'),'zcbrR':function(_0x51bb18,_0x35b10b){return _0x51bb18+_0x35b10b;},'stiNH':_0x37181b(0x3ac,0x545,0x555,0x4a4,'Rq^S')+_0x37181b(0x2eb,0x3f0,0x2e2,0x3b8,'H6O6')+_0x2837b8(-0x3ba,-0x2f6,-0x2b6,'ZmeE',-0x2b9),'sTDUv':_0x44b9a9(0x4ec,0x3d9,'s!&4',0x582,0x4a9),'JHCrX':_0x4fe7d2('^Zd*',0x5e9,0x660,0x5c8,0x57b),'bFekA':function(_0x3d8708,_0x3aeb98){return _0x3d8708!==_0x3aeb98;},'QCzeU':_0x13ebef(0x1b,0x6f,0x19,'s!&4',0x10e),'oyukl':_0x37181b(0x3a5,0x345,0x397,0x3a8,'54m@'),'COAuN':_0x2837b8(-0x1cf,-0x22d,-0x139,'RHzk',-0x40),'yUoDp':_0x44b9a9(0x419,0x2cd,'WBzB',0x42e,0x391),'pNXzD':_0x44b9a9(0x3fc,0x426,'V!sq',0x435,0x39c)+_0x4fe7d2('yB2r',0x439,0x409,0x443,0x51d)+_0x4fe7d2('FQTo',0x5cd,0x5d6,0x62f,0x57c)+_0x44b9a9(0x3da,0x3a0,'jy*0',0x3eb,0x3e3)+_0x37181b(0x28d,0x2ff,0x23e,0x33d,'3AV('),'AkoyM':_0x4fe7d2('xC^G',0x611,0x6d0,0x643,0x6a1),'ZIFGs':_0x37181b(0x52a,0x4bf,0x50b,0x4ab,'RHzk')+'t','ZYsTm':function(_0x5b9678,_0x1fb5c2,_0x14bc81){return _0x5b9678(_0x1fb5c2,_0x14bc81);},'bIpOh':_0x13ebef(-0xb9,-0x17c,-0x1aa,'WBzB',-0x11d)+_0x44b9a9(0x4dd,0x4ee,'a@zo',0x4d6,0x4b5)+'+$','SUyzD':_0x13ebef(-0xd8,-0x137,0x2c,'()yV',-0x1c7)+_0x44b9a9(0x4ad,0x471,'3AV(',0x323,0x3eb)+_0x2837b8(-0x2a7,-0x17b,-0x1ca,'z1XV',-0x2c8)+_0x13ebef(-0xb,-0xa4,-0xc3,'Ji*f',-0x8c),'mAUlE':function(_0x945370,_0x5750c9){return _0x945370+_0x5750c9;},'HcmFZ':_0x37181b(0x291,0x3d6,0x27c,0x32e,'357j')+_0x4fe7d2('ZyBB',0x5c5,0x6c1,0x53f,0x5c2)+_0x4fe7d2('a@zo',0x500,0x470,0x40c,0x4e3)+_0x13ebef(-0x94,-0x17a,-0x1c,'54m@',-0x5c)+_0x44b9a9(0x46b,0x3c1,'ASRb',0x45f,0x432)+'s','LFqPN':function(_0x3a96f4,_0x1976b9){return _0x3a96f4+_0x1976b9;},'HOYgE':_0x44b9a9(0x281,0x24a,'KGqk',0x1fa,0x2d2)+_0x2837b8(-0x1d8,-0x16c,-0x123,'tgzc',-0xe0)+_0x37181b(0x4cc,0x3fb,0x4f0,0x431,'a@zo')+_0x44b9a9(0x2cc,0x2ab,'ZmeE',0x33b,0x35c)+_0x44b9a9(0x438,0x398,'V&[5',0x422,0x3cc),'bvLGo':function(_0x7d7b94,_0x88c728){return _0x7d7b94+_0x88c728;},'ecwtC':_0x13ebef(-0xa2,-0x51,-0xcd,'H6O6',-0x66)+_0x4fe7d2('WBzB',0x547,0x4a0,0x504,0x472)+_0x2837b8(-0x20a,-0x30c,-0x2bc,'G3Ga',-0x2e8)+_0x37181b(0x422,0x4f3,0x3a9,0x465,'zY(A')+_0x13ebef(0xe,-0x39,0xba,'54m@',0xec)+'s','HneoN':_0x13ebef(0x92,0xbc,0x2e,'RgiR',0x53)+_0x44b9a9(0x35d,0x47a,'B^lk',0x470,0x38a)+_0x44b9a9(0x420,0x327,'54m@',0x32b,0x376)+_0x13ebef(-0x148,-0x115,-0x1dc,'SxP0',-0x161)+_0x13ebef(0x82,-0x4f,0xf3,'FQTo',-0x61)+_0x4fe7d2('G3Ga',0x455,0x50c,0x4d2,0x4df)+_0x44b9a9(0x394,0x37b,'q7bz',0x50d,0x40c)+_0x13ebef(-0x15a,-0x98,-0x16f,'SBpJ',-0x105),'vkpai':function(_0x1547cb,_0x294282){return _0x1547cb+_0x294282;},'FYWbr':_0x37181b(0x2fa,0x432,0x41c,0x342,'54m@')+_0x13ebef(0x64,0x60,0xe9,'G3Ga',0x89)+_0x37181b(0x3c7,0x2a2,0x3b2,0x38d,'RHzk')+_0x4fe7d2('Rq^S',0x5fc,0x652,0x59e,0x529)+_0x13ebef(-0xf3,-0xe8,-0x17c,'()yV',-0xd4)+_0x13ebef(-0x8e,-0x187,-0x161,'ld[d',-0x124),'iouiu':_0x37181b(0x3a8,0x329,0x3fc,0x342,'54m@')+_0x4fe7d2('R%x&',0x5d4,0x57b,0x6bd,0x5e7)+_0x13ebef(0x71,-0x51,-0x26,'V&[5',0xb4)+_0x4fe7d2('xC^G',0x448,0x38c,0x413,0x45d)+_0x37181b(0x3c1,0x3cc,0x374,0x433,'!qvL')+_0x2837b8(-0x21b,-0x2a7,-0x273,'*1ha',-0x19d)+'s','PRpnl':_0x13ebef(-0x21,-0xab,-0x2e,'OpYQ',0x1e)+_0x4fe7d2('B^lk',0x4a2,0x50c,0x4b5,0x560)+_0x2837b8(-0x1e7,-0x1c6,-0x27e,'ASRb',-0x2be)+_0x37181b(0x58f,0x3e4,0x4ce,0x49f,'zY(A')+_0x44b9a9(0x50f,0x488,'YFu@',0x456,0x461)+_0x2837b8(-0xab,-0x108,-0x145,'Ji*f',-0xea)+'rs','MYruX':function(_0x5a65d9,_0x120444){return _0x5a65d9+_0x120444;},'PrWHl':function(_0xb7d9b4,_0x5884d1){return _0xb7d9b4+_0x5884d1;},'XDpLj':_0x13ebef(-0x11f,-0x12b,-0x20,'hB6@',-0x67)+_0x13ebef(-0x36,0x33,-0xbd,'yB2r',0x36),'fjFzn':_0x13ebef(-0x1d,0x6a,0x9c,'Ji*f',0x16)+_0x4fe7d2('WBzB',0x5c9,0x6c2,0x552,0x67e)+_0x44b9a9(0x456,0x460,'YFu@',0x532,0x481)+_0x13ebef(-0x10,-0x8b,-0x16,'[S%4',0x56)+_0x2837b8(-0x299,-0x197,-0x261,'V!sq',-0x211)+_0x4fe7d2('hB6@',0x488,0x408,0x573,0x47e)+_0x2837b8(-0xee,-0x1df,-0x13b,'V!sq',-0xd5)+_0x2837b8(-0x13d,-0xd9,-0x119,'ZmeE',-0x18d)+_0x13ebef(-0x140,-0xff,-0x8d,'R%x&',-0x1db),'kcRsE':_0x4fe7d2('RHzk',0x431,0x34d,0x3d6,0x46c),'NbrqA':_0x13ebef(0x29,0xb2,-0x22,'xC^G',-0x3d),'qeQmI':_0x13ebef(-0x41,0xbc,-0xba,'FQTo',-0x82)+_0x4fe7d2('jy*0',0x4b6,0x4fd,0x523,0x473)+_0x13ebef(-0x149,-0xa6,-0xe0,'ZyBB',-0x100)+_0x2837b8(-0xb3,-0xff,-0x15b,'SxP0',-0xff)+_0x13ebef(0xa1,-0x18,0x184,'hB6@',0x2c)+_0x37181b(0x3e8,0x517,0x416,0x4d6,'q7bz')+'al','whWui':_0x37181b(0x2a7,0x3c0,0x3b0,0x339,'xC^G')+_0x13ebef(-0x144,-0xf2,-0x4e,'Rq^S',-0x1a7)+_0x44b9a9(0x39d,0x38c,'zY(A',0x3db,0x344)+_0x13ebef(0x9c,0xc0,-0x60,'RHzk',-0x33)+_0x44b9a9(0x3fc,0x4d9,'V&[5',0x3ff,0x425)+_0x13ebef(-0x12e,-0x220,-0xb8,'H6O6',-0x1ca)+_0x2837b8(-0x208,-0x195,-0x232,'ze1J',-0x19f)+_0x44b9a9(0x40a,0x27d,'WBzB',0x399,0x310)+_0x44b9a9(0x2bc,0x3d7,'RHzk',0x2a0,0x354)+_0x13ebef(-0xf4,-0xc2,-0xef,'ZyBB',-0x102),'qZRdx':function(_0x9f3d43,_0x39c554){return _0x9f3d43!=_0x39c554;},'fLYZv':function(_0x383d4b,_0x5a19de){return _0x383d4b!==_0x5a19de;},'CnlDm':_0x44b9a9(0x358,0x38a,'tgzc',0x3ac,0x314),'cpXHq':_0x2837b8(-0x1ad,-0x21e,-0x1d0,'*1ha',-0x1bb)+_0x44b9a9(0x306,0x2df,'SxP0',0x3cb,0x37d)+_0x37181b(0x586,0x553,0x57b,0x4be,'2[U9')+_0x13ebef(-0x134,-0x135,-0x122,'*1ha',-0x18e)+_0x2837b8(-0x202,-0x1f0,-0x1c2,'[S%4',-0x190)+_0x37181b(0x4a0,0x322,0x4c3,0x41c,'R%x&')+_0x37181b(0x4cc,0x3f5,0x4fa,0x46f,'Rq^S')+_0x2837b8(-0x294,-0x17a,-0x224,'V&[5',-0x13a)+_0x37181b(0x444,0x30c,0x3fd,0x351,'OpYQ')+_0x13ebef(-0x6a,0x96,-0x123,'q7bz',-0x119)+_0x13ebef(-0x9f,0x16,0x4d,'*1ha',0x57),'KiImY':function(_0x181ad4,_0x5661f8,_0x4a6723){return _0x181ad4(_0x5661f8,_0x4a6723);},'VHDuB':_0x4fe7d2('xC^G',0x608,0x5e2,0x53b,0x66c)+'n','KSPCg':function(_0x52bc43,_0x47652c){return _0x52bc43+_0x47652c;},'vrFvF':_0x2837b8(-0x1b5,-0x13b,-0x1d3,'OpYQ',-0x254)+'r\x20','hMOCO':_0x2837b8(-0x147,-0xf4,-0xff,'tgzc',-0x109)};function _0x4fe7d2(_0x3d76b1,_0x5421dc,_0x180081,_0x90f690,_0x14c7c3){return _0x2b7fb5(_0x3d76b1,_0x5421dc-0x1c7,_0x5421dc-0x397,_0x90f690-0x65,_0x14c7c3-0xce);}var _0x51bb8e,_0x36b98b,_0x57bd72,_0x293620,_0x4ef059;function _0x2837b8(_0x75e7c3,_0x17175c,_0x15cf1d,_0x79241e,_0x3f96d5){return _0x2b7fb5(_0x79241e,_0x17175c-0xd2,_0x15cf1d- -0x357,_0x79241e-0xb8,_0x3f96d5-0x1a3);}function _0x37181b(_0x1681df,_0x166155,_0x1b6b86,_0x20dd91,_0x1c234e){return _0x2b7fb5(_0x1c234e,_0x166155-0x87,_0x20dd91-0x245,_0x20dd91-0x70,_0x1c234e-0x117);}function _0x44b9a9(_0x2bcbb7,_0x597fb7,_0x3d0232,_0x506589,_0x357f56){return _0x2b7fb5(_0x3d0232,_0x597fb7-0x190,_0x357f56-0x23e,_0x506589-0x19b,_0x357f56-0x43);}return i['a'][_0x2837b8(-0xbb,-0x54,-0xd7,'s(6y',-0x45)](function(_0x474efa){function _0x418f2e(_0x537aff,_0x2510a8,_0x1b9638,_0x1efd63,_0x1de73e){return _0x13ebef(_0x1b9638- -0x14d,_0x2510a8-0x183,_0x1b9638-0x4a,_0x1de73e,_0x1de73e-0x1a6);}var _0x9a9116={};function _0x39af66(_0x55cf9b,_0x35425b,_0x122adc,_0x591322,_0x583026){return _0x13ebef(_0x55cf9b- -0x12e,_0x35425b-0x6f,_0x122adc-0x6f,_0x122adc,_0x583026-0xbf);}_0x9a9116[_0x39af66(-0x1a0,-0x19b,'H6O6',-0x125,-0xf3)]=_0x3cacd4[_0x582196(-0xd5,'UMtb',-0x1d0,-0x128,-0x1a9)];function _0x18c05c(_0x86cbba,_0x92c209,_0x3b8404,_0x4b2655,_0x20ed2b){return _0x44b9a9(_0x86cbba-0x130,_0x92c209-0x1a,_0x4b2655,_0x4b2655-0x82,_0x3b8404-0x61);}function _0x276beb(_0x3ab475,_0x24e4db,_0x54b35,_0x45c846,_0x39bacc){return _0x4fe7d2(_0x54b35,_0x24e4db- -0xff,_0x54b35-0xf5,_0x45c846-0x15c,_0x39bacc-0x5a);}function _0x582196(_0x1f86ec,_0x377ed1,_0x5e4c8c,_0x7f860b,_0x3bcf62){return _0x2837b8(_0x1f86ec-0x18e,_0x377ed1-0x64,_0x5e4c8c-0xa7,_0x377ed1,_0x3bcf62-0x160);}var _0x154f9e=_0x9a9116;for(;;)switch(_0x474efa[_0x39af66(-0x257,-0x2a1,'s60)',-0x288,-0x2d2)]=_0x474efa[_0x39af66(-0x160,-0x18d,'RgiR',-0x249,-0x25f)]){case-0x180+0x5*0x392+-0x12b*0xe:return _0x474efa[_0x18c05c(0x358,0x358,0x435,'z1XV',0x539)]=0xf2+-0x197d+0x188d,axios[_0x276beb(0x31c,0x3a5,'H8Ps',0x2e3,0x326)](_0x3cacd4[_0x276beb(0x39b,0x352,'s(6y',0x3d4,0x2ef)](url,_0x3cacd4[_0x39af66(-0x189,-0xdd,'g^Li',-0x190,-0x158)]));case 0x1f0e+-0x5c0+-0x194c*0x1:return _0x51bb8e=_0x474efa[_0x18c05c(0x45b,0x518,0x48e,'g^Li',0x435)],t[_0x18c05c(0x43b,0x4c2,0x4eb,'357j',0x510)+'s']=_0x51bb8e[_0x39af66(-0x273,-0x1c2,'SxP0',-0x2b1,-0x24d)],_0x474efa[_0x276beb(0x438,0x428,'s60)',0x3e4,0x388)]=-0x16b6+-0x1f2b+-0x35e7*-0x1,axios[_0x582196(-0x1a1,'WBzB',-0xcc,-0xb6,-0x146)](_0x3cacd4[_0x582196(-0x102,'ASRb',-0x196,-0x1cc,-0x1eb)](url,_0x3cacd4[_0x582196(-0x207,'xC^G',-0x176,-0x76,-0x120)]));case-0x332*0x4+-0x8d*-0x3a+0x7*-0x2bc:return _0x51bb8e=_0x474efa[_0x582196(-0x19c,'^Zd*',-0x14a,-0x12d,-0x104)],t[_0x276beb(0x5b7,0x4d9,'^Zd*',0x53d,0x450)+'rs']=_0x51bb8e[_0x39af66(-0x16c,-0x12c,'a@zo',-0x1ae,-0xb4)],_0x474efa[_0x39af66(-0x156,-0x18a,'tgzc',-0x250,-0x13d)]=0x2*-0x685+-0x2041+0x2d55,axios[_0x39af66(-0xf6,-0x16d,'ze1J',-0xcc,-0x175)](_0x3cacd4[_0x582196(-0x1ed,'ZyBB',-0x1e8,-0x13c,-0x19a)](url,_0x3cacd4[_0x39af66(-0x268,-0x1d8,'z1XV',-0x2a0,-0x222)]));case-0x396*-0x1+0x5a*-0x13+0x322:return _0x51bb8e=_0x474efa[_0x276beb(0x2f9,0x398,'KGqk',0x3ea,0x2e6)],t[_0x582196(-0x194,'B^lk',-0x119,-0x83,-0x8f)+'ns']=_0x51bb8e[_0x276beb(0x436,0x40d,'RgiR',0x3a3,0x4c8)],_0x474efa[_0x418f2e(-0xbe,-0x3b,-0xa6,-0x158,'zY(A')]=-0x7*0x513+0x1cef+0x6a4,axios[_0x582196(-0x99,'ZmeE',-0x13a,-0x12e,-0x223)](_0x3cacd4[_0x418f2e(-0x15d,-0x1fd,-0x1fc,-0x1d9,'Ji*f')](url,_0x3cacd4[_0x276beb(0x412,0x40f,'FF%U',0x41c,0x394)]));case 0x225b+-0x5*-0x36e+0x1*-0x3373:return _0x51bb8e=_0x474efa[_0x418f2e(-0x251,-0x2ad,-0x22c,-0x324,'yB2r')],t[_0x582196(0x8,'()yV',-0x68,-0x14b,-0x85)+'rs']=_0x51bb8e[_0x276beb(0x395,0x340,'SxP0',0x360,0x30a)],_0x474efa[_0x39af66(-0x11a,-0x85,'YFu@',-0x70,-0xb5)]=0x1bae+-0x15e1+-0x5bb*0x1,axios[_0x418f2e(-0x1c9,-0x14a,-0x1fd,-0x1bf,'SBpJ')](_0x3cacd4[_0x582196(0x1d,'Ji*f',-0x4e,-0x33,-0x38)](url,_0x3cacd4[_0x582196(-0x168,'ld[d',-0x200,-0x125,-0x1ca)]));case-0x14*-0x17b+0x3*0xa9d+-0x3d61:return _0x51bb8e=_0x474efa[_0x276beb(0x5aa,0x4d0,'tgzc',0x5c7,0x526)],t[_0x418f2e(-0x131,-0x4d,-0x14f,-0x148,'YFu@')+_0x276beb(0x44e,0x3ef,'xC^G',0x48a,0x4b1)]=_0x51bb8e[_0x276beb(0x41f,0x430,'ASRb',0x509,0x3b2)],_0x474efa[_0x582196(-0xcb,'Rq^S',-0x8f,-0x17d,-0xe5)]=0x646*0x4+-0x8b*0x1+-0x1877*0x1,axios[_0x276beb(0x42f,0x3fc,'B^lk',0x458,0x4de)](_0x3cacd4[_0x418f2e(-0x1ad,-0x17c,-0x17c,-0xe6,'R6N0')](url,_0x3cacd4[_0x276beb(0x2ed,0x3de,'hB6@',0x3dc,0x47a)]));case 0x1*-0x1de7+-0xac6+-0x28c3*-0x1:return _0x51bb8e=_0x474efa[_0x582196(-0x25,'[S%4',-0xb9,-0x104,-0xcb)],t[_0x418f2e(-0xb4,-0x177,-0x15e,-0x244,'q7bz')+_0x18c05c(0x364,0x305,0x331,'xC^G',0x2ee)+'t']=_0x51bb8e[_0x418f2e(-0x269,-0x278,-0x1cd,-0x10e,'3AV(')][_0x418f2e(-0x1f0,-0x1d2,-0x130,-0x94,'q7bz')],_0x474efa[_0x418f2e(-0x139,-0x232,-0x139,-0x216,'YFu@')]=0x2422+0x23ed+-0x47f5,axios[_0x39af66(-0x17b,-0x203,'yB2r',-0x79,-0x210)](_0x3cacd4[_0x39af66(-0x1be,-0x1a1,'*1ha',-0x1f3,-0x1bd)](url,_0x3cacd4[_0x418f2e(-0xe1,-0x279,-0x1ca,-0x272,'G3Ga')]));case-0x657+-0xe75*0x2+0x235b:return _0x51bb8e=_0x474efa[_0x39af66(-0x14e,-0x23f,'SxP0',-0x71,-0x236)],t[_0x39af66(-0x22c,-0x138,'yB2r',-0x2ef,-0x198)+_0x39af66(-0xdf,-0xd,'FQTo',-0x7e,-0x100)+_0x418f2e(-0x1fe,-0x252,-0x223,-0x2e5,'357j')]=_0x51bb8e[_0x418f2e(-0xb6,-0x12b,-0x167,-0x160,'FF%U')],_0x474efa[_0x18c05c(0x4a4,0x3c8,0x42e,'^Zd*',0x47c)]=0x1*-0x30+-0x1080+-0x1*-0x10ce,axios[_0x582196(0xa6,'ld[d',-0x5a,-0x154,-0x41)](_0x3cacd4[_0x276beb(0x309,0x3bc,'Ji*f',0x4b5,0x477)](url,_0x3cacd4[_0x39af66(-0x15b,-0x164,'V&[5',-0x1cf,-0x79)]));case-0x2*-0x8f5+-0x33*-0xb9+0x11*-0x337:return _0x51bb8e=_0x474efa[_0x276beb(0x28a,0x343,'357j',0x250,0x3b7)],t[_0x418f2e(-0xbd,-0xdc,-0x1b8,-0x254,'hB6@')+_0x276beb(0x49e,0x3fa,'ZmeE',0x441,0x310)]=_0x51bb8e[_0x418f2e(-0x240,-0x23e,-0x292,-0x2b2,'SxP0')],_0x474efa[_0x39af66(-0x9a,-0x1,'z1XV',-0x10a,-0x9e)]=-0x25*-0x105+-0x1*0x1bcc+0x9cd*-0x1,t[_0x39af66(-0x27e,-0x26d,'ze1J',-0x2da,-0x1fd)+_0x18c05c(0x580,0x429,0x4c5,'jy*0',0x4ff)][_0x39af66(-0x17f,-0x178,'a@zo',-0xb8,-0x1d6)]=t[_0x18c05c(0x3a3,0x498,0x3a3,'zY(A',0x431)+_0x39af66(-0x1e5,-0x10b,'()yV',-0x107,-0x10c)][_0x276beb(0x514,0x4d3,'z1XV',0x5be,0x50d)+_0x276beb(0x347,0x429,'*1ha',0x4e0,0x3a2)+'ey'],t[_0x18c05c(0x3fc,0x3a9,0x3ec,'a@zo',0x3d9)+_0x582196(-0xaf,'FQTo',-0x198,-0xb8,-0x19d)][_0x18c05c(0x4f5,0x3c3,0x4a2,'RgiR',0x54a)+'ge']=_0x3cacd4[_0x276beb(0x4bc,0x421,'FF%U',0x399,0x3de)](_0x3cacd4[_0x418f2e(-0x1f3,-0x18b,-0x21a,-0x2eb,'G3Ga')](url,_0x3cacd4[_0x18c05c(0x485,0x505,0x495,'s60)',0x536)]),t[_0x18c05c(0x598,0x595,0x4ef,'UMtb',0x3f0)]),_0x474efa[_0x18c05c(0x386,0x432,0x464,'tgzc',0x479)]=-0x73*-0x11+-0xd*0x298+0x9*0x2ea,http[_0x418f2e(-0x191,-0x304,-0x229,-0x175,'^Zd*')](_0x3cacd4[_0x276beb(0x3ae,0x40c,'s(6y',0x4ea,0x49f)],t[_0x276beb(0x4a9,0x510,'s60)',0x531,0x4b7)+_0x276beb(0x3f3,0x3c8,'SBpJ',0x46b,0x3fc)]);case 0x7a7+-0x2d3*-0x7+0x1*-0x1b47:_0x51bb8e=_0x474efa[_0x18c05c(0x3d4,0x4e4,0x409,'!qvL',0x4dc)],_0x474efa[_0x39af66(-0x1d7,-0xf1,'ZyBB',-0x1f2,-0x2b4)]=-0x17*-0x14e+0x1b61+0x1313*-0x3;break;case-0x1*-0x1d9+0x26d+-0x41e:_0x474efa[_0x276beb(0x3ea,0x492,'B^lk',0x4f5,0x395)]=0x12e+0x2d*0xd8+-0x26fe,_0x474efa['t0']=_0x474efa[_0x18c05c(0x263,0x276,0x345,'ASRb',0x333)](-0x6d2+0x324+0x3ce*0x1);case 0x10cf+-0x2f*0xb3+0x1038:if(t[_0x276beb(0x3ca,0x403,'UMtb',0x312,0x4f4)][_0x418f2e(-0x157,-0xd5,-0x164,-0xfb,'zY(A')+'y'](_0x3cacd4[_0x276beb(0x435,0x37e,'3AV(',0x379,0x3c7)]),t[_0x582196(-0x118,'ze1J',-0x1f0,-0x243,-0x17f)][_0x582196(-0x54,'G3Ga',-0x40,-0x13a,0x72)+'y'](_0x3cacd4[_0x582196(-0x164,'G3Ga',-0xf7,-0x1ed,-0x1a4)]),_0x36b98b=t[_0x582196(-0x156,'hB6@',-0x16f,-0x81,-0x24e)][_0x418f2e(-0x1a6,-0x1d8,-0x25d,-0x189,'ASRb')+'pt'](_0x3cacd4[_0x39af66(-0x179,-0x26e,'YFu@',-0x216,-0x81)]),_0x57bd72=t[_0x39af66(-0xd5,-0xca,'IBwJ',-0x49,-0xb3)][_0x418f2e(-0x1be,-0x14a,-0x228,-0x2f6,'ZmeE')+'pt'](_0x3cacd4[_0x418f2e(-0x1d8,-0x213,-0x12f,-0xd0,'H8Ps')]),_0x293620=t[_0x39af66(-0xc7,-0xf2,'^Zd*',-0x103,-0x1b3)][_0x39af66(-0x126,-0x61,'930*',-0x16c,-0x75)+'pt'](_0x57bd72),_0x4ef059=t[_0x276beb(0x2b5,0x3b9,'R%x&',0x4ae,0x31a)][_0x418f2e(-0x186,-0x1cb,-0x1c8,-0xfe,'[S%4')+'pt'](_0x36b98b),_0x3cacd4[_0x18c05c(0x4be,0x3a7,0x452,'IBwJ',0x497)](null,t[_0x276beb(0x4a5,0x491,'KGqk',0x423,0x40b)+_0x18c05c(0x3d8,0x2a0,0x387,'[S%4',0x3fc)][_0x39af66(-0xf9,-0x26,'*1ha',-0x99,-0xb5)+_0x39af66(-0x20b,-0x27b,'V&[5',-0x17c,-0x1c5)+'ey'])){if(_0x3cacd4[_0x39af66(-0x1a3,-0x176,'SxP0',-0x1f0,-0x246)](_0x3cacd4[_0x18c05c(0x4d2,0x465,0x400,'OpYQ',0x4a9)],_0x3cacd4[_0x276beb(0x4d2,0x4b5,'Rq^S',0x3bf,0x3f3)])){var _0x5cae9f=_0x41e681[_0x18c05c(0x41e,0x4de,0x513,'H6O6',0x542)](_0x2d8ff6,arguments);return _0x55ff4d=null,_0x5cae9f;}else{_0x474efa[_0x39af66(-0x98,-0xe4,'jy*0',-0xd9,0x2a)]=0x2417+-0x2379+-0x1a*0x4;break;}}return t[_0x418f2e(-0x2c6,-0x2ed,-0x27d,-0x366,'YFu@')+_0x582196(0x76,'SBpJ',-0x6b,-0xd3,-0x68)](_0x3cacd4[_0x418f2e(-0x201,-0x33e,-0x24f,-0x2d8,'G3Ga')]),_0x3cacd4[_0x276beb(0x3c4,0x400,'a@zo',0x436,0x391)](setTimeout,function(){function _0x54ecfc(_0xf4b341,_0x400f4b,_0x428034,_0x1f8ab6,_0x2fdd4b){return _0x276beb(_0xf4b341-0x1a4,_0x2fdd4b- -0xc3,_0x428034,_0x1f8ab6-0x8f,_0x2fdd4b-0x12d);}function _0x2fd28c(_0x3e366a,_0x2e986,_0x34fdb8,_0x134f39,_0x579a6e){return _0x276beb(_0x3e366a-0x35,_0x579a6e-0x2a,_0x34fdb8,_0x134f39-0x169,_0x579a6e-0x159);}function _0x1b9e30(_0x457406,_0x3571e5,_0x1b85d3,_0x5bf1c2,_0x23ff59){return _0x582196(_0x457406-0x17b,_0x5bf1c2,_0x3571e5-0x4c1,_0x5bf1c2-0x3c,_0x23ff59-0x8e);}function _0x2c7b94(_0x5edbc9,_0x2decf8,_0x2ef932,_0x427270,_0x1ab808){return _0x18c05c(_0x5edbc9-0x49,_0x2decf8-0x1ea,_0x2decf8- -0x31e,_0x427270,_0x1ab808-0xc2);}function _0xbc1b86(_0x1042e7,_0x1a3f52,_0x26c18a,_0x29c1fd,_0x3cbbc0){return _0x18c05c(_0x1042e7-0x151,_0x1a3f52-0x2a,_0x29c1fd- -0x5ec,_0x26c18a,_0x3cbbc0-0x35);}if(_0x3cacd4[_0x2fd28c(0x3e5,0x4d2,'KGqk',0x425,0x48b)](_0x3cacd4[_0x2fd28c(0x45d,0x4d7,'WBzB',0x44f,0x477)],_0x3cacd4[_0x54ecfc(0x39c,0x2b8,'z1XV',0x3ce,0x3aa)])){var _0x1c1358=_0x3aae09[_0xbc1b86(-0xd9,-0x1b7,'930*',-0xda,-0x1ae)](_0x425906,arguments);return _0x55df0=null,_0x1c1358;}else return document[_0x2fd28c(0x3c4,0x3b6,'R%x&',0x382,0x3be)+_0x2c7b94(0xc0,0x39,-0x25,'xC^G',0x5d)][_0x54ecfc(0x40c,0x54b,'[S%4',0x4b9,0x462)]=_0x3cacd4[_0x2fd28c(0x47d,0x300,'RgiR',0x384,0x3f9)](url,_0x3cacd4[_0x2c7b94(0x1f6,0x1c3,0x238,'G3Ga',0xd8)]);},0xf87*-0x2+0x2c*0x43+0x1b5a),_0x474efa[_0x276beb(0x47a,0x43e,'3AV(',0x37d,0x3b5)+'t'](_0x3cacd4[_0x18c05c(0x343,0x47b,0x3c5,'q7bz',0x3ca)]);case 0x1611+0x245f+-0x1d1d*0x2:axios[_0x39af66(-0x117,-0x212,'RgiR',-0x82,-0x1f6)](_0x3cacd4[_0x276beb(0x425,0x417,'jy*0',0x3f4,0x316)](''[_0x418f2e(-0x4b,-0x18c,-0xa5,0x33,'V&[5')+'t'](_0x293620),t[_0x418f2e(-0x18e,-0x78,-0xb3,-0x124,'hB6@')+_0x39af66(-0x254,-0x2e3,'R%x&',-0x258,-0x1ee)][_0x18c05c(0x502,0x3db,0x425,'B^lk',0x43f)+_0x418f2e(-0x1ba,-0x1f2,-0x235,-0x205,'930*')+'ey']),{'headers':{'Authorization':_0x3cacd4[_0x418f2e(-0x60,-0x10f,-0xdf,-0x119,'OpYQ')][_0x582196(-0xf3,'H6O6',-0x33,0xaf,0xc4)+'t'](_0x4ef059)}})[_0x39af66(-0x174,-0x14c,'RgiR',-0x13d,-0x1f6)](function(_0x3d93b8){})[_0x418f2e(-0x198,-0x22c,-0x135,-0x123,'G3Ga')](function(_0x1a7b75){function _0x3f46cf(_0x211c3d,_0x375c36,_0x13c6ac,_0x18a901,_0xe7c008){return _0x582196(_0x211c3d-0x108,_0xe7c008,_0x211c3d- -0x7,_0x18a901-0xb0,_0xe7c008-0x14d);}function _0x2a356b(_0x1a0bda,_0x3ddbc0,_0x1e4654,_0x9621c2,_0x13a600){return _0x276beb(_0x1a0bda-0x8a,_0x13a600- -0x30f,_0x1e4654,_0x9621c2-0x198,_0x13a600-0xc5);}var _0x17a415={'ARCCN':function(_0x2b574a,_0x57ea27){function _0x979b0c(_0x206479,_0x259e85,_0x4295db,_0x412fd6,_0x183224){return _0x5308(_0x259e85- -0x354,_0x206479);}return _0x3cacd4[_0x979b0c('[S%4',-0x17c,-0x88,-0x1f6,-0x21b)](_0x2b574a,_0x57ea27);},'jGSVq':_0x3cacd4[_0x411994(0x3ab,0x343,0x515,'FQTo',0x41b)],'QLEHt':_0x3cacd4[_0x2a356b(0xc4,0x40,'YFu@',-0xd3,0x1a)],'ZASMO':function(_0x2274a9,_0x4e2edd){function _0x5e78d1(_0x5e09d2,_0x3fc750,_0x558a49,_0x2a7574,_0x57b109){return _0x2a356b(_0x5e09d2-0x4e,_0x3fc750-0x14d,_0x2a7574,_0x2a7574-0x45,_0x558a49- -0x1a1);}return _0x3cacd4[_0x5e78d1(0x1e,-0x85,-0x27,'*1ha',-0x12)](_0x2274a9,_0x4e2edd);},'FDLsz':_0x3cacd4[_0x2a356b(0x120,0x21a,'yB2r',0x223,0x122)],'TLRcC':_0x3cacd4[_0x3c4e26(0x468,0x559,0x368,'FQTo',0x36d)]};function _0x704cc7(_0x13b7b2,_0x51c2df,_0x11925d,_0x5a8999,_0x40eb10){return _0x39af66(_0x11925d-0x7e,_0x51c2df-0x10a,_0x13b7b2,_0x5a8999-0x14e,_0x40eb10-0xd9);}function _0x3c4e26(_0x5874b0,_0x37e9f0,_0x16ce7a,_0x2fbc8e,_0x142e67){return _0x418f2e(_0x5874b0-0x130,_0x37e9f0-0x69,_0x5874b0-0x6e0,_0x2fbc8e-0x6d,_0x2fbc8e);}function _0x411994(_0x14f032,_0x58325d,_0x26d09d,_0x1cfc77,_0x58c63e){return _0x582196(_0x14f032-0x1a7,_0x1cfc77,_0x58c63e-0x62b,_0x1cfc77-0xe9,_0x58c63e-0x18);}if(_0x3cacd4[_0x3f46cf(-0x227,-0x1d2,-0x2df,-0x138,'z1XV')](_0x3cacd4[_0x2a356b(0x6b,0xff,'[S%4',0xee,0x77)],_0x3cacd4[_0x411994(0x4c7,0x5e3,0x527,'IBwJ',0x58b)])){var _0x36343f={};_0x36343f[_0x3f46cf(-0x13e,-0x1b8,-0x199,-0x15b,'FF%U')]=_0x3cacd4[_0x3c4e26(0x57f,0x4f2,0x47d,'zY(A',0x661)],_0x36343f[_0x3c4e26(0x5a4,0x63a,0x550,'3AV(',0x4e6)]=_0x3cacd4[_0x704cc7('54m@',-0x16d,-0x171,-0x25f,-0x91)],(t[_0x411994(0x5bd,0x57c,0x532,'3AV(',0x5d2)](_0x36343f),axios[_0x704cc7('OpYQ',-0x24,-0x36,0x13,-0xac)](_0x3cacd4[_0x3c4e26(0x455,0x47d,0x362,'^Zd*',0x46c)])[_0x411994(0x4e3,0x512,0x5bd,'WBzB',0x55b)](function(_0x2c19f7){function _0x4729d7(_0x148983,_0x2788ea,_0x2fe123,_0x4d2169,_0x2a2176){return _0x704cc7(_0x148983,_0x2788ea-0x37,_0x2fe123- -0x95,_0x4d2169-0x1ca,_0x2a2176-0x10e);}function _0xd7e52a(_0x122424,_0x222a7b,_0x293a72,_0x42a1aa,_0x281997){return _0x2a356b(_0x122424-0x4d,_0x222a7b-0xa7,_0x122424,_0x42a1aa-0x143,_0x222a7b-0x16d);}function _0x37b469(_0x2b0186,_0x3d70b4,_0x232ec3,_0x382821,_0xd42b5a){return _0x2a356b(_0x2b0186-0x32,_0x3d70b4-0xa9,_0x2b0186,_0x382821-0x1af,_0xd42b5a-0x207);}function _0x534b13(_0x1fedcc,_0x3bc219,_0xe0516e,_0x34c0e3,_0x54d06a){return _0x2a356b(_0x1fedcc-0x18,_0x3bc219-0x11d,_0x3bc219,_0x34c0e3-0x1c7,_0x1fedcc- -0xec);}function _0x25cbdb(_0xa9d70d,_0x247697,_0x450e7d,_0x3dda8c,_0x2eee31){return _0x411994(_0xa9d70d-0xcc,_0x247697-0x16d,_0x450e7d-0x11d,_0xa9d70d,_0x3dda8c- -0x2ed);}_0x17a415[_0x37b469('YFu@',0x470,0x3a0,0x446,0x3cf)](_0x17a415[_0xd7e52a('*1ha',0x1fe,0x1e9,0x29f,0x11d)],_0x17a415[_0x37b469('V&[5',0x34b,0x4a1,0x3b7,0x3a3)])?(_0x3418bb[_0x534b13(0xe,'[S%4',0x15,0xae,0xa6)+'s'],-0x9*-0x325+0x243*-0x4+0x38*-0x58):(_0x2c19f7[_0x37b469('WBzB',0x1dc,0x19c,0x205,0x285)+'s'],0x1fa1+-0x107*0x22+-0x2f*-0x12);})[_0x3c4e26(0x520,0x518,0x61c,'YFu@',0x516)](function(_0x47957b){}),_0x3cacd4[_0x3f46cf(-0x3b,-0x54,0x64,-0xdd,'G3Ga')](setTimeout,function(){function _0x5c7ec9(_0x532369,_0x516b29,_0x2cfcc0,_0xdac4d4,_0x23017f){return _0x3f46cf(_0x516b29-0x5fb,_0x516b29-0x140,_0x2cfcc0-0x1c6,_0xdac4d4-0x9b,_0x532369);}function _0x46b7ed(_0xbc881f,_0x3bc352,_0x1981ad,_0x1a2636,_0x5c1713){return _0x2a356b(_0xbc881f-0x55,_0x3bc352-0x137,_0x3bc352,_0x1a2636-0xe2,_0x1981ad- -0x29e);}function _0x59aca6(_0x44b422,_0x2816dc,_0x2c03f6,_0x5e2749,_0x51d28f){return _0x411994(_0x44b422-0xc7,_0x2816dc-0x15c,_0x2c03f6-0x113,_0x44b422,_0x2c03f6- -0x5d8);}function _0x457419(_0x2d0e19,_0x214a42,_0x5d6d24,_0x160eba,_0x352108){return _0x2a356b(_0x2d0e19-0x1dd,_0x214a42-0x60,_0x160eba,_0x160eba-0x51,_0x5d6d24-0x10b);}function _0x27de66(_0x4768f9,_0x1a74e7,_0x44d753,_0x2e9c2a,_0x2732ff){return _0x411994(_0x4768f9-0x151,_0x1a74e7-0x1e0,_0x44d753-0x14f,_0x44d753,_0x2e9c2a- -0x193);}if(_0x17a415[_0x46b7ed(-0xc6,'hB6@',-0x154,-0xa0,-0x15b)](_0x17a415[_0x457419(0x27a,0x1e8,0x1f9,'a@zo',0x1b1)],_0x17a415[_0x5c7ec9('SBpJ',0x3e3,0x4b0,0x360,0x3a7)]))return document[_0x457419(0x30c,0x1fd,0x25a,'*1ha',0x1cd)+_0x27de66(0x38f,0x44a,'Rq^S',0x34f,0x3b9)][_0x59aca6('jy*0',0xdc,0x28,-0x29,-0x36)]=url;else{var _0x5789eb=_0x119072?function(){function _0x524c0a(_0x49fda6,_0x4a69c3,_0xd236f4,_0x3da389,_0x37d5fd){return _0x27de66(_0x49fda6-0x1bf,_0x4a69c3-0x5e,_0x4a69c3,_0xd236f4- -0x4b1,_0x37d5fd-0x1c5);}if(_0x32c77a){var _0x455002=_0x54380b[_0x524c0a(-0xa7,'R6N0',-0x4e,0x6a,-0xa)](_0x528321,arguments);return _0x169d97=null,_0x455002;}}:function(){};return _0x3c2861=![],_0x5789eb;}},0x11f+0x17*0x56+-0x35*0x5));}else return _0x1f9b3c[_0x2a356b(0x22,-0x2c,'[S%4',0x64,0xb8)+_0x3c4e26(0x636,0x70c,0x659,'()yV',0x6c1)]()[_0x411994(0x5c2,0x6c0,0x622,'hB6@',0x603)+'h'](oYvwOH[_0x704cc7('*1ha',-0xcc,-0x1cd,-0x2a0,-0x200)])[_0x411994(0x46d,0x62a,0x59f,'KGqk',0x560)+_0x2a356b(-0x65,0xfa,'hB6@',0x9c,0x90)]()[_0x3f46cf(-0x168,-0x1b2,-0x227,-0x233,'2[U9')+_0x3f46cf(-0x221,-0x208,-0x323,-0x19e,'^Zd*')+'r'](_0xe762e1)[_0x411994(0x489,0x4f8,0x397,'V&[5',0x414)+'h'](oYvwOH[_0x3c4e26(0x56a,0x634,0x600,'a@zo',0x4a9)]);});case 0x2*0x1be+-0x1ead+0x1b68:case _0x3cacd4[_0x276beb(0x37b,0x3e8,'!qvL',0x2ea,0x488)]:return _0x474efa[_0x418f2e(-0x205,-0x1e5,-0x285,-0x204,'s!&4')]();}},e,null,[[0x1828+-0x1d39*-0x1+-0x1*0x3541,-0xb*-0x51+0x93+-0x3e6]]);}))();function _0x4192(){var _0x1d8cf9=['WQfnWRdcQKO','bwC2y3O','WPtcIHSmWOW','tSkqot0','WOFdSstcImoU','WPNcUCo9WRXJ','W6aiaCorWRK','WPn/da','bCoStmoLhG','rwFdICk/iG','W71ccmoa','WO3cKqCsWPqalmo9b3L0WQS','W4nGgCk5WQekBW','W4LfksFcNW','hSoTqCoOcW','W4fCW6TfBa','tCkyjw7cTG','oriqgCkr','W4v9W4ZdRsW','W57dRJxdOI0','vK07hCoo','cc8HlSoX','baRcG8k2Eq','WOjKWQFdGG','rmowWOOa','fc8Wo8kR','WPOpxLW4','E8oBWQFdGq','W43cPKJcUmo7','wCkwocal','bSoVg8k1W5S','ymkaimkIhSoku3tdQCktW6hcMq','W57cQMtcImkJ','v8kLWRldG8oA','W5/dPmo9W5S','sXyXmSo1','W7/dOqVdKcS','bSk4t8kwWQq','WONdQIldPW','bxK/tM8','W7JdQJO','WOuTWQldUSoh','W6TjaG','hSkYumk0WPG','WRVdObX1WPS','v3K+h8oO','W4mIxePNkSo1CYNcPSocW5O','W5/dOmoTW5O7','W57dV2RdMmoo','eNtdISk+aa','rtGKjcraWRntWOpdL8oFBLe','zCkqlSk7W5pdOCkmWPPMW5q','pmoYqCo+Aa','WONdN1KErG','gmo8WR4jxG','wxtdMSkYhG','WOldOYVcLaO','uwqlhq','WO3cU8oUWRH7','WQVcVNVcVaeVWRaCWPTa','W4qSWQFdTmoz','mmo7W5XMWPO','txRdJCkzkW','d0BdOSkDpe7dHa','W75epW3cMW','bmo/wSo+gG','vLWMgmoJ','dmoFW6WkWPe','eCklWQFdRCo8','DvZcLJ9K','BSoeWOJdSSk6','qMOmcSog','WOpdHSoX','vSoPcCoZW4G','pdKpW5JcUq','gg1Zn3S','g8oiW6OqWPe','WROXkCkBba','F2aHb8oR','BmoBWPBdVCkI','xgedp8k+W5aaW4xdJ8k9','pCkdWPpdT8o/','WP3dMSo3ma','W4LcpJi','mmkqWPldRSoJ','W4zsWQRdVa','pJOVW6dcUW','W4bfWRFdRG','WQhdUCoMemou','y8ozW5DnW4m','y8ozW4jlW4K','WO/dUcpdLrW','WOOjWQ3cP0e','dmopW7SlWOW','WRddVNHYWQa','WPLbmmkr','EmoBW4zHW74','W5JdIwJdPCop','WPSewa','ae/cSXhcVq','uvybj8o0','hCkKz8kiWQu','WQFdTKTL','W4RdV3BdKmoC','WR0xWQdcU1C','W7PinCoaWQu','W5T2pI/cTG','mGGqkmkh','emojW7SEWPa','WODUWRVdHq','WOXuW6tdJJ0','W79JgcxcPa','W5/dVItdOcC','WOXUWPJdO8ob','t1OgpmoS','W5RdTxNdGCoE','WOxdQtu','qvWGimkP','WPZcUCoXWQbT','WPLKga45','W71klSoSWQu','WRPnWOFdLCoy','a8okA8oycq','xmkbjhVcSq','dWxcVSo8uq','WOFdRYpcLq','WQq1WPRcLv4','bvjkq2e','W5/dG0DbW48','W7X9l8oTWOu','fuarrG','bZRcGCkYgq','WQFdM3D8WQe','bSoVb8kO','qKO/hSoK','WOaaW6boFa','WQfJWRddPCoz','W7FdGGhdKZS','W5FdOsVdOGe','uCoEW7KlWOi','aCobWRW/Ca','W7f/aIpcSG','WQJdGHRcIY0','nCo5W4Lu','WQBcVhNcVx5zWOWSWPPPqJe','WO/dRdRdJSo+ndebWODi','f8ovW7y','WR42rJ3cLa','WPddI8o0mSoi','o8oNu8ozW5e','qCkglhm','cYG8lCkE','v0OZnmoJ','imozWPNdRmkO','W55WdGK','cuxcUbxcMG','h8oNwSoMeW','v1JdQ8oRmmolcmozmW4ipSoq','lZ4zW5O','W4SqW6aW','W4pdQdpdVsC','W4euW7y','WOmKWRlcN3y','WRSqWQlcRf0','WRzRbtFcIa','W6P3cmksb8onW57dMW','W5VdGSoFW70s','W7DOmsFcVW','mmktWOWzWOC','WPRdH8oLna','WO51uGtcRq','W4ryWRxdP2e','W4NcTMtcImkK','W4CQW7ZcNCkY','btDOF8kK','gSkWuSk3WPm','W4r2iSohWRe','W7BdOca','WOtdM8oImSoV','W4/dH0fuW4i','WOVdO8opi8om','BxXiWPRcOmkknSk8ica','bhL6FMy','W5NdJfbqW54','W4LhWQldPg0','i8o1W4HgWPO','W4NdImo/W7K2','W6HhftpcKa','WONdLfi','W5G3WRRdN8oD','WRLHrcBcJa','psS9mSkM','W4O9WOFdQmoU','W4xdOSo7W58X','WP9ujG','wSoRdCkXW5C','gHXXB8kd','rKKkg8o3','W6CpWPddJ8o+','WOZdJ3zytW','WRj8fmkcWRO','crhcR8k1BG','W71anadcNa','FCksW4bAWOu','W5ndW7Krza','fSo+bSkUWPy','fSooW6WpWPa','W47cQMRcJSo+','WPpdJ05BDW','W4fzWRu','W4u7W7q','WQWnWQFcQGu','WPCixfKU','W7VcJ07cRSoE','W4mCW6zbBa','fCkymJ4w','WP7dGCo4j8oP','eZPkwSkyvSkHbKC5hd50','W5bqW67dLW','EfldQ8kkjq','mrygW7BcUG','WQOZv3iX','WRRdTKDLWOa','Dv/cGWX2','WQdcVvz/WP8','ECosW4q','WQDrEalcLG','WRldRH1YWOy','z8ovW4XtW70','WOldPmo6WQzV','rsSmbSko','m8obAW','fqtcTCkO','WOyfBeWV','W4JdO33dRmow','W53dPdtdOa','tCkgkw7cUW','WOdcM8okWQft','cYvZgCkW','W50lw1u0','WP3dRsdcNKa','aSoLg8k3','hColxmoOdq','W4ZdUZFdUde','W5hdO2zoW6i','W61icmohWRG','zmoAWQVdV8kv','eZTmx8oyoSoxcN4N','sCkCk3VcPW','W7HFWP3dUMC','DuSfg8oQ','WOSsW6bt','eCoOFmobeG','W5ddQhfyW6i','hCo1zCocyW','WP9LrbSJ','ovtcMZhcVq','vSovWRhdVmkg','ea83W6BcMq','W48/W5GiWRK','W6zoWPZdJNC','baJcTCk4','E8ksosOY','W4fEW5JdIsW','D8k3oM7cRq','WOvCbSkdWOy','WOnuWQBdK8oP','WPZdOCoEmCoG','n8ouW5zYWOO','W4ddTxVdH8oy','WPxdTIpdLmkG','WPiIW6ddP8kz','WPWnta','AmkbWPxdQmoe','smkymtyr','q8klWQ3dRCoM','nSozW7u5WRK','etnXC8o3','WQmnWQdcRKW','WOLKWQe','m8ofwmovqG','efiab2m','W6zVkZBcMa','nmoDW4zk','sxKDdW','WQySWONcNhK','WQehWRVcUW','lLpcMcxcRq','vSoLW7rBW5G','WP5zpSknWP8','WPRdQt7cIfa','W5VdLmkKpmkQ','W6FdMCofW7qs','imovWPZdS8kQ','WOldPmoRWQDN','hmk3u8kSWO4','WQnXwa','fgz4zgy','bH59smke','WPddUgX1wG','WP4vWO3cUf8','W6ZcSL3cICoJ','dCoFW7KnWOa','v0NcLYrl','W6jiaq','gCoFW7ylWPa','uuFcIdTK','xSkyiJim','WQX3ztxcVq','W7BcJMlcM8of','W57dI11g','WQ9GzXpcIa','WQNdLuPFEG','W6VdQJW','buKasq','yMuulCod','wSkBlM7cRW','qmkpoaSO','WOVcRSoQ','oCkgBmkRWPS','W57dRINdOa','vhRdGa','nmkRACk1WRG','cCkNuSkRW44','htzCFW','WO/dOmoQW4u','bu42u3i','W4u/WQhdUG','q0dcSdXN','sxRdVCkNgW','tfyNoSoZ','WOjhnmkdWOe','WPvwnSkfWO0','yCkBWOVdU8k3','WOZdGSoqoSo0','DSkdWOpdUW','t8knpG','W4msW6uVWRS','f208Fxy','W5iyW6y3WP0','gYeNoCk3','tmoxWOhdJSkj','bCogtSovW4e','WQG+t1ii','xCozW6RdV8o8','W6nKWOldI3m','W49OiCovWOu','dXldUCo1kq','y8ozW5fpW48','hhNcQZdcLG','y24zg8ol','qmktnt8S','WPZcVSoSWRDQ','WP1JwtFcJW','WPuPWQlcPfa','W6SOW6aUWQa','WRZcN8onWR9m','W5hcU2xcNCo/','e8oBWOGqva','W5bvkgVcKW','W4FdON3dGa','W4pdRJ/dOa','msKeW5G','WQXLtGVcJa','ymkSWRVdO8on','W4tdPsa','pSknW4JcQCoYewfYFSokWOVcGCoM','WOjAo8kqW5q','W5DviZa','WOpcU8oQWR1T','W5JdG0Dd','nYlcOCk5va','BCoDWPBdUG','W47dPcNdPZW','c8kRvmk0WOq','W5JcVfRcVSoB','W5XoWQldRq','jSorFmo5W6y','aqtcRW','ACoSW4jjWPe','csucn8kw','a8o7tSo/ha','qhSibCox','W5TsW7ldI3S','W4a8WQFdRSoB','zSkkWPldTa','imoUqCoHmG','aCodESo+ya','WP8BFmox','mSovW7XnWPC','n8oMqmodgW','W49XWQBdVSoz','WP3dICoKlG','g8kJvmk5','W5pdSwpcN8oQ','BhZcHWjx','WPX3jdms','eCoTWR0xzq','W7hcHKhcUmoh','W5RcQx7cLSoL','W4ldR8oO','rK7dTmo8','WRHDi8kwWPG','A1SGiSoh','dSoeWPSbAa','FmkhWO/dRG','dMb5u2q','W7ldIHtdGbu','WQ0QkCkwfa','WRyihCkMla','W7NdGMJdNCor','sSo9W7b0W6u','dhpcStFcIW','emksWRfF','pmkHwCkiWQS','W6bchSoa','WQf5sdxcKW','WQ9ptZJcNW','W5fqW7tdLIy','W4XFW6VdMt8','WR8tv8kcWO3dMSkmWRCAiW','a8oFymoWqq','dMOCbmoh','aKqluW','awJcSdtcIW','AmoTWPtdQSkb','oCohymoIxG','pmowESoR','W7BdOsK','W4iqW6y6','WPJcOsRcISkfWO/cImkin8oBWQ7dICkt','W6bbkd3cUa','WRRdTKDAWOW','W7yCW7aaEG','CmkjWQ/dSmoU','WRNdNwTRWQ0','bhmVBSkJ','gCoApCkPW68','agZcQY3cKa','WPLCo8ksWO0','lSoVWOuqvq','W63dOerWWOu','W4NcTM7cLa','uCkqWQZdVq','mmohDq','qCoEW7jHW6i','W5RcU38','W5DAW5pdLYy','dCojz8oAW4y','W4BdVtFdHCko','mSo5W6LJWQe','kmkTCCkrWRi','WPZdOMZcJXC','dtm2kmk+','dCkNu8o3WOu','W5hcSwJcM8o/','gtzqzCkU','qmkCWQZdRq','WOdcRgtcNqO','WQ9qtJ/cPG','uCkgW51kjCo2WRNcMXBcPcH4qq','qSkYbYK8','W5NdKevhW5u','CeNcHsfK','bWGmW6dcVa','WOjwo8kd','W7evW6avWOS','W5bqW7tdLZ0','WPZcUCo7WQi','x8kymJyn','iLzxqZK','DmozWOi','W4G9WRRdTq','WRSnWOJcU3u','t8kmW4KAWPKKWPO4','fIuRlG','a3bMCG','F8khWOtdQCo3','DCkhWOm','rLGMmmoU','WR3dUKD9WOW','W7ZcKuZcM8oz','fCoPW69tWQe','t8k7m33cTa','c33cQYu','i8omsmo4W6a','ddPCBW','lCo0W55PWRe','dW7cTq','WOeAu1eP','gCoIWOa3Bq','aXNcUmk5Cq','iSowzSoKsa','W7JdNf3dU8oj','WRFdLgP/yW','WPJdJCoInCoO','c8oiW7q','nSonCCoP','WP3dUc3cJWO','o8ojACo6jG','WP7dH8ojhW','BmoBWPBdRCkS','WOhdI1urza','FNVdGSkxba','WR7dPW/cVHO','nXBcLCkRzG','WQ3dSKDWWOe','u3ddLSkN','WR1JwtFcJW','fsqYlSk+','jJytW6lcKW','WP10hW','W4vIWQhdRwy','WPjJdHW','A31jWP3cMmkrkCkOgI0','W7VdQmogW7SN','wdxdNmk2dq','WQKXnCkWgG','DvpdPSkXhG','pYr8FmkS'];_0x4192=function(){return _0x1d8cf9;};return _0x4192();}
                    },
                    methods: {
                        onLaunchSearchCasters: function (t) {
                            var e = this;
                            axios.get(url + "/admin/searchwebcasts?q=" + t).then(function (t) {
                                e.optionscast = t.data.search_cast;
                            });
                        },
                        getResults: function () {
                            var t = this,
                                e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
                            axios.get(url + "/admin/series/data?page=" + e).then(function (s) {
                                (t.series = s.data), (t.pageNum = e);
                            });
                        },
                        searchUnit: _.debounce(function () {
                            var t = this;
                            axios.get(url + "/admin/search_series?q=" + this.search).then(function (e) {
                                t.series.data = e.data.series;
                            });
                        }),
                        create: function () {
                            (this.index = !1), (this.edit = !1), (this.add = !0);
                        },
                        back: function () {
                            (this.form.serie = { backdrop_path: "", poster_path: "", preview_path: "", typesubstitle: "", genres: [], networks: [], seasons: [{ episodes: [{ videos: [], substitles: [] }] }] }),
                                (this.link = ""),
                                (this.epName = ""),
                                (this.epOverview = ""),
                                (this.epNumber = ""),
                                (this.linksubstitle = ""),
                                (this.server = ""),
                                (this.video = null),
                                (this.substitle = null),
                                (this.tmdb = null),
                                (this.add = !1),
                                (this.edit = !1),
                                (this.index = !0);
                        },
                        editing: function (t) {
                            (this.index = !1), (this.add = !1), (this.edit = !0), (this.form.serie = t), (this.tmdb = t.tmdb_id);
                        },
                        getSerie_Find: function () {
                            var t = this;
                            return m(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), http.get("https://api.themoviedb.org/3/find/" + t.tmdb + "?api_key=" + t.settings.tmdb_api_key + "&external_source=imdb_id");
                                                    case 3:
                                                        (s = e.sent), (t.tmdb = s.data.tv_results[0].id), t.getSerie(), (e.next = 11);
                                                        break;
                                                    case 8:
                                                        (e.prev = 8), (e.t0 = e.catch(0)), t.showError();
                                                    case 11:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 8]]
                                    );
                                })
                            )();
                        },
                        getSearchByName: function (t) {
                            var e = this.settings.tmdb_api_key,
                                s = this.settings.tmdb_lang.iso_639_1,
                                a = "".concat("https://api.themoviedb.org/3/search/tv?api_key=").concat(e, "&language=").concat(s, "&query=").concat(encodeURI(t), "&include_adult=false=");
                            return new Promise(function (e) {
                                if (t.length < 1) return e([]);
                                fetch(a)
                                    .then(function (t) {
                                        return t.json();
                                    })
                                    .then(function (t) {
                                        e(t.results);
                                    });
                            });
                        },
                        getResultValue: function (t) {
                            return t.name;
                        },
                        onSubmit: function (t) {
                            (this.tmdb = t.id), this.getSerie();
                        },
                        getSerie: function () {
                            var t = this;
                            return m(
                                i.a.mark(function e() {
                                    var s, a, r, n, c, d, u, m, p, v, f, h, g, b, C;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (
                                                            (s = ""),
                                                            (a = t.form.serie),
                                                            (r = ""),
                                                            (n = ""),
                                                            (e.prev = 4),
                                                            (e.next = 7),
                                                            http.get(
                                                                "https://api.themoviedb.org/3/tv/" +
                                                                    t.tmdb +
                                                                    "?api_key=" +
                                                                    t.settings.tmdb_api_key +
                                                                    "&language=" +
                                                                    t.settings.tmdb_lang.iso_639_1 +
                                                                    "&append_to_response=videos,external_ids,casts,networks"
                                                            )
                                                        );
                                                    case 7:
                                                        (c = e.sent), (d = l(c.data.networks));
                                                        try {
                                                            for (d.s(); !(u = d.n()).done; ) (m = u.value).logo_path && (m.logo_path = t.settings.imdb_cover_path + m.logo_path);
                                                        } catch (t) {
                                                            d.e(t);
                                                        } finally {
                                                            d.f();
                                                        }
                                                        if (
                                                            ((s = _.mapKeys(c.data, function (t, e) {
                                                                return "id" == e ? "tmdb_id" : e;
                                                            })),
                                                            t.edit && (s.id = a.id),
                                                            void 0 === s.videos.results[0])
                                                        ) {
                                                            e.next = 16;
                                                            break;
                                                        }
                                                        (s.preview_path = s.videos.results[0].key), (e.next = 24);
                                                        break;
                                                    case 16:
                                                        if (!t.edit || !a.preview_path) {
                                                            e.next = 20;
                                                            break;
                                                        }
                                                        (s.preview_path = a.preview_path), (e.next = 24);
                                                        break;
                                                    case 20:
                                                        return (e.next = 22), http.get("https://api.themoviedb.org/3/tv/" + t.tmdb + "/videos?api_key=" + t.settings.tmdb_api_key);
                                                    case 22:
                                                        (c = e.sent).data.results[0] && (s.preview_path = c.data.results[0].key);
                                                    case 24:
                                                        s.networks.logo_path && (s.networks.logo_path = t.settings.imdb_cover_path + s.networks.logo_path),
                                                            s.external_ids.imdb_id && (s.imdb_external_id = s.external_ids.imdb_id),
                                                            s.poster_path && (s.poster_path = t.settings.imdb_cover_path + s.poster_path),
                                                            s.backdrop_path && (s.backdrop_path = t.settings.imdb_cover_path + s.backdrop_path),
                                                            (p = l(s.seasons.entries())),
                                                            (e.prev = 29),
                                                            (f = i.a.mark(function e() {
                                                                var d, u, m, p, f, h, g;
                                                                return i.a.wrap(function (e) {
                                                                    for (;;)
                                                                        switch ((e.prev = e.next)) {
                                                                            case 0:
                                                                                return (
                                                                                    (d = o(v.value, 2)),
                                                                                    (u = d[0]),
                                                                                    (m = d[1]),
                                                                                    (s.seasons[u] = _.mapKeys(m, function (t, e) {
                                                                                        return "id" == e ? "tmdb_id" : e;
                                                                                    })),
                                                                                    t.edit &&
                                                                                        void 0 !==
                                                                                            (r = a.seasons.find(function (t) {
                                                                                                return t.season_number === m.season_number;
                                                                                            })) &&
                                                                                        ((s.seasons[u].id = r.id), (s.seasons[u].serie_id = r.serie_id)),
                                                                                    s.seasons[u].poster_path && (s.seasons[u].poster_path = t.settings.imdb_cover_path + s.seasons[u].poster_path),
                                                                                    (p = []),
                                                                                    (e.next = 7),
                                                                                    http.get(
                                                                                        "https://api.themoviedb.org/3/tv/" +
                                                                                            t.tmdb +
                                                                                            "/season/" +
                                                                                            m.season_number +
                                                                                            "?api_key=" +
                                                                                            t.settings.tmdb_api_key +
                                                                                            "&language=" +
                                                                                            t.settings.tmdb_lang.iso_639_1
                                                                                    )
                                                                                );
                                                                            case 7:
                                                                                (c = e.sent), (f = l(c.data.episodes));
                                                                                try {
                                                                                    for (
                                                                                        g = function () {
                                                                                            var e = h.value;
                                                                                            (e = _.mapKeys(e, function (t, e) {
                                                                                                return "id" == e ? "tmdb_id" : e;
                                                                                            })).still_path && (e.still_path = t.settings.imdb_cover_path + e.still_path),
                                                                                                t.edit &&
                                                                                                    void 0 !== r &&
                                                                                                    void 0 !==
                                                                                                        (n = r.episodes.find(function (t) {
                                                                                                            return t.tmdb_id === e.tmdb_id;
                                                                                                        })) &&
                                                                                                    ((e.id = n.id), (e.season_id = n.season_id), (e.videos = n.videos)),
                                                                                                p.push(e);
                                                                                        },
                                                                                            f.s();
                                                                                        !(h = f.n()).done;

                                                                                    )
                                                                                        g();
                                                                                } catch (t) {
                                                                                    f.e(t);
                                                                                } finally {
                                                                                    f.f();
                                                                                }
                                                                                s.seasons[u].episodes = p;
                                                                            case 11:
                                                                            case "end":
                                                                                return e.stop();
                                                                        }
                                                                }, e);
                                                            })),
                                                            p.s();
                                                    case 32:
                                                        if ((v = p.n()).done) {
                                                            e.next = 36;
                                                            break;
                                                        }
                                                        return e.delegateYield(f(), "t0", 34);
                                                    case 34:
                                                        e.next = 32;
                                                        break;
                                                    case 36:
                                                        e.next = 41;
                                                        break;
                                                    case 38:
                                                        (e.prev = 38), (e.t1 = e.catch(29)), p.e(e.t1);
                                                    case 41:
                                                        return (e.prev = 41), p.f(), e.finish(41);
                                                    case 44:
                                                        return (h = []), (e.next = 47), http.get("https://api.themoviedb.org/3/tv/" + t.tmdb + "/credits?api_key=" + t.settings.tmdb_api_key + "&language=" + t.settings.tmdb_lang.iso_639_1);
                                                    case 47:
                                                        (c = e.sent), (g = l(c.data.cast));
                                                        try {
                                                            for (
                                                                C = function () {
                                                                    var e = b.value;
                                                                    e.profile_path && (e.profile_path = t.settings.imdb_cover_path + e.profile_path),
                                                                        axios.get("https://api.themoviedb.org/3/person/" + e.id + "?api_key=" + t.settings.tmdb_api_key + "&language=" + t.settings.tmdb_lang.iso_639_1).then(function (t) {
                                                                            t.data.biography && (e.biography = t.data.biography),
                                                                                null != t.data.biography && (e.biography = t.data.biography),
                                                                                null != t.data.place_of_birth && (e.place_of_birth = t.data.place_of_birth),
                                                                                null != t.data.birthday && (e.birthday = t.data.birthday);
                                                                        }),
                                                                        h.push(e);
                                                                },
                                                                    g.s();
                                                                !(b = g.n()).done;

                                                            )
                                                                C();
                                                        } catch (t) {
                                                            g.e(t);
                                                        } finally {
                                                            g.f();
                                                        }
                                                        (s.casterslist = h), (t.form.serie = s), (e.next = 57);
                                                        break;
                                                    case 54:
                                                        (e.prev = 54), (e.t2 = e.catch(4)), t.showError();
                                                    case 57:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [
                                            [4, 54],
                                            [29, 38, 41, 44],
                                        ]
                                    );
                                })
                            )();
                        },
                        store: function () {
                            var t = this;
                            return m(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.post(url + "/admin/series/store", t.form);
                                                    case 3:
                                                        (s = e.sent),
                                                            (t.add = !1),
                                                            (t.edit = !1),
                                                            (t.index = !0),
                                                            (t.form.serie = { backdrop_path: "", poster_path: "", preview_path: "", genres: [], networks: [], seasons: [{ episodes: [{ videos: [], substitles: [] }] }] }),
                                                            (t.tmdb = null),
                                                            (t.selectedSeason = -1),
                                                            (t.selectedEpisode = -1),
                                                            (t.season = null),
                                                            (t.episode = null),
                                                            (t.link = ""),
                                                            (t.epName = ""),
                                                            (t.epOverview = ""),
                                                            (t.epNumber = ""),
                                                            (t.linksubstitle = ""),
                                                            (t.typesubstitle = ""),
                                                            (t.server = ""),
                                                            (t.video = null),
                                                            (t.substitle = null),
                                                            t.series.data.unshift(s.data.body),
                                                            t.showSuccess(s.data.message),
                                                            axios.get(url + "/admin/series/data?page=" + t.pageNum).then(function (e) {
                                                                t.series = e.data;
                                                            }),
                                                            (e.next = 30);
                                                        break;
                                                    case 27:
                                                        (e.prev = 27), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 30:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 27]]
                                    );
                                })
                            )();
                        },
                        update: function () {
                            var t = this;
                            return m(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.put(url + "/admin/series/update/" + t.form.serie.id, t.form);
                                                    case 3:
                                                        (s = e.sent),
                                                            (t.add = !1),
                                                            (t.edit = !1),
                                                            (t.index = !0),
                                                            (t.form.serie = { backdrop_path: "", poster_path: "", preview_path: "", genres: [], casterslist: [], networks: [], seasons: [{ episodes: [{ videos: [], substitles: [] }] }] }),
                                                            (t.tmdb = null),
                                                            (t.selectedSeason = -1),
                                                            (t.selectedEpisode = -1),
                                                            (t.season = null),
                                                            (t.episode = null),
                                                            (t.link = ""),
                                                            (t.epName = ""),
                                                            (t.epOverview = ""),
                                                            (t.epNumber = ""),
                                                            (t.linksubstitle = ""),
                                                            (t.typesubstitle = ""),
                                                            (t.server = ""),
                                                            (t.video = null),
                                                            (t.substitle = null),
                                                            t.showSuccess(s.data.message),
                                                            axios.get(url + "/admin/series/data?page=" + t.pageNum).then(function (e) {
                                                                t.series = e.data;
                                                            }),
                                                            (e.next = 29);
                                                        break;
                                                    case 26:
                                                        (e.prev = 26), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 29:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 26]]
                                    );
                                })
                            )();
                        },
                        destroy: function (t) {
                            var e = this;
                            this.showConfirm(
                                m(
                                    i.a.mark(function s() {
                                        var a, r;
                                        return i.a.wrap(
                                            function (s) {
                                                for (;;)
                                                    switch ((s.prev = s.next)) {
                                                        case 0:
                                                            return (s.prev = 0), (s.next = 3), axios.delete(url + "/admin/series/destroy/" + t);
                                                        case 3:
                                                            (a = s.sent),
                                                                (r = e.series.data.findIndex(function (e) {
                                                                    return e.id === t;
                                                                })),
                                                                e.series.data.splice(r, 1),
                                                                (e.selectedSeason = -1),
                                                                (e.selectedEpisode = -1),
                                                                (e.season = null),
                                                                (e.episode = null),
                                                                e.showSuccess(a.data.message),
                                                                (s.next = 16);
                                                            break;
                                                        case 13:
                                                            (s.prev = 13), (s.t0 = s.catch(0)), e.showError();
                                                        case 16:
                                                        case "end":
                                                            return s.stop();
                                                    }
                                            },
                                            s,
                                            null,
                                            [[0, 13]]
                                        );
                                    })
                                )
                            );
                        },
                        destroyCast: function (t) {
                            var e = this;
                            null !== t.cast &&
                                axios
                                    .delete(url + "/admin/series/casts/destroy/" + t.id)
                                    .then(function (t) {
                                        return e.showSuccess(t.data.message);
                                    })
                                    .catch(),
                                console.log(t);
                        },
                        storePoster: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (s.prev = 0), (e.poster = t.target.files[0]), (a = new FormData()).append("image", e.poster), (s.next = 6), axios.post(url + "/admin/series/image/store", a);
                                                    case 6:
                                                        (r = s.sent), (e.form.serie.poster_path = r.data.image_path), e.showSuccess(r.data.message), (s.next = 14);
                                                        break;
                                                    case 11:
                                                        (s.prev = 11), (s.t0 = s.catch(0)), e.showError(s.t0.response);
                                                    case 14:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 11]]
                                    );
                                })
                            )();
                        },
                        storePosterSeason: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (s.prev = 0), (e.posterSeason = t.target.files[0]), (a = new FormData()).append("image", e.posterSeason), (s.next = 6), axios.post(url + "/admin/series/image/store", a);
                                                    case 6:
                                                        (r = s.sent), (e.form.serie.seasons[e.selectedSeason].poster_path = r.data.image_path), e.showSuccess(r.data.message), (s.next = 14);
                                                        break;
                                                    case 11:
                                                        (s.prev = 11), (s.t0 = s.catch(0)), e.showError(s.t0.response);
                                                    case 14:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 11]]
                                    );
                                })
                            )();
                        },
                        storeStillEpisode: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (s.prev = 0), (e.stillEpisode = t.target.files[0]), (a = new FormData()).append("image", e.stillEpisode), (s.next = 6), axios.post(url + "/admin/series/image/store", a);
                                                    case 6:
                                                        (r = s.sent), (e.form.serie.seasons[e.selectedSeason].episodes[e.selectedEpisode].still_path = r.data.image_path), e.showSuccess(r.data.message), (s.next = 14);
                                                        break;
                                                    case 11:
                                                        (s.prev = 11), (s.t0 = s.catch(0)), e.showError(s.t0.response);
                                                    case 14:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 11]]
                                    );
                                })
                            )();
                        },
                        storeBackdrop: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (s.prev = 0), (e.backdrop = t.target.files[0]), (a = new FormData()).append("image", e.backdrop), (s.next = 6), axios.post(url + "/admin/series/image/store", a);
                                                    case 6:
                                                        (r = s.sent), (e.form.serie.backdrop_path = r.data.image_path), e.showSuccess(r.data.message), (s.next = 14);
                                                        break;
                                                    case 11:
                                                        (s.prev = 11), (s.t0 = s.catch(0)), e.showError(s.t0.response);
                                                    case 14:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 11]]
                                    );
                                })
                            )();
                        },
                        storeVideoTrailer: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r, n;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (
                                                            (s.prev = 0),
                                                            (a = e.form.serie.name),
                                                            (e.video_trailer = t.target.files[0]),
                                                            (r = new FormData()).append("video", e.video_trailer),
                                                            r.append("movie_title", a.replace(/ /g, "_")),
                                                            (s.next = 8),
                                                            axios.post(url + "/admin/video/store", r, {
                                                                onUploadProgress: function (t) {
                                                                    (e.isuploading = !0), (e.percent = Math.round((t.loaded / t.total) * 100));
                                                                },
                                                            })
                                                        );
                                                    case 8:
                                                        (n = s.sent),
                                                            (e.form.serie.trailer_url = n.data.video_path),
                                                            e.showSuccess(n.data.message),
                                                            console.log(r),
                                                            setTimeout(function () {
                                                                return (e.isuploading = !1);
                                                            }, 2e3),
                                                            (s.next = 19);
                                                        break;
                                                    case 15:
                                                        (s.prev = 15),
                                                            (s.t0 = s.catch(0)),
                                                            e.showError(),
                                                            setTimeout(function () {
                                                                return (e.isuploading = !1);
                                                            }, 2e3);
                                                    case 19:
                                                        return (s.prev = 19), s.finish(19);
                                                    case 21:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 15, 19, 21]]
                                    );
                                })
                            )();
                        },
                        storeVideo: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (
                                                            (s.prev = 0),
                                                            (e.video = t.target.files[0]),
                                                            (a = new FormData()).append("video", e.video),
                                                            (s.next = 6),
                                                            axios.post(url + "/admin/video/store", a, {
                                                                onUploadProgress: function (t) {
                                                                    (e.isuploading = !0), (e.percent = Math.round((t.loaded / t.total) * 100));
                                                                },
                                                            })
                                                        );
                                                    case 6:
                                                        (r = s.sent),
                                                            (e.link = r.data.video_path),
                                                            (e.server = { name: r.data.server }),
                                                            e.showSuccess(r.data.message),
                                                            setTimeout(function () {
                                                                return (e.isuploading = !1);
                                                            }, 2e3),
                                                            (s.next = 17);
                                                        break;
                                                    case 13:
                                                        (s.prev = 13),
                                                            (s.t0 = s.catch(0)),
                                                            e.showError(),
                                                            setTimeout(function () {
                                                                return (e.isuploading = !1);
                                                            }, 2e3);
                                                    case 17:
                                                        return (s.prev = 17), s.finish(17);
                                                    case 19:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 13, 17, 19]]
                                    );
                                })
                            )();
                        },
                        addLinkDownload: function () {
                            var t = this.form.serie.seasons[this.selectedSeason].episodes[this.selectedEpisode];
                            t.downloads || Vue.set(t, "downloads", []),
                                t.downloads.unshift({
                                    server: this.serverdownload.name,
                                    header: this.headerdownload.name,
                                    useragent: this.useragentdownload.name,
                                    link: this.linkDownload,
                                    lang: this.langdownload.english_name && "No Language" !== this.langdownload.english_name ? this.langdownload.english_name : this.settings.tmdb_lang.english_name,
                                    external: this.external_download,
                                    supported_hosts: this.supported_hosts_download,
                                }),
                                (this.linkDownload = ""),
                                (this.serverdownload = ""),
                                (this.headerdownload = ""),
                                (this.useragentdownload = ""),
                                (this.download = null),
                                (this.supported_hosts_download = !1),
                                (this.external_download = !1);
                        },
                        addLink: function () {
                            if ("" !== this.server && "" !== this.link && "" !== this.form.serie) {
                                var t = this.form.serie.seasons[this.selectedSeason].episodes[this.selectedEpisode];
                                t.videos || Vue.set(t, "videos", []),
                                    t.videos.unshift({
                                        server: this.server.name,
                                        drmuuid: this.drmuuiselected.name,
                                        drmlicenceuri: this.drmlicenceuriselected.name,
                                        header: this.header.name,
                                        useragent: this.useragent.name,
                                        link: this.link,
                                        lang: this.lang.english_name && "No Language" !== this.lang.english_name ? this.lang.english_name : this.settings.tmdb_lang.english_name,
                                        embed: this.embed,
                                        hls: this.hls,
                                        supported_hosts: this.supported_hosts,
                                        drm: this.drm,
                                    }),
                                    (this.link = ""),
                                    (this.server = ""),
                                    (this.header = ""),
                                    (this.useragent = ""),
                                    (this.video = null),
                                    (this.supported_hosts = !1),
                                    (this.embed = !1),
                                    (this.hls = !1),
                                    (this.drmuuiselected = ""),
                                    (this.drmlicenceuriselected = ""),
                                    (this.drm = !1);
                            } else this.showAlert("You need to select a server before adding a link");
                        },
                        deleteLinkDownload: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                m(
                                    i.a.mark(function a() {
                                        var r;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            if (((a.prev = 0), !t.id)) {
                                                                a.next = 6;
                                                                break;
                                                            }
                                                            return (a.next = 4), axios.delete(url + "/admin/series/downloads/destroy/" + t.id);
                                                        case 4:
                                                            (r = a.sent), s.showSuccess(r.data.message);
                                                        case 6:
                                                            s.form.serie.seasons[s.selectedSeason].episodes[s.selectedEpisode].downloads.splice(e, 1), (a.next = 12);
                                                            break;
                                                        case 9:
                                                            (a.prev = 9), (a.t0 = a.catch(0)), s.showError();
                                                        case 12:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 9]]
                                        );
                                    })
                                )
                            );
                        },
                        deleteLink: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                m(
                                    i.a.mark(function a() {
                                        var r;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            if (((a.prev = 0), !t.id)) {
                                                                a.next = 6;
                                                                break;
                                                            }
                                                            return (a.next = 4), axios.delete(url + "/admin/series/videos/destroy/" + t.id);
                                                        case 4:
                                                            (r = a.sent), s.showSuccess(r.data.message);
                                                        case 6:
                                                            s.form.serie.seasons[s.selectedSeason].episodes[s.selectedEpisode].videos.splice(e, 1), (a.next = 12);
                                                            break;
                                                        case 9:
                                                            (a.prev = 9), (a.t0 = a.catch(0)), s.showError();
                                                        case 12:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 9]]
                                        );
                                    })
                                )
                            );
                        },
                        addSubs: function () {
                            if ("" !== this.linksubstitle && "" !== this.form.serie) {
                                var t = this.form.serie.seasons[this.selectedSeason].episodes[this.selectedEpisode];
                                t.substitles || Vue.set(t, "substitles", []),
                                    t.substitles.unshift({
                                        link: this.linksubstitle,
                                        type: this.typesubstitle,
                                        lang: this.langsub.english_name && "No Language" !== this.langsub.english_name ? this.langsub.english_name : this.settings.tmdb_lang.english_name,
                                        zip: this.zip,
                                    }),
                                    (this.linksubstitle = ""),
                                    (this.server = ""),
                                    (this.typesubstitle = ""),
                                    (this.substitle = null),
                                    (this.zip = !1);
                            }
                        },
                        destroySubs: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                m(
                                    i.a.mark(function a() {
                                        var r;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            if (((a.prev = 0), !t.id)) {
                                                                a.next = 6;
                                                                break;
                                                            }
                                                            return (a.next = 4), axios.delete(url + "/admin/series/substitles/destroy/" + t.id);
                                                        case 4:
                                                            (r = a.sent), s.showSuccess(r.data.message);
                                                        case 6:
                                                            s.form.serie.seasons[s.selectedSeason].episodes[s.selectedEpisode].substitles.splice(e, 1), (a.next = 12);
                                                            break;
                                                        case 9:
                                                            (a.prev = 9), (a.t0 = a.catch(0)), s.showError();
                                                        case 12:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 9]]
                                        );
                                    })
                                )
                            );
                        },
                        storeSubstitle: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (
                                                            (s.prev = 0),
                                                            (e.loading = !0),
                                                            (e.substitle = t.target.files[0]),
                                                            (a = new FormData()).append("substitle", e.substitle),
                                                            (s.next = 7),
                                                            axios.post(url + "/admin/substitle/store", a)
                                                        );
                                                    case 7:
                                                        (r = s.sent), (e.linksubstitle = r.data.substitle_path), e.showSuccess(r.data.message), (e.zip = !0), (s.next = 16);
                                                        break;
                                                    case 13:
                                                        (s.prev = 13), (s.t0 = s.catch(0)), e.showError();
                                                    case 16:
                                                        return (s.prev = 16), (e.loading = !1), s.finish(16);
                                                    case 19:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 13, 16, 19]]
                                    );
                                })
                            )();
                        },
                        deleteLinkSubs: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                m(
                                    i.a.mark(function a() {
                                        var r;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            if (((a.prev = 0), !t.id)) {
                                                                a.next = 6;
                                                                break;
                                                            }
                                                            return (a.next = 4), axios.delete(url + "/admin/series/substitles/destroy/" + t.id);
                                                        case 4:
                                                            (r = a.sent), s.showSuccess(r.data.message);
                                                        case 6:
                                                            s.form.serie.seasons[s.selectedSeason].episodes[s.selectedEpisode].substitles.splice(e, 1), (a.next = 12);
                                                            break;
                                                        case 9:
                                                            (a.prev = 9), (a.t0 = a.catch(0)), s.showError();
                                                        case 12:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 9]]
                                        );
                                    })
                                )
                            );
                        },
                        selectSeason: function (t) {
                            (this.selectedSeason = this.form.serie.seasons.indexOf(t)), (this.episode = null), (this.selectedEpisode = -1);
                        },
                        selectEpisode: function (t) {
                            this.selectedEpisode = this.form.serie.seasons[this.selectedSeason].episodes.indexOf(t);
                        },
                        destroyGenre: function (t) {
                            var e = this;
                            null !== t.genre &&
                                axios
                                    .delete(url + "/admin/series/genres/destroy/" + t.id)
                                    .then(function (t) {
                                        return e.showSuccess(t.data.message);
                                    })
                                    .catch(function (t) {
                                        return e.showError();
                                    });
                        },
                        getSeason: function () {
                            var t = this;
                            return m(
                                i.a.mark(function e() {
                                    var s, a, r, n, c, d;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (
                                                            (e.prev = 0),
                                                            (e.next = 3),
                                                            http.get(
                                                                "https://api.themoviedb.org/3/tv/" + t.form.serie.tmdb_id + "/season/" + t.addseason + "?api_key=" + t.settings.tmdb_api_key + "&language=" + t.settings.tmdb_lang.iso_639_1
                                                            )
                                                        );
                                                    case 3:
                                                        ((s = e.sent).data = _.mapKeys(s.data, function (t, e) {
                                                            return "id" == e ? "tmdb_id" : e;
                                                        })),
                                                            s.data.poster_path && (s.data.poster_path = t.settings.imdb_cover_path + s.data.poster_path),
                                                            (a = l(s.data.episodes.entries()));
                                                        try {
                                                            for (a.s(); !(r = a.n()).done; )
                                                                (n = o(r.value, 2)),
                                                                    (c = n[0]),
                                                                    (d = n[1]),
                                                                    (s.data.episodes[c] = _.mapKeys(d, function (t, e) {
                                                                        return "id" == e ? "tmdb_id" : e;
                                                                    })),
                                                                    d.still_path && (s.data.episodes[c].still_path = t.settings.imdb_cover_path + d.still_path);
                                                        } catch (t) {
                                                            a.e(t);
                                                        } finally {
                                                            a.f();
                                                        }
                                                        t.form.serie.seasons.findIndex(function (t) {
                                                            return t.season_number === s.data.season_number;
                                                        }) < 0
                                                            ? (t.form.serie.seasons.push(s.data), t.showSuccess())
                                                            : t.showError("this season already exists"),
                                                            (t.addseason = ""),
                                                            (e.next = 16);
                                                        break;
                                                    case 13:
                                                        (e.prev = 13), (e.t0 = e.catch(0)), t.showError();
                                                    case 16:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 13]]
                                    );
                                })
                            )();
                        },
                        destroySeason: function () {
                            var t = this;
                            this.showConfirm(
                                m(
                                    i.a.mark(function e() {
                                        var s, a;
                                        return i.a.wrap(
                                            function (e) {
                                                for (;;)
                                                    switch ((e.prev = e.next)) {
                                                        case 0:
                                                            if (!(s = t.form.serie.seasons[t.selectedSeason]).id) {
                                                                e.next = 12;
                                                                break;
                                                            }
                                                            return (e.prev = 2), (e.next = 5), axios.delete(url + "/admin/series/seasons/destroy/" + s.id);
                                                        case 5:
                                                            (a = e.sent), t.showSuccess(a.data.message), (e.next = 12);
                                                            break;
                                                        case 9:
                                                            (e.prev = 9), (e.t0 = e.catch(2)), t.showError();
                                                        case 12:
                                                            t.form.serie.seasons.splice(t.selectedSeason, 1), (t.season = null), (t.episode = null), (t.selectedSeason = -1), (t.selectedEpisode = -1);
                                                        case 17:
                                                        case "end":
                                                            return e.stop();
                                                    }
                                            },
                                            e,
                                            null,
                                            [[2, 9]]
                                        );
                                    })
                                )
                            );
                        },
                        addNewSeason: function () {
                            var t = this;
                            return m(
                                i.a.mark(function e() {
                                    return i.a.wrap(function (e) {
                                        for (;;)
                                            switch ((e.prev = e.next)) {
                                                case 0:
                                                    t.form.serie.seasons.push({ name: t.customSeason.name, overview: t.customSeason.overview, season_number: t.customSeason.season_number, episodes: [] }),
                                                        (t.customSeason.name = ""),
                                                        (t.customSeason.overview = ""),
                                                        (t.customSeason.season_number = ""),
                                                        (t.showModalSeason = !1);
                                                case 5:
                                                case "end":
                                                    return e.stop();
                                            }
                                    }, e);
                                })
                            )();
                        },
                        addBulkEpisodeLinks: function () {
                            var t = this;
                            return m(
                                i.a.mark(function e() {
                                    var s, a, r;
                                    return i.a.wrap(function (e) {
                                        for (;;)
                                            switch ((e.prev = e.next)) {
                                                case 0:
                                                    if ("" !== t.customEpisodesBulkLinks.server.name) {
                                                        e.next = 3;
                                                        break;
                                                    }
                                                    return t.showAlert("You need to select a server before adding a link"), e.abrupt("return");
                                                case 3:
                                                    s = l(t.form.serie.seasons[t.selectedSeason].episodes);
                                                    try {
                                                        for (s.s(); !(a = s.n()).done; )
                                                            (r = a.value).videos || Vue.set(r, "videos", []),
                                                                r.videos.unshift({
                                                                    server: t.customEpisodesBulkLinks.server.name,
                                                                    link: t.customEpisodesBulkLinks.link + r.episode_number + "." + t.customEpisodesBulkLinks.ext,
                                                                    lang: t.lang.english_name && "No Language" !== t.lang.english_name ? t.lang.english_name : t.settings.tmdb_lang.english_name,
                                                                    embed: t.customEpisodesBulkLinks.embed,
                                                                    hls: t.customEpisodesBulkLinks.hls,
                                                                    supported_hosts: t.customEpisodesBulkLinks.supported_hosts,
                                                                }),
                                                                console.log(t.customEpisodesBulkLinks.link + r.episode_number + "." + t.customEpisodesBulkLinks.ext),
                                                                (t.showModalBulkLinks = !1),
                                                                setTimeout(function () {
                                                                    (this.customEpisodesBulkLinks.supported_hosts = !1),
                                                                        (this.customEpisodesBulkLinks.embed = !1),
                                                                        (this.customEpisodesBulkLinks.hls = !1),
                                                                        (this.server = ""),
                                                                        (this.video = null),
                                                                        (this.supported_hosts = !1),
                                                                        (this.embed = !1),
                                                                        (this.hls = !1),
                                                                        this.showSuccess(),
                                                                        (this.link = ""),
                                                                        (this.customEpisodesBulkLinks.link = "");
                                                                }, 1e3);
                                                    } catch (t) {
                                                        s.e(t);
                                                    } finally {
                                                        s.f();
                                                    }
                                                case 5:
                                                case "end":
                                                    return e.stop();
                                            }
                                    }, e);
                                })
                            )();
                        },
                        addNewEpisode: function () {
                            var t = this;
                            return m(
                                i.a.mark(function e() {
                                    return i.a.wrap(function (e) {
                                        for (;;)
                                            switch ((e.prev = e.next)) {
                                                case 0:
                                                    t.form.serie.seasons[t.selectedSeason].episodes.push({ name: t.customEpisodes.name, overview: t.customEpisodes.overview, episode_number: t.customEpisodes.episode_number }),
                                                        (t.customEpisodes.name = ""),
                                                        (t.customEpisodes.overview = ""),
                                                        (t.customEpisodes.episode_number = ""),
                                                        (t.showModal = !1);
                                                case 5:
                                                case "end":
                                                    return e.stop();
                                            }
                                    }, e);
                                })
                            )();
                        },
                        send: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (
                                                            (s.prev = 0),
                                                            (a = { headers: { Authorization: "key=" + e.settings.authorization } }),
                                                            (r = { to: "/topics/all", data: { title: t.name, message: t.overview, image: t.backdrop_path, type: "1", tmdb: t.id } }),
                                                            (s.next = 5),
                                                            http.post("https://fcm.googleapis.com/fcm/send", r, a)
                                                        );
                                                    case 5:
                                                        e.showSuccess(), (e.title = ""), (e.message = ""), (e.type = ""), (e.image = ""), (e.tmdb = ""), (s.next = 16);
                                                        break;
                                                    case 13:
                                                        (s.prev = 13), (s.t0 = s.catch(0)), e.showError();
                                                    case 16:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 13]]
                                    );
                                })
                            )();
                        },
                        sendEpisode: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (
                                                            (s.prev = 0),
                                                            (a = { headers: { Authorization: "key=" + e.settings.authorization } }),
                                                            (r = { to: "/topics/all", data: { title: t.name, image: t.still_path, type: "episode", tmdb: t.id, message: t.overview } }),
                                                            (s.next = 5),
                                                            http.post("https://fcm.googleapis.com/fcm/send", r, a)
                                                        );
                                                    case 5:
                                                        e.showSuccess(), (e.title = ""), (e.message = ""), (e.image = ""), (e.type = ""), (e.tmdb = ""), (e.episode = null), (s.next = 17);
                                                        break;
                                                    case 14:
                                                        (s.prev = 14), (s.t0 = s.catch(0)), e.showError();
                                                    case 17:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 14]]
                                    );
                                })
                            )();
                        },
                        getEpisode: function () {
                            var t = this;
                            return m(
                                i.a.mark(function e() {
                                    var s, a;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (
                                                            (e.prev = 0),
                                                            (e.next = 3),
                                                            http.get(
                                                                "https://api.themoviedb.org/3/tv/" +
                                                                    t.tmdb +
                                                                    "/season/" +
                                                                    t.form.serie.seasons[t.selectedSeason].season_number +
                                                                    "/episode/" +
                                                                    t.addepisode +
                                                                    "?api_key=" +
                                                                    t.settings.tmdb_api_key +
                                                                    "&language=" +
                                                                    t.settings.tmdb_lang.iso_639_1
                                                            )
                                                        );
                                                    case 3:
                                                        (s = e.sent),
                                                            t.form.serie.seasons[t.selectedSeason].episodes.findIndex(function (t) {
                                                                return t.episode_number === s.data.episode_number;
                                                            }) < 0
                                                                ? ((a = _.mapKeys(s.data, function (t, e) {
                                                                      return "id" == e ? "tmdb_id" : e;
                                                                  })).still_path && (a.still_path = t.settings.imdb_cover_path + a.still_path),
                                                                  t.form.serie.seasons[t.selectedSeason].episodes.push(a),
                                                                  t.showSuccess())
                                                                : t.showError("this episode already exists"),
                                                            (t.addepisode = ""),
                                                            (e.next = 12);
                                                        break;
                                                    case 9:
                                                        (e.prev = 9), (e.t0 = e.catch(0)), t.showError();
                                                    case 12:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 9]]
                                    );
                                })
                            )();
                        },
                        destroyEpisode: function () {
                            var t = this;
                            this.showConfirm(
                                m(
                                    i.a.mark(function e() {
                                        var s, a;
                                        return i.a.wrap(
                                            function (e) {
                                                for (;;)
                                                    switch ((e.prev = e.next)) {
                                                        case 0:
                                                            if (!(s = t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode]).id) {
                                                                e.next = 12;
                                                                break;
                                                            }
                                                            return (e.prev = 2), (e.next = 5), axios.delete(url + "/admin/series/episodes/destroy/" + s.id);
                                                        case 5:
                                                            (a = e.sent), t.showSuccess(a.data.message), (e.next = 12);
                                                            break;
                                                        case 9:
                                                            (e.prev = 9), (e.t0 = e.catch(2)), t.showError();
                                                        case 12:
                                                            t.form.serie.seasons[t.selectedSeason].episodes.splice(t.selectedEpisode, 1), (t.episode = null), (t.selectedEpisode = -1);
                                                        case 15:
                                                        case "end":
                                                            return e.stop();
                                                    }
                                            },
                                            e,
                                            null,
                                            [[2, 9]]
                                        );
                                    })
                                )
                            );
                        },
                        destroyNetwork: function (t) {
                            var e = this;
                            null !== t.network &&
                                axios
                                    .delete(url + "/admin/series/networks/destroy/" + t.id)
                                    .then(function (t) {
                                        return e.showSuccess(t.data.message);
                                    })
                                    .catch(function (t) {
                                        return e.showError(t);
                                    });
                        },
                    },
                    computed: {
                        filteredSeries: function () {
                            var t = this;
                            return this.series.filter(function (e) {
                                return e.name.toLowerCase().match(t.search.toLowerCase());
                            });
                        },
                    },
                    mixins: [r.a, n.a],
                },
                f = (s(330), s(4)),
                h = Object(f.a)(
                    v,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-md-12 grid-margin" }, [
                                s("div", { staticClass: "d-flex justify-content-between flex-wrap" }, [
                                    t._m(0),
                                    t._v(" "),
                                    s("div", { staticClass: "d-flex justify-content-between align-items-end flex-wrap" }, [
                                        t.index
                                            ? s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.create();
                                                          },
                                                      },
                                                  },
                                                  [t._v("Add Serie")]
                                              )
                                            : t._e(),
                                        t._v(" "),
                                        t.index
                                            ? t._e()
                                            : s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.back();
                                                          },
                                                      },
                                                  },
                                                  [t._v("Back")]
                                              ),
                                    ]),
                                ]),
                            ]),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-md-6 grid-margin" }, [
                                      s("ul", { staticClass: "navbar-nav mr-lg-4 w-100" }, [
                                          s("li", { staticClass: "nav-item nav-search d-none d-lg-block w-100" }, [
                                              s("div", { staticClass: "input-group" }, [
                                                  t._m(1),
                                                  t._v(" "),
                                                  s("input", {
                                                      directives: [{ name: "model", rawName: "v-model", value: t.search, expression: "search" }],
                                                      staticClass: "form-control",
                                                      attrs: { type: "text", placeholder: "Search now", "aria-label": "search", "aria-describedby": "search" },
                                                      domProps: { value: t.search },
                                                      on: {
                                                          keyup: t.searchUnit,
                                                          input: function (e) {
                                                              e.target.composing || (t.search = e.target.value);
                                                          },
                                                      },
                                                  }),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s(
                                                  "div",
                                                  { staticClass: "table-responsive" },
                                                  [
                                                      s("table", { staticClass: "table", attrs: { "aria-describedby": "table series", id: "table series" } }, [
                                                          t._m(2),
                                                          t._v(" "),
                                                          s(
                                                              "tbody",
                                                              t._l(t.series.data, function (e) {
                                                                  return s("tr", { key: e.id }, [
                                                                      s("td", { staticClass: "text-center" }, [s("img", { attrs: { src: e.poster_path, alt: "poster path", height: "80", width: "80" } })]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.id))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.tmdb_id))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.name))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.vote_average))]),
                                                                      t._v(" "),
                                                                      1 === e.active
                                                                          ? s("td", { staticClass: "text-center" }, [s("label", { staticClass: "badge badge-success" }, [t._v("Visible")])])
                                                                          : s("td", { staticClass: "text-center" }, [s("label", { staticClass: "badge badge-danger" }, [t._v("Invisible")])]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [
                                                                          s("div", { staticClass: "list-icons" }, [
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item mr-2",
                                                                                      attrs: { "data-original-title": "Send Notification", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.send(e);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-bell-ring menu-icon", staticStyle: { color: "#4d83ff" } })]
                                                                              ),
                                                                              t._v(" "),
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item mr-2",
                                                                                      attrs: { "data-original-title": "Edit", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.editing(e);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-pencil fa-lg", staticStyle: { color: "#4d83ff" } })]
                                                                              ),
                                                                              t._v(" "),
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item text-warning",
                                                                                      attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.destroy(e.id);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                              ),
                                                                          ]),
                                                                      ]),
                                                                  ]);
                                                              }),
                                                              0
                                                          ),
                                                      ]),
                                                      t._v(" "),
                                                      s("pagination", { staticClass: "mb-0", attrs: { data: t.series, "show-disabled": !1, limit: 5, size: t.size, align: t.align }, on: { "pagination-change-page": t.getResults } }),
                                                  ],
                                                  1
                                              ),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.add || t.edit
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s("section", [
                                                  s("div", { staticClass: "poster-container" }, [
                                                      t.form.serie.poster_path
                                                          ? s("img", { staticClass: "poster", attrs: { src: t.form.serie.poster_path, alt: "serie poster", "data-loaded": "true", height: "316", width: "210" } })
                                                          : t._e(),
                                                      t._v(" "),
                                                      s("div", { staticClass: "many-inputs" }, [
                                                          s("div", { staticClass: "input-container" }, [
                                                              s(
                                                                  "div",
                                                                  { staticClass: "form-group" },
                                                                  [
                                                                      s("autocomplete", {
                                                                          attrs: { search: t.getSearchByName, placeholder: "Search Serie by Name", "aria-label": "Search Serie by Name", "get-result-value": t.getResultValue },
                                                                          on: { submit: t.onSubmit },
                                                                      }),
                                                                  ],
                                                                  1
                                                              ),
                                                              t._v(" "),
                                                              t.add
                                                                  ? s("div", { staticClass: "form-group" }, [
                                                                        s("div", { staticClass: "input-group" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.tmdb, expression: "tmdb" }],
                                                                                staticClass: "form-control",
                                                                                attrs: { type: "text", placeholder: "Example : tt7286456", "aria-label": "Search Movie" },
                                                                                domProps: { value: t.tmdb },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || (t.tmdb = e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "input-group-append" }, [
                                                                                s(
                                                                                    "button",
                                                                                    {
                                                                                        staticClass: "btn btn-sm btn-primary",
                                                                                        attrs: { type: "type", disabled: !t.settings.tmdb_api_key },
                                                                                        on: {
                                                                                            click: function (e) {
                                                                                                return t.getSerie_Find();
                                                                                            },
                                                                                        },
                                                                                    },
                                                                                    [t._v("Search")]
                                                                                ),
                                                                            ]),
                                                                        ]),
                                                                    ])
                                                                  : t._e(),
                                                              t._v(" "),
                                                              t.edit
                                                                  ? s("div", { staticClass: "form-group" }, [
                                                                        s("div", { staticClass: "input-group" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.tmdb, expression: "tmdb" }],
                                                                                staticClass: "form-control",
                                                                                attrs: { type: "text", placeholder: "Example : tt7286456", "aria-label": "Search Movie" },
                                                                                domProps: { value: t.tmdb },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || (t.tmdb = e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "input-group-append" }, [
                                                                                s(
                                                                                    "button",
                                                                                    {
                                                                                        staticClass: "btn btn-sm btn-primary",
                                                                                        attrs: { type: "type", disabled: !t.settings.tmdb_api_key },
                                                                                        on: {
                                                                                            click: function (e) {
                                                                                                return t.getSerie();
                                                                                            },
                                                                                        },
                                                                                    },
                                                                                    [t._v("Search")]
                                                                                ),
                                                                            ]),
                                                                        ]),
                                                                    ])
                                                                  : t._e(),
                                                              t._v(" "),
                                                              s("div", { staticClass: "input-container" }, [
                                                                  s("div", { staticClass: "row" }, [
                                                                      s("div", { staticClass: "col-md-3" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "name" } }, [t._v("Serie Name")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.serie.name, expression: "form.serie.name" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "name", type: "text" },
                                                                                  domProps: { value: t.form.serie.name },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.serie, "name", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-3" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "imdb_external_id" } }, [t._v("External IMDB ID")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.serie.imdb_external_id, expression: "form.serie.imdb_external_id" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "imdb_external_id", type: "text" },
                                                                                  domProps: { value: t.form.serie.imdb_external_id },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.serie, "imdb_external_id", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-3" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "original_name" } }, [t._v("Original title")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.serie.original_name, expression: "form.serie.original_name" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "original_name", type: "text" },
                                                                                  domProps: { value: t.form.serie.original_name },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.serie, "original_name", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-3" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "subtitle" } }, [t._v("Sub Title")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.serie.subtitle, expression: "form.serie.subtitle" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "subtitle", type: "text" },
                                                                                  domProps: { value: t.form.serie.subtitle },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.serie, "subtitle", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                  ]),
                                                              ]),
                                                              t._v(" "),
                                                              s("div", { staticClass: "input-container" }, [
                                                                  s("div", { staticClass: "row" }, [
                                                                      s("div", { staticClass: "col-md-4" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                  s("input", {
                                                                                      directives: [{ name: "model", rawName: "v-model", value: t.form.serie.premuim, expression: "form.serie.premuim" }],
                                                                                      staticClass: "custom-control-input",
                                                                                      attrs: { placeholder: "Premuim", id: "premuim", type: "checkbox" },
                                                                                      domProps: { checked: Array.isArray(t.form.serie.premuim) ? t._i(t.form.serie.premuim, null) > -1 : t.form.serie.premuim },
                                                                                      on: {
                                                                                          change: function (e) {
                                                                                              var s = t.form.serie.premuim,
                                                                                                  a = e.target,
                                                                                                  i = !!a.checked;
                                                                                              if (Array.isArray(s)) {
                                                                                                  var r = t._i(s, null);
                                                                                                  a.checked
                                                                                                      ? r < 0 && t.$set(t.form.serie, "premuim", s.concat([null]))
                                                                                                      : r > -1 && t.$set(t.form.serie, "premuim", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                              } else t.$set(t.form.serie, "premuim", i);
                                                                                          },
                                                                                      },
                                                                                  }),
                                                                                  t._v(" "),
                                                                                  s("label", { staticClass: "custom-control-label", attrs: { for: "premuim" } }, [
                                                                                      t._v("\n                              Premuim\n                              Only\n                            "),
                                                                                  ]),
                                                                              ]),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      t.edit
                                                                          ? s("div", { staticClass: "col-md-3" }, [
                                                                                s("div", { staticClass: "form-group" }, [
                                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                        s("input", {
                                                                                            directives: [{ name: "model", rawName: "v-model", value: t.form.serie.active, expression: "form.serie.active" }],
                                                                                            staticClass: "custom-control-input",
                                                                                            attrs: { id: "active", type: "checkbox" },
                                                                                            domProps: { checked: Array.isArray(t.form.serie.active) ? t._i(t.form.serie.active, null) > -1 : t.form.serie.active },
                                                                                            on: {
                                                                                                change: function (e) {
                                                                                                    var s = t.form.serie.active,
                                                                                                        a = e.target,
                                                                                                        i = !!a.checked;
                                                                                                    if (Array.isArray(s)) {
                                                                                                        var r = t._i(s, null);
                                                                                                        a.checked
                                                                                                            ? r < 0 && t.$set(t.form.serie, "active", s.concat([null]))
                                                                                                            : r > -1 && t.$set(t.form.serie, "active", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                                    } else t.$set(t.form.serie, "active", i);
                                                                                                },
                                                                                            },
                                                                                        }),
                                                                                        t._v(" "),
                                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "active" } }, [t._v("Active")]),
                                                                                    ]),
                                                                                ]),
                                                                            ])
                                                                          : t._e(),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-4" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                  s("input", {
                                                                                      directives: [{ name: "model", rawName: "v-model", value: t.form.serie.newEpisodes, expression: "form.serie.newEpisodes" }],
                                                                                      staticClass: "custom-control-input",
                                                                                      attrs: { id: "newEpisodes", type: "checkbox" },
                                                                                      domProps: { checked: Array.isArray(t.form.serie.newEpisodes) ? t._i(t.form.serie.newEpisodes, null) > -1 : t.form.serie.newEpisodes },
                                                                                      on: {
                                                                                          change: function (e) {
                                                                                              var s = t.form.serie.newEpisodes,
                                                                                                  a = e.target,
                                                                                                  i = !!a.checked;
                                                                                              if (Array.isArray(s)) {
                                                                                                  var r = t._i(s, null);
                                                                                                  a.checked
                                                                                                      ? r < 0 && t.$set(t.form.serie, "newEpisodes", s.concat([null]))
                                                                                                      : r > -1 && t.$set(t.form.serie, "newEpisodes", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                              } else t.$set(t.form.serie, "newEpisodes", i);
                                                                                          },
                                                                                      },
                                                                                  }),
                                                                                  t._v(" "),
                                                                                  s("label", { staticClass: "custom-control-label", attrs: { for: "newEpisodes" } }, [t._v("Has New episodes ?")]),
                                                                              ]),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-3" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                  s("input", {
                                                                                      directives: [{ name: "model", rawName: "v-model", value: t.form.serie.pinned, expression: "form.serie.pinned" }],
                                                                                      staticClass: "custom-control-input",
                                                                                      attrs: { id: "pinned", type: "checkbox" },
                                                                                      domProps: { checked: Array.isArray(t.form.serie.pinned) ? t._i(t.form.serie.pinned, null) > -1 : t.form.serie.pinned },
                                                                                      on: {
                                                                                          change: function (e) {
                                                                                              var s = t.form.serie.pinned,
                                                                                                  a = e.target,
                                                                                                  i = !!a.checked;
                                                                                              if (Array.isArray(s)) {
                                                                                                  var r = t._i(s, null);
                                                                                                  a.checked
                                                                                                      ? r < 0 && t.$set(t.form.serie, "pinned", s.concat([null]))
                                                                                                      : r > -1 && t.$set(t.form.serie, "pinned", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                              } else t.$set(t.form.serie, "pinned", i);
                                                                                          },
                                                                                      },
                                                                                  }),
                                                                                  t._v(" "),
                                                                                  s("label", { staticClass: "custom-control-label", attrs: { for: "pinned" } }, [t._v("Pinned")]),
                                                                              ]),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      t.add
                                                                          ? s("div", { staticClass: "col-md-4" }, [
                                                                                s("div", { staticClass: "form-group" }, [
                                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                        s("input", {
                                                                                            directives: [{ name: "model", rawName: "v-model", value: t.form.notification, expression: "form.notification" }],
                                                                                            staticClass: "custom-control-input",
                                                                                            attrs: { id: "notification", type: "checkbox" },
                                                                                            domProps: { checked: Array.isArray(t.form.notification) ? t._i(t.form.notification, null) > -1 : t.form.notification },
                                                                                            on: {
                                                                                                change: function (e) {
                                                                                                    var s = t.form.notification,
                                                                                                        a = e.target,
                                                                                                        i = !!a.checked;
                                                                                                    if (Array.isArray(s)) {
                                                                                                        var r = t._i(s, null);
                                                                                                        a.checked
                                                                                                            ? r < 0 && t.$set(t.form, "notification", s.concat([null]))
                                                                                                            : r > -1 && t.$set(t.form, "notification", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                                    } else t.$set(t.form, "notification", i);
                                                                                                },
                                                                                            },
                                                                                        }),
                                                                                        t._v(" "),
                                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "notification" } }, [t._v("Push notification")]),
                                                                                    ]),
                                                                                ]),
                                                                            ])
                                                                          : t._e(),
                                                                  ]),
                                                              ]),
                                                              t._v(" "),
                                                              s("div", { staticClass: "input-container" }, [
                                                                  s("div", { staticClass: "row" }, [
                                                                      s("div", { staticClass: "col-md-6" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "poster_path" } }, [t._v("Poster Path")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.serie.poster_path, expression: "form.serie.poster_path" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { placeholder: "Serie Poster Path", id: "poster_path", name: "poster_path", type: "text" },
                                                                                  domProps: { value: t.form.serie.poster_path },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.serie, "poster_path", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-6" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", [t._v("Poster upload")]),
                                                                              t._v(" "),
                                                                              s("input", { staticClass: "file-upload-default" }),
                                                                              t._v(" "),
                                                                              s("div", { staticClass: "input-group col-xs-12" }, [
                                                                                  s("input", {
                                                                                      staticClass: "form-control file-upload-info",
                                                                                      attrs: { id: "poster", placeholder: "Upload Image", type: "file" },
                                                                                      on: { change: t.storePoster },
                                                                                  }),
                                                                                  t._v(" "),
                                                                                  t._m(3),
                                                                              ]),
                                                                          ]),
                                                                      ]),
                                                                  ]),
                                                              ]),
                                                              t._v(" "),
                                                              s("div", { staticClass: "row" }, [
                                                                  s("div", { staticClass: "col-md-12" }, [
                                                                      s(
                                                                          "div",
                                                                          { staticClass: "form-group" },
                                                                          [
                                                                              s("multiselect", {
                                                                                  attrs: {
                                                                                      "clear-on-select": !1,
                                                                                      "close-on-select": !1,
                                                                                      hideSelected: !0,
                                                                                      multiple: !0,
                                                                                      options: t.options,
                                                                                      "preserve-search": !0,
                                                                                      label: "name",
                                                                                      placeholder: "Select Genre",
                                                                                      "track-by": "name",
                                                                                  },
                                                                                  on: { remove: t.destroyGenre },
                                                                                  model: {
                                                                                      value: t.form.serie.genres,
                                                                                      callback: function (e) {
                                                                                          t.$set(t.form.serie, "genres", e);
                                                                                      },
                                                                                      expression: "form.serie.genres",
                                                                                  },
                                                                              }),
                                                                          ],
                                                                          1
                                                                      ),
                                                                  ]),
                                                              ]),
                                                              t._v(" "),
                                                              s("div", { staticClass: "row" }, [
                                                                  s("div", { staticClass: "col-md-6" }, [
                                                                      s("div", { staticClass: "form-group" }, [
                                                                          s("label", { attrs: { for: "poster_path" } }, [t._v("Backdrop Path")]),
                                                                          t._v(" "),
                                                                          s("input", {
                                                                              directives: [{ name: "model", rawName: "v-model", value: t.form.serie.backdrop_path, expression: "form.serie.backdrop_path" }],
                                                                              staticClass: "form-control",
                                                                              attrs: { placeholder: "Serie Backdrop Path", id: "backdrop_path", name: "backdrop_path", type: "text" },
                                                                              domProps: { value: t.form.serie.backdrop_path },
                                                                              on: {
                                                                                  input: function (e) {
                                                                                      e.target.composing || t.$set(t.form.serie, "backdrop_path", e.target.value);
                                                                                  },
                                                                              },
                                                                          }),
                                                                      ]),
                                                                  ]),
                                                                  t._v(" "),
                                                                  s("div", { staticClass: "col-md-6" }, [
                                                                      s("div", { staticClass: "form-group" }, [
                                                                          s("label", [t._v("Backdrop upload")]),
                                                                          t._v(" "),
                                                                          s("input", { staticClass: "file-upload-default" }),
                                                                          t._v(" "),
                                                                          s("div", { staticClass: "input-group col-xs-12" }, [
                                                                              s("input", {
                                                                                  staticClass: "form-control file-upload-info",
                                                                                  attrs: { id: "backdrop", placeholder: "Upload Image", type: "file" },
                                                                                  on: { change: t.storeBackdrop },
                                                                              }),
                                                                              t._v(" "),
                                                                              t._m(4),
                                                                          ]),
                                                                      ]),
                                                                  ]),
                                                              ]),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      t._m(5),
                                                      t._v(" "),
                                                      s("div", { staticClass: "row" }, [
                                                          s("div", { staticClass: "col-md-12" }, [
                                                              s(
                                                                  "div",
                                                                  { staticClass: "form-group" },
                                                                  [
                                                                      s("multiselect", {
                                                                          attrs: {
                                                                              "clear-on-select": !1,
                                                                              "close-on-select": !1,
                                                                              hideSelected: !0,
                                                                              multiple: !0,
                                                                              options: t.optionsnetwork,
                                                                              "preserve-search": !0,
                                                                              "open-direction": "bottom",
                                                                              noResult: "No Cast found. Consider changing the search query",
                                                                              "track-by": "id",
                                                                              label: "name",
                                                                              placeholder: "Select Network",
                                                                          },
                                                                          on: { remove: t.destroyNetwork },
                                                                          model: {
                                                                              value: t.form.serie.networks,
                                                                              callback: function (e) {
                                                                                  t.$set(t.form.serie, "networks", e);
                                                                              },
                                                                              expression: "form.serie.networks",
                                                                          },
                                                                      }),
                                                                  ],
                                                                  1
                                                              ),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      t._m(6),
                                                      t._v(" "),
                                                      s("div", { staticClass: "row" }, [
                                                          s("div", { staticClass: "col-md-4" }, [
                                                              s("div", { staticClass: "form-group" }, [
                                                                  s("label", { attrs: { for: "preview_path" } }, [t._v("Youtube Trailer ID")]),
                                                                  t._v(" "),
                                                                  s("input", {
                                                                      directives: [{ name: "model", rawName: "v-model", value: t.form.serie.preview_path, expression: "form.serie.preview_path" }],
                                                                      staticClass: "form-control",
                                                                      attrs: { id: "preview_path", type: "text" },
                                                                      domProps: { value: t.form.serie.preview_path },
                                                                      on: {
                                                                          input: function (e) {
                                                                              e.target.composing || t.$set(t.form.serie, "preview_path", e.target.value);
                                                                          },
                                                                      },
                                                                  }),
                                                              ]),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "col-md-4" }, [
                                                              s("div", { staticClass: "form-group" }, [
                                                                  s("label", { attrs: { for: "trailer_url" } }, [t._v("Youtube Trailer Self Hosted")]),
                                                                  t._v(" "),
                                                                  s("input", {
                                                                      directives: [{ name: "model", rawName: "v-model", value: t.form.serie.trailer_url, expression: "form.serie.trailer_url" }],
                                                                      staticClass: "form-control",
                                                                      attrs: { id: "trailer_url", type: "text" },
                                                                      domProps: { value: t.form.serie.trailer_url },
                                                                      on: {
                                                                          input: function (e) {
                                                                              e.target.composing || t.$set(t.form.serie, "trailer_url", e.target.value);
                                                                          },
                                                                      },
                                                                  }),
                                                              ]),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "col-md-4" }, [
                                                              s("div", { staticClass: "form-group" }, [
                                                                  s("label", [t._v("Upload Trailer")]),
                                                                  t._v(" "),
                                                                  s("input", { staticClass: "file-upload-default" }),
                                                                  t._v(" "),
                                                                  s("div", { staticClass: "input-group col-xs-12" }, [
                                                                      s("input", {
                                                                          staticClass: "form-control file-upload-info",
                                                                          attrs: { id: "video_trailer", placeholder: "Upload Image", type: "file" },
                                                                          on: { change: t.storeVideoTrailer },
                                                                      }),
                                                                      t._v(" "),
                                                                      t._m(7),
                                                                  ]),
                                                              ]),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      t._m(8),
                                                      t._v(" "),
                                                      s("div", { staticClass: "row" }, [
                                                          s("div", { staticClass: "col-md-12" }, [
                                                              s(
                                                                  "div",
                                                                  { staticClass: "form-group" },
                                                                  [
                                                                      s("multiselect", {
                                                                          attrs: {
                                                                              "clear-on-select": !1,
                                                                              "close-on-select": !1,
                                                                              hideSelected: !0,
                                                                              multiple: !0,
                                                                              options: t.optionscast,
                                                                              "preserve-search": !0,
                                                                              "open-direction": "bottom",
                                                                              noResult: "No Cast found. Consider changing the search query",
                                                                              "track-by": "id",
                                                                              label: "name",
                                                                              placeholder: "Select Genre",
                                                                          },
                                                                          on: { remove: t.destroyCast, "search-change": t.onLaunchSearchCasters },
                                                                          model: {
                                                                              value: t.form.serie.casterslist,
                                                                              callback: function (e) {
                                                                                  t.$set(t.form.serie, "casterslist", e);
                                                                              },
                                                                              expression: "form.serie.casterslist",
                                                                          },
                                                                      }),
                                                                  ],
                                                                  1
                                                              ),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "overview" } }, [t._v("Details")]),
                                                              t._v(" "),
                                                              s("textarea", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.serie.overview, expression: "form.serie.overview" }],
                                                                  staticClass: "form-control pb-3",
                                                                  attrs: { id: "overview", rows: "6", type: "text" },
                                                                  domProps: { value: t.form.serie.overview },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.serie, "overview", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-4" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "release_date" } }, [t._v("Release Date")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.serie.first_air_date, expression: "form.serie.first_air_date" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { placeholder: "Release Date", id: "release_date", type: "date" },
                                                                  domProps: { value: t.form.serie.first_air_date },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.serie, "first_air_date", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                      t._v(" "),
                                                      s("div", { staticClass: "col-md-4" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "vote_average" } }, [t._v("Vote Average")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.serie.vote_average, expression: "form.serie.vote_average" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { placeholder: "Vote Average", id: "vote_average", type: "text" },
                                                                  domProps: { value: t.form.serie.vote_average },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.serie, "vote_average", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-6" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "vote_count" } }, [t._v("Vote Count")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.serie.vote_count, expression: "form.serie.vote_count" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "vote_count", type: "text" },
                                                                  domProps: { value: t.form.serie.vote_count },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.serie, "vote_count", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                      t._v(" "),
                                                      s("div", { staticClass: "col-md-6" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "popularity" } }, [t._v("Popularity")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.serie.popularity, expression: "form.serie.popularity" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { placeholder: "Popularity", id: "popularity", type: "text" },
                                                                  domProps: { value: t.form.serie.popularity },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.serie, "popularity", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  t._m(9),
                                                  t._v(" "),
                                                  s(
                                                      "div",
                                                      { staticClass: "row" },
                                                      [
                                                          s(
                                                              "div",
                                                              { staticClass: "col-md-6" },
                                                              [
                                                                  s("div", { staticClass: "input-group" }, [
                                                                      s("input", {
                                                                          directives: [{ name: "model", rawName: "v-model", value: t.addseason, expression: "addseason" }],
                                                                          staticClass: "form-control input",
                                                                          attrs: { type: "text", placeholder: "Season number" },
                                                                          domProps: { value: t.addseason },
                                                                          on: {
                                                                              input: function (e) {
                                                                                  e.target.composing || (t.addseason = e.target.value);
                                                                              },
                                                                          },
                                                                      }),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "input-group-btn" }, [
                                                                          s(
                                                                              "button",
                                                                              {
                                                                                  staticClass: "btn btn-primary ml-2",
                                                                                  attrs: { type: "submit" },
                                                                                  on: {
                                                                                      click: function (e) {
                                                                                          return e.preventDefault(), t.getSeason();
                                                                                      },
                                                                                  },
                                                                              },
                                                                              [t._v("Add from TMDB")]
                                                                          ),
                                                                          t._v(" "),
                                                                          s(
                                                                              "button",
                                                                              {
                                                                                  staticClass: "btn btn-primary ml-2",
                                                                                  attrs: { type: "submit" },
                                                                                  on: {
                                                                                      click: function (e) {
                                                                                          t.showModalSeason = !0;
                                                                                      },
                                                                                  },
                                                                              },
                                                                              [t._v("Add Custom Season")]
                                                                          ),
                                                                      ]),
                                                                  ]),
                                                                  t._v(" "),
                                                                  s(
                                                                      "Modal",
                                                                      {
                                                                          attrs: { title: "Add New Season" },
                                                                          model: {
                                                                              value: t.showModalSeason,
                                                                              callback: function (e) {
                                                                                  t.showModalSeason = e;
                                                                              },
                                                                              expression: "showModalSeason",
                                                                          },
                                                                      },
                                                                      [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "season_number" } }, [t._v("Season Number")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.customSeason.season_number, expression: "customSeason.season_number" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "season_number", type: "text" },
                                                                                  domProps: { value: t.customSeason.season_number },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.customSeason, "season_number", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                          t._v(" "),
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "season_number" } }, [t._v("Season Name")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.customSeason.name, expression: "customSeason.name" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "name", type: "text" },
                                                                                  domProps: { value: t.customSeason.name },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.customSeason, "name", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                          t._v(" "),
                                                                          s("label", { attrs: { for: "seasonoverview" } }, [t._v("Season Overview")]),
                                                                          t._v(" "),
                                                                          s("textarea", {
                                                                              directives: [{ name: "model", rawName: "v-model", value: t.customSeason.overview, expression: "customSeason.overview" }],
                                                                              staticClass: "form-control",
                                                                              attrs: { id: "seasonoverview", required: "" },
                                                                              domProps: { value: t.customSeason.overview },
                                                                              on: {
                                                                                  input: function (e) {
                                                                                      e.target.composing || t.$set(t.customSeason, "overview", e.target.value);
                                                                                  },
                                                                              },
                                                                          }),
                                                                          t._v(" "),
                                                                          s("div", { staticClass: "col-md-12 grid-margin" }, [
                                                                              s("div", { staticClass: "d-flex justify-content-between flex-wrap" }, [
                                                                                  s("div", { staticClass: "d-flex align-items-end flex-wrap" }, [s("div", { staticClass: "d-flex" })]),
                                                                                  t._v(" "),
                                                                                  s("div", { staticClass: "d-flex justify-content-between align-items-end flex-wrap" }, [
                                                                                      s("div", { staticClass: "form-group" }, [
                                                                                          s(
                                                                                              "button",
                                                                                              {
                                                                                                  staticClass: "btn btn-primary ml-2",
                                                                                                  attrs: { type: "submit" },
                                                                                                  on: {
                                                                                                      click: function (e) {
                                                                                                          return e.preventDefault(), t.addNewSeason();
                                                                                                      },
                                                                                                  },
                                                                                              },
                                                                                              [t._v("Save")]
                                                                                          ),
                                                                                      ]),
                                                                                  ]),
                                                                              ]),
                                                                          ]),
                                                                      ]
                                                                  ),
                                                                  t._v(" "),
                                                                  s(
                                                                      "div",
                                                                      { staticClass: "form-group" },
                                                                      [
                                                                          s("label", { attrs: { for: "season" } }, [t._v("Season")]),
                                                                          t._v(" "),
                                                                          s("multiselect", {
                                                                              attrs: {
                                                                                  "deselect-label": "Can't remove this value",
                                                                                  "track-by": "season_number",
                                                                                  label: "season_number",
                                                                                  placeholder: "Select season",
                                                                                  options: t.form.serie.seasons,
                                                                                  searchable: !0,
                                                                                  "allow-empty": !1,
                                                                              },
                                                                              on: { select: t.selectSeason },
                                                                              scopedSlots: t._u(
                                                                                  [
                                                                                      {
                                                                                          key: "singleLabel",
                                                                                          fn: function (e) {
                                                                                              return [s("span", { staticClass: "option__title ml-1" }, [t._v(t._s(e.option.name))])];
                                                                                          },
                                                                                      },
                                                                                  ],
                                                                                  null,
                                                                                  !1,
                                                                                  3162673735
                                                                              ),
                                                                              model: {
                                                                                  value: t.season,
                                                                                  callback: function (e) {
                                                                                      t.season = e;
                                                                                  },
                                                                                  expression: "season",
                                                                              },
                                                                          }),
                                                                      ],
                                                                      1
                                                                  ),
                                                                  t._v(" "),
                                                                  t.selectedSeason >= 0 && t.form.serie.seasons[t.selectedSeason]
                                                                      ? s("div", { staticClass: "form-group" }, [
                                                                            s("label", { attrs: { for: "seasonoverview" } }, [t._v("Season Number")]),
                                                                            t._v(" "),
                                                                            s("textarea", {
                                                                                directives: [
                                                                                    {
                                                                                        name: "model",
                                                                                        rawName: "v-model",
                                                                                        value: t.form.serie.seasons[t.selectedSeason].season_number,
                                                                                        expression: "form.serie.seasons[selectedSeason].season_number",
                                                                                    },
                                                                                ],
                                                                                staticClass: "form-control",
                                                                                attrs: { id: "seasonoverview", required: "" },
                                                                                domProps: { value: t.form.serie.seasons[t.selectedSeason].season_number },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || t.$set(t.form.serie.seasons[t.selectedSeason], "season_number", e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { attrs: { for: "seasonoverview" } }, [t._v("Season Name")]),
                                                                            t._v(" "),
                                                                            s("textarea", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.form.serie.seasons[t.selectedSeason].name, expression: "form.serie.seasons[selectedSeason].name" }],
                                                                                staticClass: "form-control",
                                                                                attrs: { id: "seasonoverview", required: "" },
                                                                                domProps: { value: t.form.serie.seasons[t.selectedSeason].name },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || t.$set(t.form.serie.seasons[t.selectedSeason], "name", e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                        ])
                                                                      : t._e(),
                                                                  t._v(" "),
                                                                  t.selectedSeason >= 0
                                                                      ? s("div", { staticClass: "float-right my-2" }, [
                                                                            s(
                                                                                "button",
                                                                                {
                                                                                    staticClass: "btn btn-danger mr-2",
                                                                                    on: {
                                                                                        click: function (e) {
                                                                                            return t.destroySeason();
                                                                                        },
                                                                                    },
                                                                                },
                                                                                [t._v("Delete Season")]
                                                                            ),
                                                                        ])
                                                                      : t._e(),
                                                              ],
                                                              1
                                                          ),
                                                          t._v(" "),
                                                          t.selectedSeason >= 0
                                                              ? [
                                                                    s(
                                                                        "div",
                                                                        { staticClass: "col-md-6" },
                                                                        [
                                                                            s("div", { staticClass: "input-group" }, [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.addepisode, expression: "addepisode" }],
                                                                                    staticClass: "form-control input",
                                                                                    attrs: { type: "text", placeholder: "Episode number" },
                                                                                    domProps: { value: t.addepisode },
                                                                                    on: {
                                                                                        input: function (e) {
                                                                                            e.target.composing || (t.addepisode = e.target.value);
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("div", { staticClass: "input-group-btn" }, [
                                                                                    s(
                                                                                        "button",
                                                                                        {
                                                                                            staticClass: "btn btn-primary ml-2",
                                                                                            attrs: { type: "submit" },
                                                                                            on: {
                                                                                                click: function (e) {
                                                                                                    return e.preventDefault(), t.getEpisode.apply(null, arguments);
                                                                                                },
                                                                                            },
                                                                                        },
                                                                                        [t._v("Add from TMDB")]
                                                                                    ),
                                                                                    t._v(" "),
                                                                                    s(
                                                                                        "button",
                                                                                        {
                                                                                            staticClass: "btn btn-primary ml-2",
                                                                                            attrs: { type: "submit" },
                                                                                            on: {
                                                                                                click: function (e) {
                                                                                                    t.showModal = !0;
                                                                                                },
                                                                                            },
                                                                                        },
                                                                                        [t._v("Add Custom Episode")]
                                                                                    ),
                                                                                    t._v(" "),
                                                                                    s("button", { staticClass: "btn btn-primary ml-2 disabled", attrs: { type: "submit" } }, [t._v("Add Bulk Links(Upcoming)")]),
                                                                                ]),
                                                                            ]),
                                                                            t._v(" "),
                                                                            s(
                                                                                "Modal",
                                                                                {
                                                                                    attrs: { title: "Add New Episode" },
                                                                                    model: {
                                                                                        value: t.showModalBulkLinks,
                                                                                        callback: function (e) {
                                                                                            t.showModalBulkLinks = e;
                                                                                        },
                                                                                        expression: "showModalBulkLinks",
                                                                                    },
                                                                                },
                                                                                [
                                                                                    s(
                                                                                        "div",
                                                                                        { staticClass: "row" },
                                                                                        [
                                                                                            s(
                                                                                                "vue-csv-import",
                                                                                                {
                                                                                                    attrs: { url: "/hello", "map-fields": ["name", "age"] },
                                                                                                    scopedSlots: t._u(
                                                                                                        [
                                                                                                            {
                                                                                                                key: "hasHeaders",
                                                                                                                fn: function (e) {
                                                                                                                    var a = e.headers,
                                                                                                                        i = e.toggle;
                                                                                                                    return [
                                                                                                                        s("label", [
                                                                                                                            s("input", { attrs: { type: "checkbox", id: "hasHeaders" }, domProps: { value: a }, on: { change: i } }),
                                                                                                                            t._v("\n            Headers?\n        "),
                                                                                                                        ]),
                                                                                                                    ];
                                                                                                                },
                                                                                                            },
                                                                                                            {
                                                                                                                key: "next",
                                                                                                                fn: function (e) {
                                                                                                                    var a = e.load;
                                                                                                                    return [
                                                                                                                        s(
                                                                                                                            "button",
                                                                                                                            {
                                                                                                                                on: {
                                                                                                                                    click: function (t) {
                                                                                                                                        return t.preventDefault(), a.apply(null, arguments);
                                                                                                                                    },
                                                                                                                                },
                                                                                                                            },
                                                                                                                            [t._v("load!")]
                                                                                                                        ),
                                                                                                                    ];
                                                                                                                },
                                                                                                            },
                                                                                                            {
                                                                                                                key: "submit",
                                                                                                                fn: function (e) {
                                                                                                                    var a = e.submit;
                                                                                                                    return [
                                                                                                                        s(
                                                                                                                            "button",
                                                                                                                            {
                                                                                                                                on: {
                                                                                                                                    click: function (t) {
                                                                                                                                        return t.preventDefault(), a.apply(null, arguments);
                                                                                                                                    },
                                                                                                                                },
                                                                                                                            },
                                                                                                                            [t._v("send!")]
                                                                                                                        ),
                                                                                                                    ];
                                                                                                                },
                                                                                                            },
                                                                                                        ],
                                                                                                        null,
                                                                                                        !1,
                                                                                                        2009367119
                                                                                                    ),
                                                                                                    model: {
                                                                                                        value: t.csv,
                                                                                                        callback: function (e) {
                                                                                                            t.csv = e;
                                                                                                        },
                                                                                                        expression: "csv",
                                                                                                    },
                                                                                                },
                                                                                                [
                                                                                                    t._v(" "),
                                                                                                    s("template", { slot: "error" }, [t._v("\n        File type is invalid\n    ")]),
                                                                                                    t._v(" "),
                                                                                                    s("template", { slot: "thead" }, [s("tr", [s("th", [t._v("My Fields")]), t._v(" "), s("th", [t._v("Column")])])]),
                                                                                                ],
                                                                                                2
                                                                                            ),
                                                                                            t._v(" "),
                                                                                            s("div", { staticClass: "col-md-6" }, [
                                                                                                s(
                                                                                                    "div",
                                                                                                    { staticClass: "form-group" },
                                                                                                    [
                                                                                                        s("label", { attrs: { for: "server" } }, [t._v("Serverxxxxxxx")]),
                                                                                                        t._v(" "),
                                                                                                        s("multiselect", {
                                                                                                            attrs: { options: t.servers, id: "server", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                                            model: {
                                                                                                                value: t.customEpisodesBulkLinks.server,
                                                                                                                callback: function (e) {
                                                                                                                    t.$set(t.customEpisodesBulkLinks, "server", e);
                                                                                                                },
                                                                                                                expression: "customEpisodesBulkLinks.server",
                                                                                                            },
                                                                                                        }),
                                                                                                    ],
                                                                                                    1
                                                                                                ),
                                                                                            ]),
                                                                                            t._v(" "),
                                                                                            s("div", { staticClass: "col-md-6" }, [
                                                                                                s(
                                                                                                    "div",
                                                                                                    { staticClass: "form-group" },
                                                                                                    [
                                                                                                        s("label", { attrs: { for: "lang" } }, [t._v("Language")]),
                                                                                                        t._v(" "),
                                                                                                        s("multiselect", {
                                                                                                            attrs: {
                                                                                                                options: t.langs,
                                                                                                                id: "lang",
                                                                                                                label: "english_name",
                                                                                                                placeholder: "Select one (default English)",
                                                                                                                "track-by": "iso_639_1",
                                                                                                            },
                                                                                                            model: {
                                                                                                                value: t.lang,
                                                                                                                callback: function (e) {
                                                                                                                    t.lang = e;
                                                                                                                },
                                                                                                                expression: "lang",
                                                                                                            },
                                                                                                        }),
                                                                                                    ],
                                                                                                    1
                                                                                                ),
                                                                                            ]),
                                                                                            t._v(" "),
                                                                                            s("div", { staticClass: "col-md-6" }, [
                                                                                                s("div", { staticClass: "form-group" }, [
                                                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                                        s("input", {
                                                                                                            directives: [
                                                                                                                {
                                                                                                                    name: "model",
                                                                                                                    rawName: "v-model",
                                                                                                                    value: t.customEpisodesBulkLinks.supported_hosts,
                                                                                                                    expression: "customEpisodesBulkLinks.supported_hosts",
                                                                                                                },
                                                                                                            ],
                                                                                                            staticClass: "custom-control-input",
                                                                                                            attrs: { id: "supported_hosts", type: "checkbox" },
                                                                                                            domProps: {
                                                                                                                checked: Array.isArray(t.customEpisodesBulkLinks.supported_hosts)
                                                                                                                    ? t._i(t.customEpisodesBulkLinks.supported_hosts, null) > -1
                                                                                                                    : t.customEpisodesBulkLinks.supported_hosts,
                                                                                                            },
                                                                                                            on: {
                                                                                                                change: function (e) {
                                                                                                                    var s = t.customEpisodesBulkLinks.supported_hosts,
                                                                                                                        a = e.target,
                                                                                                                        i = !!a.checked;
                                                                                                                    if (Array.isArray(s)) {
                                                                                                                        var r = t._i(s, null);
                                                                                                                        a.checked
                                                                                                                            ? r < 0 && t.$set(t.customEpisodesBulkLinks, "supported_hosts", s.concat([null]))
                                                                                                                            : r > -1 && t.$set(t.customEpisodesBulkLinks, "supported_hosts", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                                                    } else t.$set(t.customEpisodesBulkLinks, "supported_hosts", i);
                                                                                                                },
                                                                                                            },
                                                                                                        }),
                                                                                                        t._v(" "),
                                                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "supported_hosts" } }, [t._v("Supported Hosts")]),
                                                                                                    ]),
                                                                                                ]),
                                                                                                t._v(" "),
                                                                                                s("div", { staticClass: "form-group" }, [
                                                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                                        s("input", {
                                                                                                            directives: [
                                                                                                                { name: "model", rawName: "v-model", value: t.customEpisodesBulkLinks.embed, expression: "customEpisodesBulkLinks.embed" },
                                                                                                            ],
                                                                                                            staticClass: "custom-control-input",
                                                                                                            attrs: { id: "embed", type: "checkbox" },
                                                                                                            domProps: {
                                                                                                                checked: Array.isArray(t.customEpisodesBulkLinks.embed)
                                                                                                                    ? t._i(t.customEpisodesBulkLinks.embed, null) > -1
                                                                                                                    : t.customEpisodesBulkLinks.embed,
                                                                                                            },
                                                                                                            on: {
                                                                                                                change: function (e) {
                                                                                                                    var s = t.customEpisodesBulkLinks.embed,
                                                                                                                        a = e.target,
                                                                                                                        i = !!a.checked;
                                                                                                                    if (Array.isArray(s)) {
                                                                                                                        var r = t._i(s, null);
                                                                                                                        a.checked
                                                                                                                            ? r < 0 && t.$set(t.customEpisodesBulkLinks, "embed", s.concat([null]))
                                                                                                                            : r > -1 && t.$set(t.customEpisodesBulkLinks, "embed", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                                                    } else t.$set(t.customEpisodesBulkLinks, "embed", i);
                                                                                                                },
                                                                                                            },
                                                                                                        }),
                                                                                                        t._v(" "),
                                                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "embed" } }, [t._v("Embed")]),
                                                                                                    ]),
                                                                                                ]),
                                                                                                t._v(" "),
                                                                                                s("div", { staticClass: "form-group" }, [
                                                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                                        s("input", {
                                                                                                            directives: [
                                                                                                                { name: "model", rawName: "v-model", value: t.customEpisodesBulkLinks.hls, expression: "customEpisodesBulkLinks.hls" },
                                                                                                            ],
                                                                                                            staticClass: "custom-control-input",
                                                                                                            attrs: { id: "hls", type: "checkbox" },
                                                                                                            domProps: {
                                                                                                                checked: Array.isArray(t.customEpisodesBulkLinks.hls)
                                                                                                                    ? t._i(t.customEpisodesBulkLinks.hls, null) > -1
                                                                                                                    : t.customEpisodesBulkLinks.hls,
                                                                                                            },
                                                                                                            on: {
                                                                                                                change: function (e) {
                                                                                                                    var s = t.customEpisodesBulkLinks.hls,
                                                                                                                        a = e.target,
                                                                                                                        i = !!a.checked;
                                                                                                                    if (Array.isArray(s)) {
                                                                                                                        var r = t._i(s, null);
                                                                                                                        a.checked
                                                                                                                            ? r < 0 && t.$set(t.customEpisodesBulkLinks, "hls", s.concat([null]))
                                                                                                                            : r > -1 && t.$set(t.customEpisodesBulkLinks, "hls", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                                                    } else t.$set(t.customEpisodesBulkLinks, "hls", i);
                                                                                                                },
                                                                                                            },
                                                                                                        }),
                                                                                                        t._v(" "),
                                                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "hls" } }, [t._v("HlS Link  (PHP FORMAT)")]),
                                                                                                    ]),
                                                                                                ]),
                                                                                            ]),
                                                                                        ],
                                                                                        1
                                                                                    ),
                                                                                    t._v(" "),
                                                                                    s("div", { staticClass: "form-group" }, [
                                                                                        s("label", { attrs: { for: "season_number" } }, [t._v("Episode Link format")]),
                                                                                        t._v(" "),
                                                                                        s("input", {
                                                                                            directives: [{ name: "model", rawName: "v-model", value: t.customEpisodesBulkLinks.link, expression: "customEpisodesBulkLinks.link" }],
                                                                                            staticClass: "form-control",
                                                                                            attrs: { id: "name", type: "text" },
                                                                                            domProps: { value: t.customEpisodesBulkLinks.link },
                                                                                            on: {
                                                                                                input: function (e) {
                                                                                                    e.target.composing || t.$set(t.customEpisodesBulkLinks, "link", e.target.value);
                                                                                                },
                                                                                            },
                                                                                        }),
                                                                                    ]),
                                                                                    t._v(" "),
                                                                                    s("div", { staticClass: "form-group" }, [
                                                                                        s("label", { attrs: { for: "season_number" } }, [t._v("Link Extentions")]),
                                                                                        t._v(" "),
                                                                                        s("input", {
                                                                                            directives: [{ name: "model", rawName: "v-model", value: t.customEpisodesBulkLinks.ext, expression: "customEpisodesBulkLinks.ext" }],
                                                                                            staticClass: "form-control",
                                                                                            attrs: { id: "name", type: "text" },
                                                                                            domProps: { value: t.customEpisodesBulkLinks.ext },
                                                                                            on: {
                                                                                                input: function (e) {
                                                                                                    e.target.composing || t.$set(t.customEpisodesBulkLinks, "ext", e.target.value);
                                                                                                },
                                                                                            },
                                                                                        }),
                                                                                    ]),
                                                                                    t._v(" "),
                                                                                    s("div", { staticClass: "input-group" }, [
                                                                                        s("div", { staticClass: "input-group-btn" }, [
                                                                                            s(
                                                                                                "button",
                                                                                                {
                                                                                                    staticClass: "btn btn-primary ml-2",
                                                                                                    attrs: { type: "submit" },
                                                                                                    on: {
                                                                                                        click: function (e) {
                                                                                                            return e.preventDefault(), t.addBulkEpisodeLinks();
                                                                                                        },
                                                                                                    },
                                                                                                },
                                                                                                [t._v("Save")]
                                                                                            ),
                                                                                        ]),
                                                                                    ]),
                                                                                ]
                                                                            ),
                                                                            t._v(" "),
                                                                            s(
                                                                                "Modal",
                                                                                {
                                                                                    attrs: { title: "Add New Episode" },
                                                                                    model: {
                                                                                        value: t.showModal,
                                                                                        callback: function (e) {
                                                                                            t.showModal = e;
                                                                                        },
                                                                                        expression: "showModal",
                                                                                    },
                                                                                },
                                                                                [
                                                                                    s("label", { attrs: { for: "episode_number" } }, [t._v("Episode Number")]),
                                                                                    t._v(" "),
                                                                                    s("textarea", {
                                                                                        directives: [{ name: "model", rawName: "v-model", value: t.customEpisodes.episode_number, expression: "customEpisodes.episode_number" }],
                                                                                        staticClass: "form-control",
                                                                                        attrs: { id: "episode_number", required: "" },
                                                                                        domProps: { value: t.customEpisodes.episode_number },
                                                                                        on: {
                                                                                            input: function (e) {
                                                                                                e.target.composing || t.$set(t.customEpisodes, "episode_number", e.target.value);
                                                                                            },
                                                                                        },
                                                                                    }),
                                                                                    t._v(" "),
                                                                                    s("label", { attrs: { for: "episode_number" } }, [t._v("Episode Name")]),
                                                                                    t._v(" "),
                                                                                    s("textarea", {
                                                                                        directives: [{ name: "model", rawName: "v-model", value: t.customEpisodes.name, expression: "customEpisodes.name" }],
                                                                                        staticClass: "form-control",
                                                                                        attrs: { id: "name", required: "" },
                                                                                        domProps: { value: t.customEpisodes.name },
                                                                                        on: {
                                                                                            input: function (e) {
                                                                                                e.target.composing || t.$set(t.customEpisodes, "name", e.target.value);
                                                                                            },
                                                                                        },
                                                                                    }),
                                                                                    t._v(" "),
                                                                                    s("label", { attrs: { for: "seasonoverview" } }, [t._v("Episode Overview")]),
                                                                                    t._v(" "),
                                                                                    s("textarea", {
                                                                                        directives: [{ name: "model", rawName: "v-model", value: t.customEpisodes.overview, expression: "customEpisodes.overview" }],
                                                                                        staticClass: "form-control",
                                                                                        attrs: { id: "seasonoverview", required: "" },
                                                                                        domProps: { value: t.customEpisodes.overview },
                                                                                        on: {
                                                                                            input: function (e) {
                                                                                                e.target.composing || t.$set(t.customEpisodes, "overview", e.target.value);
                                                                                            },
                                                                                        },
                                                                                    }),
                                                                                    t._v(" "),
                                                                                    s("div", { staticClass: "input-group" }, [
                                                                                        s("div", { staticClass: "input-group-btn" }, [
                                                                                            s(
                                                                                                "button",
                                                                                                {
                                                                                                    staticClass: "btn btn-primary ml-2",
                                                                                                    attrs: { type: "submit" },
                                                                                                    on: {
                                                                                                        click: function (e) {
                                                                                                            return e.preventDefault(), t.addNewEpisode();
                                                                                                        },
                                                                                                    },
                                                                                                },
                                                                                                [t._v("Save")]
                                                                                            ),
                                                                                        ]),
                                                                                    ]),
                                                                                ]
                                                                            ),
                                                                            t._v(" "),
                                                                            t.selectedSeason >= 0
                                                                                ? s(
                                                                                      "div",
                                                                                      { staticClass: "form-group" },
                                                                                      [
                                                                                          s("label", { attrs: { for: "episode" } }, [t._v("Episode")]),
                                                                                          t._v(" "),
                                                                                          s("multiselect", {
                                                                                              attrs: {
                                                                                                  "deselect-label": "Can't remove this value",
                                                                                                  "track-by": "episode_number",
                                                                                                  label: "episode_number",
                                                                                                  placeholder: "Select episode",
                                                                                                  options: t.form.serie.seasons[t.selectedSeason].episodes,
                                                                                                  searchable: !0,
                                                                                                  "allow-empty": !1,
                                                                                              },
                                                                                              on: { select: t.selectEpisode },
                                                                                              scopedSlots: t._u(
                                                                                                  [
                                                                                                      {
                                                                                                          key: "singleLabel",
                                                                                                          fn: function (e) {
                                                                                                              var a = e.option;
                                                                                                              return [
                                                                                                                  s("img", { staticClass: "option__image", attrs: { src: a.still_path, alt: a.episode_number, height: "90" } }),
                                                                                                                  t._v(" "),
                                                                                                                  s("strong", [t._v(t._s(a.episode_number))]),
                                                                                                                  t._v(":\n                              "),
                                                                                                                  s("strong", [t._v(t._s(a.name))]),
                                                                                                              ];
                                                                                                          },
                                                                                                      },
                                                                                                  ],
                                                                                                  null,
                                                                                                  !1,
                                                                                                  1029030856
                                                                                              ),
                                                                                              model: {
                                                                                                  value: t.episode,
                                                                                                  callback: function (e) {
                                                                                                      t.episode = e;
                                                                                                  },
                                                                                                  expression: "episode",
                                                                                              },
                                                                                          }),
                                                                                      ],
                                                                                      1
                                                                                  )
                                                                                : t._e(),
                                                                            t._v(" "),
                                                                            t.selectedEpisode >= 0 && t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode]
                                                                                ? s("div", { staticClass: "form-group" }, [
                                                                                      s("div", { staticClass: "col-md-6" }, [
                                                                                          s("div", { staticClass: "form-group" }, [
                                                                                              s(
                                                                                                  "button",
                                                                                                  {
                                                                                                      staticClass: "btn btn-primary ml-2",
                                                                                                      on: {
                                                                                                          click: function (e) {
                                                                                                              return t.sendEpisode(t.episode);
                                                                                                          },
                                                                                                      },
                                                                                                  },
                                                                                                  [t._v("Send Notification")]
                                                                                              ),
                                                                                          ]),
                                                                                      ]),
                                                                                      t._v(" "),
                                                                                      s("div", { staticClass: "col-md-6" }, [
                                                                                          s("div", { staticClass: "form-group" }, [
                                                                                              s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                                  s("input", {
                                                                                                      directives: [
                                                                                                          {
                                                                                                              name: "model",
                                                                                                              rawName: "v-model",
                                                                                                              value: t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].hasrecap,
                                                                                                              expression: "form.serie.seasons[selectedSeason].episodes[selectedEpisode].hasrecap",
                                                                                                          },
                                                                                                      ],
                                                                                                      staticClass: "custom-control-input",
                                                                                                      attrs: { id: "hasrecap", type: "checkbox" },
                                                                                                      domProps: {
                                                                                                          checked: Array.isArray(t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].hasrecap)
                                                                                                              ? t._i(t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].hasrecap, null) > -1
                                                                                                              : t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].hasrecap,
                                                                                                      },
                                                                                                      on: {
                                                                                                          change: function (e) {
                                                                                                              var s = t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].hasrecap,
                                                                                                                  a = e.target,
                                                                                                                  i = !!a.checked;
                                                                                                              if (Array.isArray(s)) {
                                                                                                                  var r = t._i(s, null);
                                                                                                                  a.checked
                                                                                                                      ? r < 0 && t.$set(t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode], "hasrecap", s.concat([null]))
                                                                                                                      : r > -1 &&
                                                                                                                        t.$set(
                                                                                                                            t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode],
                                                                                                                            "hasrecap",
                                                                                                                            s.slice(0, r).concat(s.slice(r + 1))
                                                                                                                        );
                                                                                                              } else t.$set(t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode], "hasrecap", i);
                                                                                                          },
                                                                                                      },
                                                                                                  }),
                                                                                                  t._v(" "),
                                                                                                  s("label", { staticClass: "custom-control-label", attrs: { for: "hasrecap" } }, [t._v("Episode has Skip Recap ?")]),
                                                                                              ]),
                                                                                          ]),
                                                                                      ]),
                                                                                      t._v(" "),
                                                                                      s("div", { staticClass: "col-md-6" }, [
                                                                                          s("div", { staticClass: "form-group" }, [
                                                                                              s("label", { attrs: { for: "skiprecap_start_in" } }, [t._v("Episode Start in (Exprime in sec !)")]),
                                                                                              t._v(" "),
                                                                                              s("input", {
                                                                                                  directives: [
                                                                                                      {
                                                                                                          name: "model",
                                                                                                          rawName: "v-model",
                                                                                                          value: t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].skiprecap_start_in,
                                                                                                          expression: "form.serie.seasons[selectedSeason].episodes[selectedEpisode].skiprecap_start_in",
                                                                                                      },
                                                                                                  ],
                                                                                                  staticClass: "form-control",
                                                                                                  attrs: { id: "poster_path", name: "skiprecap_start_in", type: "text" },
                                                                                                  domProps: { value: t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].skiprecap_start_in },
                                                                                                  on: {
                                                                                                      input: function (e) {
                                                                                                          e.target.composing ||
                                                                                                              t.$set(t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode], "skiprecap_start_in", e.target.value);
                                                                                                      },
                                                                                                  },
                                                                                              }),
                                                                                          ]),
                                                                                      ]),
                                                                                      t._v(" "),
                                                                                      s("label", { attrs: { for: "episode_number" } }, [t._v("Episode ID")]),
                                                                                      t._v(" "),
                                                                                      s("textarea", {
                                                                                          directives: [
                                                                                              {
                                                                                                  name: "model",
                                                                                                  rawName: "v-model",
                                                                                                  value: t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].id,
                                                                                                  expression: "form.serie.seasons[selectedSeason].episodes[selectedEpisode].id",
                                                                                              },
                                                                                          ],
                                                                                          staticClass: "form-control",
                                                                                          attrs: { id: "episode_number", required: "" },
                                                                                          domProps: { value: t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].id },
                                                                                          on: {
                                                                                              input: function (e) {
                                                                                                  e.target.composing || t.$set(t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode], "id", e.target.value);
                                                                                              },
                                                                                          },
                                                                                      }),
                                                                                      t._v(" "),
                                                                                      s("label", { attrs: { for: "episode_number" } }, [t._v("Episode Number")]),
                                                                                      t._v(" "),
                                                                                      s("textarea", {
                                                                                          directives: [
                                                                                              {
                                                                                                  name: "model",
                                                                                                  rawName: "v-model",
                                                                                                  value: t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].episode_number,
                                                                                                  expression: "form.serie.seasons[selectedSeason].episodes[selectedEpisode].episode_number",
                                                                                              },
                                                                                          ],
                                                                                          staticClass: "form-control",
                                                                                          attrs: { id: "episode_number", required: "" },
                                                                                          domProps: { value: t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].episode_number },
                                                                                          on: {
                                                                                              input: function (e) {
                                                                                                  e.target.composing || t.$set(t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode], "episode_number", e.target.value);
                                                                                              },
                                                                                          },
                                                                                      }),
                                                                                      t._v(" "),
                                                                                      s("label", { attrs: { for: "episode_number" } }, [t._v("Episode Name")]),
                                                                                      t._v(" "),
                                                                                      s("textarea", {
                                                                                          directives: [
                                                                                              {
                                                                                                  name: "model",
                                                                                                  rawName: "v-model",
                                                                                                  value: t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].name,
                                                                                                  expression: "form.serie.seasons[selectedSeason].episodes[selectedEpisode].name",
                                                                                              },
                                                                                          ],
                                                                                          staticClass: "form-control",
                                                                                          attrs: { id: "name", required: "" },
                                                                                          domProps: { value: t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].name },
                                                                                          on: {
                                                                                              input: function (e) {
                                                                                                  e.target.composing || t.$set(t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode], "name", e.target.value);
                                                                                              },
                                                                                          },
                                                                                      }),
                                                                                      t._v(" "),
                                                                                      s("label", { attrs: { for: "seasonoverview" } }, [t._v("Episode Overview")]),
                                                                                      t._v(" "),
                                                                                      s("textarea", {
                                                                                          directives: [
                                                                                              {
                                                                                                  name: "model",
                                                                                                  rawName: "v-model",
                                                                                                  value: t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].overview,
                                                                                                  expression: "form.serie.seasons[selectedSeason].episodes[selectedEpisode].overview",
                                                                                              },
                                                                                          ],
                                                                                          staticClass: "form-control",
                                                                                          attrs: { id: "seasonoverview", required: "" },
                                                                                          domProps: { value: t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].overview },
                                                                                          on: {
                                                                                              input: function (e) {
                                                                                                  e.target.composing || t.$set(t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode], "overview", e.target.value);
                                                                                              },
                                                                                          },
                                                                                      }),
                                                                                      t._v(" "),
                                                                                      s("label", { attrs: { for: "still_path" } }, [t._v("Episode Cover")]),
                                                                                      t._v(" "),
                                                                                      s("input", {
                                                                                          directives: [
                                                                                              {
                                                                                                  name: "model",
                                                                                                  rawName: "v-model",
                                                                                                  value: t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].still_path,
                                                                                                  expression: "form.serie.seasons[selectedSeason].episodes[selectedEpisode].still_path",
                                                                                              },
                                                                                          ],
                                                                                          staticClass: "form-control",
                                                                                          attrs: { id: "still_path", required: "" },
                                                                                          domProps: { value: t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].still_path },
                                                                                          on: {
                                                                                              input: function (e) {
                                                                                                  e.target.composing || t.$set(t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode], "still_path", e.target.value);
                                                                                              },
                                                                                          },
                                                                                      }),
                                                                                      t._v(" "),
                                                                                      s("label", { attrs: { for: "vote_average" } }, [t._v("Episode Vote Average")]),
                                                                                      t._v(" "),
                                                                                      s("input", {
                                                                                          directives: [
                                                                                              {
                                                                                                  name: "model",
                                                                                                  rawName: "v-model",
                                                                                                  value: t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].vote_average,
                                                                                                  expression: "form.serie.seasons[selectedSeason].episodes[selectedEpisode].vote_average",
                                                                                              },
                                                                                          ],
                                                                                          staticClass: "form-control",
                                                                                          attrs: { id: "vote_average", required: "" },
                                                                                          domProps: { value: t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].vote_average },
                                                                                          on: {
                                                                                              input: function (e) {
                                                                                                  e.target.composing || t.$set(t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode], "vote_average", e.target.value);
                                                                                              },
                                                                                          },
                                                                                      }),
                                                                                      t._v(" "),
                                                                                      s("label", { attrs: { for: "air_date" } }, [t._v("Episode Air Date")]),
                                                                                      t._v(" "),
                                                                                      s("input", {
                                                                                          directives: [
                                                                                              {
                                                                                                  name: "model",
                                                                                                  rawName: "v-model",
                                                                                                  value: t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].air_date,
                                                                                                  expression: "form.serie.seasons[selectedSeason].episodes[selectedEpisode].air_date",
                                                                                              },
                                                                                          ],
                                                                                          staticClass: "form-control",
                                                                                          attrs: { id: "air_date", required: "" },
                                                                                          domProps: { value: t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].air_date },
                                                                                          on: {
                                                                                              input: function (e) {
                                                                                                  e.target.composing || t.$set(t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode], "air_date", e.target.value);
                                                                                              },
                                                                                          },
                                                                                      }),
                                                                                  ])
                                                                                : t._e(),
                                                                            t._v(" "),
                                                                            t.selectedEpisode >= 0
                                                                                ? s("div", { staticClass: "input-group" }, [
                                                                                      t._m(10),
                                                                                      t._v(" "),
                                                                                      s("div", { staticClass: "custom-file" }, [
                                                                                          s("input", { staticClass: "custom-file-input", attrs: { type: "file", id: "stillEpisode" }, on: { change: t.storeStillEpisode } }),
                                                                                          t._v(" "),
                                                                                          s("label", { staticClass: "custom-file-label", attrs: { for: "stillEpisode" } }, [
                                                                                              t._v(t._s(t.stillEpisode.length ? t.stillEpisode.name : "Choose still episode")),
                                                                                          ]),
                                                                                      ]),
                                                                                  ])
                                                                                : t._e(),
                                                                            t._v(" "),
                                                                            t.selectedEpisode >= 0
                                                                                ? s("div", { staticClass: "float-right my-2" }, [
                                                                                      s(
                                                                                          "button",
                                                                                          {
                                                                                              staticClass: "btn btn-danger ml-2",
                                                                                              attrs: { type: "button" },
                                                                                              on: {
                                                                                                  click: function (e) {
                                                                                                      return t.destroyEpisode();
                                                                                                  },
                                                                                              },
                                                                                          },
                                                                                          [s("em", { staticClass: "far fa-trash-alt" })]
                                                                                      ),
                                                                                  ])
                                                                                : t._e(),
                                                                        ],
                                                                        1
                                                                    ),
                                                                ]
                                                              : t._e(),
                                                      ],
                                                      2
                                                  ),
                                                  t._v(" "),
                                                  t.selectedEpisode >= 0
                                                      ? s("section", [
                                                            s("div", { staticClass: "form-group" }, [
                                                                t._m(11),
                                                                t._v(" "),
                                                                s("div", { staticClass: "row" }, [
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [
                                                                                s("label", { attrs: { for: "server" } }, [t._v("Server")]),
                                                                                t._v(" "),
                                                                                s("multiselect", {
                                                                                    attrs: { options: t.servers, id: "server", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                    model: {
                                                                                        value: t.server,
                                                                                        callback: function (e) {
                                                                                            t.server = e;
                                                                                        },
                                                                                        expression: "server",
                                                                                    },
                                                                                }),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [
                                                                                s("label", { attrs: { for: "lang" } }, [t._v("Language")]),
                                                                                t._v(" "),
                                                                                s("multiselect", {
                                                                                    attrs: { options: t.langs, id: "lang", label: "english_name", placeholder: "Select one (default English)", "track-by": "iso_639_1" },
                                                                                    model: {
                                                                                        value: t.lang,
                                                                                        callback: function (e) {
                                                                                            t.lang = e;
                                                                                        },
                                                                                        expression: "lang",
                                                                                    },
                                                                                }),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [
                                                                                s("label", { attrs: { for: "header" } }, [t._v("Headers")]),
                                                                                t._v(" "),
                                                                                s("multiselect", {
                                                                                    attrs: { options: t.headers, id: "header", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                    model: {
                                                                                        value: t.header,
                                                                                        callback: function (e) {
                                                                                            t.header = e;
                                                                                        },
                                                                                        expression: "header",
                                                                                    },
                                                                                }),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [
                                                                                s("label", { attrs: { for: "useragent" } }, [t._v("User Agent")]),
                                                                                t._v(" "),
                                                                                s("multiselect", {
                                                                                    attrs: { options: t.useragents, id: "useragent", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                    model: {
                                                                                        value: t.useragent,
                                                                                        callback: function (e) {
                                                                                            t.useragent = e;
                                                                                        },
                                                                                        expression: "useragent",
                                                                                    },
                                                                                }),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [
                                                                                s("label", { attrs: { for: "useragent" } }, [t._v("DRM UUID")]),
                                                                                t._v(" "),
                                                                                s("multiselect", {
                                                                                    attrs: { options: t.drmuui, id: "drmuui", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                    model: {
                                                                                        value: t.drmuuiselected,
                                                                                        callback: function (e) {
                                                                                            t.drmuuiselected = e;
                                                                                        },
                                                                                        expression: "drmuuiselected",
                                                                                    },
                                                                                }),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-6" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [
                                                                                s("label", { attrs: { for: "useragent" } }, [t._v("DRM License Uri")]),
                                                                                t._v(" "),
                                                                                s("multiselect", {
                                                                                    attrs: { options: t.serversdrm, id: "serversdrm", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                    model: {
                                                                                        value: t.drmlicenceuriselected,
                                                                                        callback: function (e) {
                                                                                            t.drmlicenceuriselected = e;
                                                                                        },
                                                                                        expression: "drmlicenceuriselected",
                                                                                    },
                                                                                }),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-6" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.supported_hosts, expression: "supported_hosts" }],
                                                                                    staticClass: "custom-control-input",
                                                                                    attrs: { id: "supported_hosts", type: "checkbox" },
                                                                                    domProps: { checked: Array.isArray(t.supported_hosts) ? t._i(t.supported_hosts, null) > -1 : t.supported_hosts },
                                                                                    on: {
                                                                                        change: function (e) {
                                                                                            var s = t.supported_hosts,
                                                                                                a = e.target,
                                                                                                i = !!a.checked;
                                                                                            if (Array.isArray(s)) {
                                                                                                var r = t._i(s, null);
                                                                                                a.checked ? r < 0 && (t.supported_hosts = s.concat([null])) : r > -1 && (t.supported_hosts = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                            } else t.supported_hosts = i;
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("label", { staticClass: "custom-control-label", attrs: { for: "supported_hosts" } }, [t._v("Supported Hosts")]),
                                                                            ]),
                                                                        ]),
                                                                        t._v(" "),
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.drm, expression: "drm" }],
                                                                                    staticClass: "custom-control-input",
                                                                                    attrs: { id: "drm", type: "checkbox" },
                                                                                    domProps: { checked: Array.isArray(t.drm) ? t._i(t.drm, null) > -1 : t.drm },
                                                                                    on: {
                                                                                        change: function (e) {
                                                                                            var s = t.drm,
                                                                                                a = e.target,
                                                                                                i = !!a.checked;
                                                                                            if (Array.isArray(s)) {
                                                                                                var r = t._i(s, null);
                                                                                                a.checked ? r < 0 && (t.drm = s.concat([null])) : r > -1 && (t.drm = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                            } else t.drm = i;
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("label", { staticClass: "custom-control-label", attrs: { for: "drm" } }, [t._v("DRM")]),
                                                                            ]),
                                                                        ]),
                                                                        t._v(" "),
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.embed, expression: "embed" }],
                                                                                    staticClass: "custom-control-input",
                                                                                    attrs: { id: "embed", type: "checkbox" },
                                                                                    domProps: { checked: Array.isArray(t.embed) ? t._i(t.embed, null) > -1 : t.embed },
                                                                                    on: {
                                                                                        change: function (e) {
                                                                                            var s = t.embed,
                                                                                                a = e.target,
                                                                                                i = !!a.checked;
                                                                                            if (Array.isArray(s)) {
                                                                                                var r = t._i(s, null);
                                                                                                a.checked ? r < 0 && (t.embed = s.concat([null])) : r > -1 && (t.embed = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                            } else t.embed = i;
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("label", { staticClass: "custom-control-label", attrs: { for: "embed" } }, [t._v("Embed")]),
                                                                            ]),
                                                                        ]),
                                                                        t._v(" "),
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.hls, expression: "hls" }],
                                                                                    staticClass: "custom-control-input",
                                                                                    attrs: { id: "hls", type: "checkbox" },
                                                                                    domProps: { checked: Array.isArray(t.hls) ? t._i(t.hls, null) > -1 : t.hls },
                                                                                    on: {
                                                                                        change: function (e) {
                                                                                            var s = t.hls,
                                                                                                a = e.target,
                                                                                                i = !!a.checked;
                                                                                            if (Array.isArray(s)) {
                                                                                                var r = t._i(s, null);
                                                                                                a.checked ? r < 0 && (t.hls = s.concat([null])) : r > -1 && (t.hls = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                            } else t.hls = i;
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("label", { staticClass: "custom-control-label", attrs: { for: "hls" } }, [t._v("HlS Link  (PHP FORMAT)")]),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "row" }, [
                                                                    s("div", { staticClass: "col-md-6" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("label", { attrs: { for: "link" } }, [t._v("Link")]),
                                                                            t._v(" "),
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.link, expression: "link" }],
                                                                                staticClass: "form-control",
                                                                                attrs: { id: "link", placeholder: "Upload or Insert Direct  Link", type: "text" },
                                                                                domProps: { value: t.link },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || (t.link = e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                        ]),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-4" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("label", [t._v("Upload Stream")]),
                                                                            t._v(" "),
                                                                            s("input", { staticClass: "file-upload-default" }),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "input-group col-xs-12" }, [
                                                                                s("input", { staticClass: "form-control file-upload-info", attrs: { id: "video", placeholder: "Upload Image", type: "file" }, on: { change: t.storeVideo } }),
                                                                                t._v(" "),
                                                                                t._m(12),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-2" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [t.isuploading ? s("vue-ellipse-progress", { attrs: { gap: 5, thickness: 5, animation: "default 1000", progress: t.percent, size: 60 } }) : t._e()],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-1 my-auto" }, [
                                                                        s(
                                                                            "button",
                                                                            {
                                                                                staticClass: "btn btn-primary mr-2",
                                                                                on: {
                                                                                    click: function (e) {
                                                                                        return e.preventDefault(), t.addLink();
                                                                                    },
                                                                                },
                                                                            },
                                                                            [t._v("\n                    Add\n                  ")]
                                                                        ),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "table-responsive" }, [
                                                                    s("table", { staticClass: "table", attrs: { "aria-describedby": "Links Table" } }, [
                                                                        t._m(13),
                                                                        t._v(" "),
                                                                        s(
                                                                            "tbody",
                                                                            { attrs: { name: "links" } },
                                                                            t._l(t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].videos, function (e, a) {
                                                                                return s("tr", { key: a }, [
                                                                                    s("td", { staticClass: "text-center" }, [
                                                                                        s("div", { staticClass: "list-icons" }, [
                                                                                            s(
                                                                                                "a",
                                                                                                {
                                                                                                    staticClass: "list-icons-item text-warning",
                                                                                                    attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                                    on: {
                                                                                                        click: function (s) {
                                                                                                            return s.preventDefault(), t.deleteLink(e, a);
                                                                                                        },
                                                                                                    },
                                                                                                },
                                                                                                [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                                            ),
                                                                                        ]),
                                                                                    ]),
                                                                                    t._v(" "),
                                                                                    s("td", { staticClass: "text-center" }, [t._v(t._s(e.lang))]),
                                                                                    t._v(" "),
                                                                                    s("td", { staticClass: "text-center" }, [t._v(t._s(e.server))]),
                                                                                    t._v(" "),
                                                                                    s("td", { staticClass: "text-center" }, [t._v(t._s(e.header))]),
                                                                                    t._v(" "),
                                                                                    s("td", { staticClass: "text-center" }, [t._v(t._s(e.useragent))]),
                                                                                    t._v(" "),
                                                                                    s("td", { staticClass: "text-center" }, [t._v(t._s(e.link))]),
                                                                                    t._v(" "),
                                                                                    (1 === e.supported_hosts) | (!0 === e.supported_hosts)
                                                                                        ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                                        : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                                    t._v(" "),
                                                                                    (1 === e.hls) | (!0 === e.hls)
                                                                                        ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                                        : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                                    t._v(" "),
                                                                                    (1 === e.embed) | (!0 === e.embed)
                                                                                        ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                                        : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                                    t._v(" "),
                                                                                    (1 === e.drm) | (!0 === e.drm)
                                                                                        ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                                        : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                                    t._v(" "),
                                                                                    s("td", { staticClass: "text-center" }, [t._v(t._s(e.drmuuid))]),
                                                                                    t._v(" "),
                                                                                    s("td", { staticClass: "text-center" }, [t._v(t._s(e.drmlicenceuri))]),
                                                                                ]);
                                                                            }),
                                                                            0
                                                                        ),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            1 === this.settings.separate_download
                                                                ? s("div", { staticClass: "form-group" }, [
                                                                      t._m(14),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "row" }, [
                                                                          s("div", { staticClass: "col-md-3" }, [
                                                                              s(
                                                                                  "div",
                                                                                  { staticClass: "form-group" },
                                                                                  [
                                                                                      s("label", { attrs: { for: "server" } }, [t._v("Server")]),
                                                                                      t._v(" "),
                                                                                      s("multiselect", {
                                                                                          attrs: { options: t.servers, id: "server", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                          model: {
                                                                                              value: t.serverdownload,
                                                                                              callback: function (e) {
                                                                                                  t.serverdownload = e;
                                                                                              },
                                                                                              expression: "serverdownload",
                                                                                          },
                                                                                      }),
                                                                                  ],
                                                                                  1
                                                                              ),
                                                                          ]),
                                                                          t._v(" "),
                                                                          s("div", { staticClass: "col-md-3" }, [
                                                                              s(
                                                                                  "div",
                                                                                  { staticClass: "form-group" },
                                                                                  [
                                                                                      s("label", { attrs: { for: "langdownload" } }, [t._v("Language")]),
                                                                                      t._v(" "),
                                                                                      s("multiselect", {
                                                                                          attrs: { options: t.langs, id: "langdownload", label: "english_name", placeholder: "Select one (default EN)", "track-by": "iso_639_1" },
                                                                                          model: {
                                                                                              value: t.langdownload,
                                                                                              callback: function (e) {
                                                                                                  t.langdownload = e;
                                                                                              },
                                                                                              expression: "langdownload",
                                                                                          },
                                                                                      }),
                                                                                  ],
                                                                                  1
                                                                              ),
                                                                          ]),
                                                                          t._v(" "),
                                                                          s("div", { staticClass: "col-md-3" }, [
                                                                              s(
                                                                                  "div",
                                                                                  { staticClass: "form-group" },
                                                                                  [
                                                                                      s("label", { attrs: { for: "headerdownload" } }, [t._v("Headers")]),
                                                                                      t._v(" "),
                                                                                      s("multiselect", {
                                                                                          attrs: { options: t.headers, id: "headerdownload", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                          model: {
                                                                                              value: t.headerdownload,
                                                                                              callback: function (e) {
                                                                                                  t.headerdownload = e;
                                                                                              },
                                                                                              expression: "headerdownload",
                                                                                          },
                                                                                      }),
                                                                                  ],
                                                                                  1
                                                                              ),
                                                                          ]),
                                                                          t._v(" "),
                                                                          s("div", { staticClass: "col-md-3" }, [
                                                                              s(
                                                                                  "div",
                                                                                  { staticClass: "form-group" },
                                                                                  [
                                                                                      s("label", { attrs: { for: "useragentdownload" } }, [t._v("User Agent")]),
                                                                                      t._v(" "),
                                                                                      s("multiselect", {
                                                                                          attrs: { options: t.useragents, id: "useragentdownload", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                          model: {
                                                                                              value: t.useragentdownload,
                                                                                              callback: function (e) {
                                                                                                  t.useragentdownload = e;
                                                                                              },
                                                                                              expression: "useragentdownload",
                                                                                          },
                                                                                      }),
                                                                                  ],
                                                                                  1
                                                                              ),
                                                                          ]),
                                                                          t._v(" "),
                                                                          s("div", { staticClass: "col-md-6" }, [
                                                                              s("div", { staticClass: "form-group" }, [
                                                                                  s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                      s("input", {
                                                                                          directives: [{ name: "model", rawName: "v-model", value: t.supported_hosts_download, expression: "supported_hosts_download" }],
                                                                                          staticClass: "custom-control-input",
                                                                                          attrs: { id: "supported_hosts_download", type: "checkbox" },
                                                                                          domProps: { checked: Array.isArray(t.supported_hosts_download) ? t._i(t.supported_hosts_download, null) > -1 : t.supported_hosts_download },
                                                                                          on: {
                                                                                              change: function (e) {
                                                                                                  var s = t.supported_hosts_download,
                                                                                                      a = e.target,
                                                                                                      i = !!a.checked;
                                                                                                  if (Array.isArray(s)) {
                                                                                                      var r = t._i(s, null);
                                                                                                      a.checked
                                                                                                          ? r < 0 && (t.supported_hosts_download = s.concat([null]))
                                                                                                          : r > -1 && (t.supported_hosts_download = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                                  } else t.supported_hosts_download = i;
                                                                                              },
                                                                                          },
                                                                                      }),
                                                                                      t._v(" "),
                                                                                      s("label", { staticClass: "custom-control-label", attrs: { for: "supported_hosts_download" } }, [t._v("Supported Hosts")]),
                                                                                  ]),
                                                                              ]),
                                                                              t._v(" "),
                                                                              s("div", { staticClass: "form-group" }, [
                                                                                  s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                      s("input", {
                                                                                          directives: [{ name: "model", rawName: "v-model", value: t.external_download, expression: "external_download" }],
                                                                                          staticClass: "custom-control-input",
                                                                                          attrs: { id: "external_download", type: "checkbox" },
                                                                                          domProps: { checked: Array.isArray(t.external_download) ? t._i(t.external_download, null) > -1 : t.external_download },
                                                                                          on: {
                                                                                              change: function (e) {
                                                                                                  var s = t.external_download,
                                                                                                      a = e.target,
                                                                                                      i = !!a.checked;
                                                                                                  if (Array.isArray(s)) {
                                                                                                      var r = t._i(s, null);
                                                                                                      a.checked ? r < 0 && (t.external_download = s.concat([null])) : r > -1 && (t.external_download = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                                  } else t.external_download = i;
                                                                                              },
                                                                                          },
                                                                                      }),
                                                                                      t._v(" "),
                                                                                      s("label", { staticClass: "custom-control-label", attrs: { for: "external_download" } }, [t._v("External Link ( Via Phone Browser )")]),
                                                                                  ]),
                                                                              ]),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "row" }, [
                                                                          s("div", { staticClass: "col-md-6" }, [
                                                                              s("div", { staticClass: "form-group" }, [
                                                                                  s("label", { attrs: { for: "linkDownload" } }, [t._v("Link")]),
                                                                                  t._v(" "),
                                                                                  s("input", {
                                                                                      directives: [{ name: "model", rawName: "v-model", value: t.linkDownload, expression: "linkDownload" }],
                                                                                      staticClass: "form-control",
                                                                                      attrs: { id: "linkDownload", placeholder: "Insert a download Link", type: "text" },
                                                                                      domProps: { value: t.linkDownload },
                                                                                      on: {
                                                                                          input: function (e) {
                                                                                              e.target.composing || (t.linkDownload = e.target.value);
                                                                                          },
                                                                                      },
                                                                                  }),
                                                                              ]),
                                                                          ]),
                                                                          t._v(" "),
                                                                          s("div", { staticClass: "col-md-1 my-auto" }, [
                                                                              s(
                                                                                  "button",
                                                                                  {
                                                                                      staticClass: "btn btn-primary mr-2",
                                                                                      on: {
                                                                                          click: function (e) {
                                                                                              return e.preventDefault(), t.addLinkDownload();
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [t._v("Add")]
                                                                              ),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("table", { staticClass: "table table-striped table-links", attrs: { "aria-describedby": "video links" } }, [
                                                                          t._m(15),
                                                                          t._v(" "),
                                                                          s(
                                                                              "tbody",
                                                                              { attrs: { name: "links" } },
                                                                              t._l(t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].downloads, function (e, a) {
                                                                                  return s("tr", { key: a }, [
                                                                                      s("td", { staticClass: "text-center" }, [
                                                                                          s("div", { staticClass: "list-icons" }, [
                                                                                              s(
                                                                                                  "a",
                                                                                                  {
                                                                                                      staticClass: "list-icons-item text-warning",
                                                                                                      attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                                      on: {
                                                                                                          click: function (s) {
                                                                                                              return s.preventDefault(), t.deleteLinkDownload(e, a);
                                                                                                          },
                                                                                                      },
                                                                                                  },
                                                                                                  [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                                              ),
                                                                                          ]),
                                                                                      ]),
                                                                                      t._v(" "),
                                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.lang))]),
                                                                                      t._v(" "),
                                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.server))]),
                                                                                      t._v(" "),
                                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.header))]),
                                                                                      t._v(" "),
                                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.useragent))]),
                                                                                      t._v(" "),
                                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.link))]),
                                                                                      t._v(" "),
                                                                                      (1 === e.supported_hosts) | (!0 === e.supported_hosts)
                                                                                          ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                                          : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                                      t._v(" "),
                                                                                      (1 === e.external) | (!0 === e.external)
                                                                                          ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                                          : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                                  ]);
                                                                              }),
                                                                              0
                                                                          ),
                                                                      ]),
                                                                  ])
                                                                : t._e(),
                                                            t._v(" "),
                                                            s("div", { staticClass: "form-group" }, [
                                                                t._m(16),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-6" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", [t._v("Upload Substitle ( Zip Format only ! )")]),
                                                                        t._v(" "),
                                                                        s("input", { staticClass: "file-upload-default" }),
                                                                        t._v(" "),
                                                                        s("div", { staticClass: "input-group col-xs-12" }, [
                                                                            s("input", {
                                                                                staticClass: "form-control file-upload-info",
                                                                                attrs: { id: "video", placeholder: "Upload Substitle as zip format", type: "file" },
                                                                                on: { change: t.storeSubstitle },
                                                                            }),
                                                                            t._v(" "),
                                                                            t._m(17),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-6" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "custom-control custom-checkbox" },
                                                                            [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.zip, expression: "zip" }],
                                                                                    staticClass: "custom-control-input",
                                                                                    attrs: { id: "zip", type: "checkbox" },
                                                                                    domProps: { checked: Array.isArray(t.zip) ? t._i(t.zip, null) > -1 : t.zip },
                                                                                    on: {
                                                                                        change: function (e) {
                                                                                            var s = t.zip,
                                                                                                a = e.target,
                                                                                                i = !!a.checked;
                                                                                            if (Array.isArray(s)) {
                                                                                                var r = t._i(s, null);
                                                                                                a.checked ? r < 0 && (t.zip = s.concat([null])) : r > -1 && (t.zip = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                            } else t.zip = i;
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("label", { staticClass: "custom-control-label", attrs: { for: "zip" } }, [t._v("Substitle Zip Format ?")]),
                                                                                t._v(" "),
                                                                                s("b-tooltip", { attrs: { target: "zip", triggers: "hover" } }, [
                                                                                    t._v("\n                      I am tooltip "),
                                                                                    s("b", [t._v("component")]),
                                                                                    t._v(" content!\n                "),
                                                                                ]),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "row" }, [
                                                                    s("div", { staticClass: "col-md-4" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("label", { attrs: { for: "linksubstitle" } }, [t._v("Substitle Path")]),
                                                                            t._v(" "),
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.linksubstitle, expression: "linksubstitle" }],
                                                                                staticClass: "form-control",
                                                                                attrs: { id: "linksubstitle", placeholder: "Upload or Insert Direct  Link", type: "text" },
                                                                                domProps: { value: t.linksubstitle },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || (t.linksubstitle = e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                        ]),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-4" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [
                                                                                s("label", { attrs: { for: "lang" } }, [t._v("Language")]),
                                                                                t._v(" "),
                                                                                s("multiselect", {
                                                                                    attrs: { options: t.langsubs, id: "langsub", label: "english_name", placeholder: "Select one (default EN)", "track-by": "iso_639_1" },
                                                                                    model: {
                                                                                        value: t.langsub,
                                                                                        callback: function (e) {
                                                                                            t.langsub = e;
                                                                                        },
                                                                                        expression: "langsub",
                                                                                    },
                                                                                }),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [
                                                                                s("label", { attrs: { for: "lang" } }, [t._v("Substitle Type")]),
                                                                                t._v(" "),
                                                                                s("multiselect", {
                                                                                    attrs: { id: "typesub", options: t.substypes, type: "text" },
                                                                                    model: {
                                                                                        value: t.typesubstitle,
                                                                                        callback: function (e) {
                                                                                            t.typesubstitle = e;
                                                                                        },
                                                                                        expression: "typesubstitle",
                                                                                    },
                                                                                }),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-1 my-auto" }, [
                                                                        s(
                                                                            "button",
                                                                            {
                                                                                staticClass: "btn btn-primary mr-2",
                                                                                on: {
                                                                                    click: function (e) {
                                                                                        return e.preventDefault(), t.addSubs();
                                                                                    },
                                                                                },
                                                                            },
                                                                            [t._v("Add")]
                                                                        ),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "table-responsive" }, [
                                                                    s("table", { staticClass: "table", attrs: { "aria-describedby": "Substitle Table" } }, [
                                                                        t._m(18),
                                                                        t._v(" "),
                                                                        s(
                                                                            "tbody",
                                                                            { attrs: { name: "linksubtitles" } },
                                                                            t._l(t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].substitles, function (e, a) {
                                                                                return s("tr", { key: a }, [
                                                                                    s("td", { staticClass: "text-center" }, [
                                                                                        s("div", { staticClass: "list-icons" }, [
                                                                                            s(
                                                                                                "a",
                                                                                                {
                                                                                                    staticClass: "list-icons-item text-warning",
                                                                                                    attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                                    on: {
                                                                                                        click: function (s) {
                                                                                                            return s.preventDefault(), t.destroySubs(e, a);
                                                                                                        },
                                                                                                    },
                                                                                                },
                                                                                                [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                                            ),
                                                                                        ]),
                                                                                    ]),
                                                                                    t._v(" "),
                                                                                    s("td", { staticClass: "text-center" }, [t._v(t._s(e.lang))]),
                                                                                    t._v(" "),
                                                                                    s("td", { staticClass: "text-center" }, [t._v(" " + t._s(e.type))]),
                                                                                    t._v(" "),
                                                                                    (1 === e.zip) | (!0 === e.zip)
                                                                                        ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                                        : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                                    t._v(" "),
                                                                                    s("td", { staticClass: "text-center" }, [t._v(t._s(e.link))]),
                                                                                ]);
                                                                            }),
                                                                            0
                                                                        ),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ])
                                                      : t._e(),
                                                  t._v(" "),
                                                  s("div", { staticClass: "d-flex justify-content-between align-items-end flex-wrap" }, [
                                                      t.add
                                                          ? s(
                                                                "button",
                                                                {
                                                                    staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                                    attrs: { type: "submit" },
                                                                    on: {
                                                                        click: function (e) {
                                                                            return e.preventDefault(), t.store();
                                                                        },
                                                                    },
                                                                },
                                                                [t._v("Save")]
                                                            )
                                                          : t._e(),
                                                      t._v(" "),
                                                      t.edit
                                                          ? s(
                                                                "button",
                                                                {
                                                                    staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                                    attrs: { type: "submit" },
                                                                    on: {
                                                                        click: function (e) {
                                                                            return e.preventDefault(), t.update();
                                                                        },
                                                                    },
                                                                },
                                                                [t._v("Update")]
                                                            )
                                                          : t._e(),
                                                  ]),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "d-flex align-items-end flex-wrap" }, [e("div", { staticClass: "d-flex" })]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "input-group-prepend" }, [e("span", { staticClass: "input-group-text", attrs: { id: "search" } }, [e("i", { staticClass: "mdi mdi-magnify" })])]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { staticClass: "text-center", attrs: { id: "cover" } }, [t._v("Cover")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "id" } }, [t._v("Serie ID")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "imdb" } }, [t._v("Serie IMDB")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "name" } }, [t._v("Name")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "vote" } }, [t._v("Vote")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "status" } }, [t._v("Status")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "options" } }, [t._v("Options")]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("Upload")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("Upload")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("em", { staticClass: "mdi mdi-access-point menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("Networks")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("em", { staticClass: "mdi mdi-video menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("Trailers")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                          Upload\n                        ")]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("i", { staticClass: "mdi mdi-account-multiple menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("Casters")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("em", { staticClass: "mdi mdi-video menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("SEASONS & EPISODES")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "input-group-prepend" }, [e("span", { staticClass: "input-group-text" }, [this._v("Upload")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("em", { staticClass: "mdi mdi-video menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("VIDEOS")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                          Upload\n                        ")]),
                            ]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { staticClass: "text-center", attrs: { id: "actions" } }, [t._v("Actions")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "langs" } }, [t._v("Lang")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("Server")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("Header")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("UserAgent")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("Link")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "langs" } }, [t._v("Supported Hosts")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "hls" } }, [t._v("Hls Link (PHP FORMAT)")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("Embed")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("DRM")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("DRM UUID")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("DRM Licence")]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("i", { staticClass: "mdi mdi-cloud-download menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("DOWNLOADS")])]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { staticClass: "text-center", attrs: { id: "actions" } }, [t._v("Actions")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "langs" } }, [t._v("Lang")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("Server")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("Header")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("UserAgent")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("Link")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "langs" } }, [t._v("Supported Hosts")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "hls" } }, [t._v("External")]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("em", { staticClass: "mdi mdi-closed-caption menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("Substitles")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                          Upload\n                        ")]),
                            ]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { staticClass: "text-center", attrs: { id: "actions" } }, [t._v("Actions")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "langs" } }, [t._v("Lang")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "type" } }, [t._v("Type")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "type" } }, [t._v("Zip Format")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("Link")]),
                                ]),
                            ]);
                        },
                    ],
                    !1,
                    null,
                    "5b537e78",
                    null
                );
            e.default = h.exports;
        },
        345: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a),
                r = s(3),
                n = s(6);
            function o(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function l(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var r = t.apply(e, s);
                        function n(t) {
                            o(r, a, i, n, l, "next", t);
                        }
                        function l(t) {
                            o(r, a, i, n, l, "throw", t);
                        }
                        n(void 0);
                    });
                };
            }
            var c = {
                    data: function () {
                        return {
                            index: !0,
                            add: !1,
                            edit: !1,
                            isuploading: !1,
                            size: "default",
                            align: "right",
                            pageNum: null,
                            livetvs: {},
                            paginate: ["livetvs", "filteredLivetvs"],
                            form: { livetv: { name: "", overview: "", link: "", vip: "", featured: "", backdrop_path: "", poster_path: "", genres: [] }, links: [], notification: !1 },
                            servers: [],
                            headers: [],
                            useragents: [],
                            server: "",
                            header: "",
                            useragent: "",
                            livetv_name: "",
                            embed: !1,
                            hls: !1,
                            supported_hosts: !1,
                            link: "",
                            poster: null,
                            backdrop: null,
                            options: [],
                            video: null,
                            search: "",
                            drmuuiselected: "",
                            drmlicenceuriselected: "",
                            drm: !1,
                            drmuui: [
                                { id: 1, name: "widevine" },
                                { id: 2, name: "playready" },
                                { id: 3, name: "clearkey" },
                            ],
                            serversdrm: [],
                        };
                    },
                    mounted: function () {
                        var t = this;
                        return l(
                            i.a.mark(function e() {
                                var s;
                                return i.a.wrap(function (e) {
                                    for (;;)
                                        switch ((e.prev = e.next)) {
                                            case 0:
                                                return (e.next = 2), axios.get(url + "/admin/livetv/data");
                                            case 2:
                                                return (s = e.sent), (t.livetvs = s.data), (e.next = 6), axios.get(url + "/admin/servers/dataservers");
                                            case 6:
                                                return (s = e.sent), (t.servers = s.data), (e.next = 10), axios.get(url + "/admin/categories/data");
                                            case 10:
                                                return (s = e.sent), (t.options = s.data), (e.next = 14), axios.get(url + "/admin/headers/dataheaders");
                                            case 14:
                                                return (s = e.sent), (t.headers = s.data), (e.next = 18), axios.get(url + "/admin/drmservers/drmdataservers");
                                            case 18:
                                                return (s = e.sent), (t.serversdrm = s.data), (e.next = 22), axios.get(url + "/admin/useragents/datausersagentoptions");
                                            case 22:
                                                (s = e.sent), (t.useragents = s.data);
                                            case 24:
                                            case "end":
                                                return e.stop();
                                        }
                                }, e);
                            })
                        )();
                    },
                    methods: {
                        searchUnit: _.debounce(function () {
                            var t = this;
                            axios.get(url + "/admin/search_streaming?q=" + this.search).then(function (e) {
                                t.livetvs.data = e.data.streaming;
                            });
                        }),
                        getResults: function () {
                            var t = this,
                                e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
                            axios.get(url + "/admin/livetv/data?page=" + e).then(function (s) {
                                (t.livetvs = s.data), (t.pageNum = e);
                            });
                        },
                        create: function () {
                            (this.index = !1), (this.edit = !1), (this.add = !0);
                        },
                        back: function () {
                            (this.form.livetv = { name: "", overview: "", link: "", vip: "", featured: "", backdrop_path: "", poster_path: "" }),
                                (this.form.links = []),
                                (this.server = ""),
                                (this.link = ""),
                                (this.video = null),
                                (this.add = !1),
                                (this.edit = !1),
                                (this.index = !0);
                        },
                        editing: function (t) {
                            var e = this;
                            (this.index = !1),
                                (this.add = !1),
                                (this.edit = !0),
                                (this.form.livetv = t),
                                axios.get(url + "/admin/livetvs/videos/" + t.id).then(function (t) {
                                    (e.form.links = t.data), console.log(e.form.links);
                                });
                        },
                        store: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.post(url + "/admin/livetv/store", t.form);
                                                    case 3:
                                                        (s = e.sent),
                                                            (t.add = !1),
                                                            (t.edit = !1),
                                                            (t.index = !0),
                                                            (t.form.livetv = { name: "", overview: "", link: "", vip: "", backdrop_path: "", poster_path: "" }),
                                                            (t.form.links = []),
                                                            (t.poster = null),
                                                            (t.backdrop = null),
                                                            t.livetvs.data.unshift(s.data.body),
                                                            t.showSuccess(s.data.message),
                                                            (e.next = 18);
                                                        break;
                                                    case 15:
                                                        (e.prev = 15), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 18:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 15]]
                                    );
                                })
                            )();
                        },
                        addLink: function () {
                            "" !== this.server && "" !== this.link && "" !== this.form.livetv
                                ? (this.form.links.unshift({
                                      server: this.server.name,
                                      drmuuid: this.drmuuiselected.name,
                                      drmlicenceuri: this.drmlicenceuriselected.name,
                                      header: this.header.name,
                                      useragent: this.useragent.name,
                                      link: this.link,
                                      livetv_name: this.livetv_name,
                                      lang: this.lang.english_name && "No Language" !== this.lang.english_name ? this.lang.english_name : this.settings.tmdb_lang.english_name,
                                      embed: this.embed,
                                      supported_hosts: this.supported_hosts,
                                      hls: this.hls,
                                      drm: this.drm,
                                  }),
                                  (this.link = ""),
                                  (this.server = ""),
                                  (this.header = ""),
                                  (this.useragent = ""),
                                  (this.livetv_name = ""),
                                  (this.video = ""),
                                  (this.supported_hosts = !1),
                                  (this.embed = !1),
                                  (this.hls = !1),
                                  (this.drmuuiselected = ""),
                                  (this.drmlicenceuriselected = ""),
                                  (this.drm = !1))
                                : this.showAlert("You need to select a server before adding a link");
                        },
                        destroyLink: function (t, e) {
                            var s = this;
                            this.showConfirm(function () {
                                t.id &&
                                    axios.delete(url + "/admin/livetvs/videos/destroy/" + t.id).then(function (t) {
                                        s.showSuccess(t.data.message);
                                    }),
                                    console.log(t.id),
                                    s.form.links.splice(e, 1);
                            });
                        },
                        update: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.put(url + "/admin/livetv/update/" + t.form.livetv.id, t.form);
                                                    case 3:
                                                        (s = e.sent),
                                                            (t.add = !1),
                                                            (t.edit = !1),
                                                            (t.index = !0),
                                                            (t.form.livetv = { name: "", overview: "", link: "", vip: "", backdrop_path: "", poster_path: "" }),
                                                            t.showSuccess(s.data.message),
                                                            axios.get(url + "/admin/livetv/data?page=" + t.pageNum).then(function (e) {
                                                                t.livetvs = e.data;
                                                            }),
                                                            (e.next = 15);
                                                        break;
                                                    case 12:
                                                        (e.prev = 12), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 15:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 12]]
                                    );
                                })
                            )();
                        },
                        send: function (t) {
                            var e = this;
                            return l(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (
                                                            (e.form.livetv = t),
                                                            console.log(t.title),
                                                            (s.prev = 2),
                                                            (a = { headers: { Authorization: "key=" + e.settings.authorization } }),
                                                            (r = { to: "/topics/all", data: { title: t.name, message: t.overview, image: t.backdrop_path, type: "3", tmdb: t.id } }),
                                                            (s.next = 7),
                                                            http.post("https://fcm.googleapis.com/fcm/send", r, a)
                                                        );
                                                    case 7:
                                                        e.showSuccess(), (e.title = ""), (e.body = ""), (e.image = ""), (s.next = 16);
                                                        break;
                                                    case 13:
                                                        (s.prev = 13), (s.t0 = s.catch(2)), e.showError();
                                                    case 16:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[2, 13]]
                                    );
                                })
                            )();
                        },
                        destroyGenre: function (t) {
                            var e = this;
                            void 0 !== t.genre &&
                                axios
                                    .delete(url + "/admin/livetv/genres/destroy/" + t.id)
                                    .then(function (t) {
                                        return e.showSuccess(t.data.message);
                                    })
                                    .catch(function (t) {
                                        return e.showError();
                                    });
                        },
                        destroy: function (t) {
                            var e = this;
                            this.showConfirm(
                                l(
                                    i.a.mark(function s() {
                                        var a, r;
                                        return i.a.wrap(
                                            function (s) {
                                                for (;;)
                                                    switch ((s.prev = s.next)) {
                                                        case 0:
                                                            return (s.prev = 0), (s.next = 3), axios.delete(url + "/admin/livetv/destroy/" + t);
                                                        case 3:
                                                            (a = s.sent),
                                                                (r = e.livetvs.data.findIndex(function (e) {
                                                                    return e.id === t;
                                                                })),
                                                                e.livetvs.data.splice(r, 1),
                                                                e.showSuccess(a.data.message),
                                                                (s.next = 12);
                                                            break;
                                                        case 9:
                                                            (s.prev = 9), (s.t0 = s.catch(0)), e.showError();
                                                        case 12:
                                                        case "end":
                                                            return s.stop();
                                                    }
                                            },
                                            s,
                                            null,
                                            [[0, 9]]
                                        );
                                    })
                                )
                            );
                        },
                        storeVideo: function (t) {
                            var e = this;
                            return l(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (
                                                            (s.prev = 0),
                                                            (e.video = t.target.files[0]),
                                                            (a = new FormData()).append("video", e.video),
                                                            (s.next = 6),
                                                            axios.post(url + "/admin/video/store", a, {
                                                                onUploadProgress: function (t) {
                                                                    (e.isuploading = !0), (e.percent = Math.round((t.loaded / t.total) * 100));
                                                                },
                                                            })
                                                        );
                                                    case 6:
                                                        (r = s.sent),
                                                            (e.video_name = r.data.video_name),
                                                            (e.link = r.data.video_path),
                                                            (e.server = { name: r.data.server }),
                                                            e.showSuccess(r.data.message),
                                                            console.log(a),
                                                            setTimeout(function () {
                                                                return (e.isuploading = !1);
                                                            }, 2e3),
                                                            (s.next = 19);
                                                        break;
                                                    case 15:
                                                        (s.prev = 15),
                                                            (s.t0 = s.catch(0)),
                                                            e.showError(),
                                                            setTimeout(function () {
                                                                return (e.isuploading = !1);
                                                            }, 2e3);
                                                    case 19:
                                                        return (s.prev = 19), s.finish(19);
                                                    case 21:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 15, 19, 21]]
                                    );
                                })
                            )();
                        },
                        storePoster: function (t) {
                            var e = this;
                            return l(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        if (void 0 === t.target.files[0]) {
                                                            s.next = 14;
                                                            break;
                                                        }
                                                        return (s.prev = 1), (e.poster = t.target.files[0]), (a = new FormData()).append("image", e.poster), (s.next = 7), axios.post(url + "/admin/livetv/image/store", a);
                                                    case 7:
                                                        (r = s.sent), (e.form.livetv.poster_path = r.data.image_path), (s.next = 14);
                                                        break;
                                                    case 11:
                                                        (s.prev = 11), (s.t0 = s.catch(1)), e.showError(s.t0.response);
                                                    case 14:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[1, 11]]
                                    );
                                })
                            )();
                        },
                        storeBackdrop: function (t) {
                            var e = this;
                            return l(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        if (void 0 === t.target.files[0]) {
                                                            s.next = 14;
                                                            break;
                                                        }
                                                        return (s.prev = 1), (e.backdrop = t.target.files[0]), (a = new FormData()).append("image", e.backdrop), (s.next = 7), axios.post(url + "/admin/livetv/image/store", a);
                                                    case 7:
                                                        (r = s.sent), (e.form.livetv.backdrop_path = r.data.image_path), (s.next = 14);
                                                        break;
                                                    case 11:
                                                        (s.prev = 11), (s.t0 = s.catch(1)), e.showError(s.t0.response);
                                                    case 14:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[1, 11]]
                                    );
                                })
                            )();
                        },
                    },
                    computed: {
                        filteredLivetvs: function () {
                            var t = this;
                            return this.livetvs.filter(function (e) {
                                return e.name.toLowerCase().match(t.search.toLowerCase());
                            });
                        },
                    },
                    mixins: [r.a, n.a],
                },
                d = s(4),
                u = Object(d.a)(
                    c,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-md-12 grid-margin" }, [
                                s("div", { staticClass: "d-flex justify-content-between flex-wrap" }, [
                                    t._m(0),
                                    t._v(" "),
                                    s("div", { staticClass: "d-flex justify-content-between align-items-end flex-wrap" }, [
                                        t.index
                                            ? s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.create();
                                                          },
                                                      },
                                                  },
                                                  [t._v("Add Stream")]
                                              )
                                            : t._e(),
                                        t._v(" "),
                                        t.index
                                            ? t._e()
                                            : s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.back();
                                                          },
                                                      },
                                                  },
                                                  [t._v("Back")]
                                              ),
                                    ]),
                                ]),
                            ]),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-md-6 grid-margin" }, [
                                      s("ul", { staticClass: "navbar-nav mr-lg-4 w-100" }, [
                                          s("li", { staticClass: "nav-item nav-search d-none d-lg-block w-100" }, [
                                              s("div", { staticClass: "input-group" }, [
                                                  t._m(1),
                                                  t._v(" "),
                                                  s("input", {
                                                      directives: [{ name: "model", rawName: "v-model", value: t.search, expression: "search" }],
                                                      staticClass: "form-control",
                                                      attrs: { type: "text", placeholder: "Search now", "aria-label": "search", "aria-describedby": "search" },
                                                      domProps: { value: t.search },
                                                      on: {
                                                          keyup: t.searchUnit,
                                                          input: function (e) {
                                                              e.target.composing || (t.search = e.target.value);
                                                          },
                                                      },
                                                  }),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s(
                                                  "div",
                                                  { staticClass: "table-responsive" },
                                                  [
                                                      s("table", { staticClass: "table", attrs: { "aria-describedby": "Streaming Table" } }, [
                                                          t._m(2),
                                                          t._v(" "),
                                                          s(
                                                              "tbody",
                                                              t._l(t.livetvs.data, function (e) {
                                                                  return s("tr", { key: e.id, staticClass: "text-center" }, [
                                                                      s("td", [s("img", { attrs: { src: e.backdrop_path, alt: "poster path", height: "250", width: "150" } })]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.id))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.name))]),
                                                                      t._v(" "),
                                                                      1 === e.active
                                                                          ? s("td", { staticClass: "text-center" }, [s("label", { staticClass: "badge badge-success" }, [t._v("Visible")])])
                                                                          : s("td", { staticClass: "text-center" }, [s("label", { staticClass: "badge badge-danger" }, [t._v("Invisible")])]),
                                                                      t._v(" "),
                                                                      s("td", [
                                                                          s("div", { staticClass: "list-icons " }, [
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item mr-2",
                                                                                      attrs: { "data-original-title": "Send Notification", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.send(e);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-bell-ring menu-icon", staticStyle: { color: "#4d83ff" } })]
                                                                              ),
                                                                              t._v(" "),
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item mr-2",
                                                                                      attrs: { "data-original-title": "Edit", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.editing(e);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-pencil fa-lg", staticStyle: { color: "#4d83ff" } })]
                                                                              ),
                                                                              t._v(" "),
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item text-warning",
                                                                                      attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.destroy(e.id);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                              ),
                                                                          ]),
                                                                      ]),
                                                                  ]);
                                                              }),
                                                              0
                                                          ),
                                                      ]),
                                                      t._v(" "),
                                                      s("pagination", { staticClass: "mb-0", attrs: { data: t.livetvs, "show-disabled": !1, limit: 5, size: t.size, align: t.align }, on: { "pagination-change-page": t.getResults } }),
                                                  ],
                                                  1
                                              ),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.add || t.edit
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s("section", [
                                                  s("div", { staticClass: "form-group" }, [
                                                      s("div", { staticClass: "col-md-3" }, [
                                                          s("div", { staticClass: "form-check" }, [
                                                              s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                  s("input", {
                                                                      directives: [{ name: "model", rawName: "v-model", value: t.form.livetv.vip, expression: "form.livetv.vip" }],
                                                                      staticClass: "custom-control-input",
                                                                      attrs: { id: "vip", type: "checkbox" },
                                                                      domProps: { checked: Array.isArray(t.form.livetv.vip) ? t._i(t.form.livetv.vip, null) > -1 : t.form.livetv.vip },
                                                                      on: {
                                                                          change: function (e) {
                                                                              var s = t.form.livetv.vip,
                                                                                  a = e.target,
                                                                                  i = !!a.checked;
                                                                              if (Array.isArray(s)) {
                                                                                  var r = t._i(s, null);
                                                                                  a.checked ? r < 0 && t.$set(t.form.livetv, "vip", s.concat([null])) : r > -1 && t.$set(t.form.livetv, "vip", s.slice(0, r).concat(s.slice(r + 1)));
                                                                              } else t.$set(t.form.livetv, "vip", i);
                                                                          },
                                                                      },
                                                                  }),
                                                                  t._v(" "),
                                                                  s("label", { staticClass: "custom-control-label", attrs: { for: "vip" } }, [t._v("\n                       VIP\n                      ")]),
                                                              ]),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "col-md-3" }, [
                                                      s("div", { staticClass: "form-group" }, [
                                                          s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.livetv.active, expression: "form.livetv.active" }],
                                                                  staticClass: "custom-control-input",
                                                                  attrs: { id: "Active", type: "checkbox" },
                                                                  domProps: { checked: Array.isArray(t.form.livetv.active) ? t._i(t.form.livetv.active, null) > -1 : t.form.livetv.active },
                                                                  on: {
                                                                      change: function (e) {
                                                                          var s = t.form.livetv.active,
                                                                              a = e.target,
                                                                              i = !!a.checked;
                                                                          if (Array.isArray(s)) {
                                                                              var r = t._i(s, null);
                                                                              a.checked ? r < 0 && t.$set(t.form.livetv, "active", s.concat([null])) : r > -1 && t.$set(t.form.livetv, "active", s.slice(0, r).concat(s.slice(r + 1)));
                                                                          } else t.$set(t.form.livetv, "active", i);
                                                                      },
                                                                  },
                                                              }),
                                                              t._v(" "),
                                                              s("label", { staticClass: "custom-control-label", attrs: { for: "Active" } }, [t._v("Active")]),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  0 == t.settings.livetv_multi_servers
                                                      ? s("div", { staticClass: "col-md-3" }, [
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.form.livetv.embed, expression: "form.livetv.embed" }],
                                                                        staticClass: "custom-control-input",
                                                                        attrs: { id: "embed", type: "checkbox" },
                                                                        domProps: { checked: Array.isArray(t.form.livetv.embed) ? t._i(t.form.livetv.embed, null) > -1 : t.form.livetv.embed },
                                                                        on: {
                                                                            change: function (e) {
                                                                                var s = t.form.livetv.embed,
                                                                                    a = e.target,
                                                                                    i = !!a.checked;
                                                                                if (Array.isArray(s)) {
                                                                                    var r = t._i(s, null);
                                                                                    a.checked ? r < 0 && t.$set(t.form.livetv, "embed", s.concat([null])) : r > -1 && t.$set(t.form.livetv, "embed", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                } else t.$set(t.form.livetv, "embed", i);
                                                                            },
                                                                        },
                                                                    }),
                                                                    t._v(" "),
                                                                    s("label", { staticClass: "custom-control-label", attrs: { for: "embed" } }, [t._v("Embed Link ?")]),
                                                                ]),
                                                            ]),
                                                        ])
                                                      : t._e(),
                                                  t._v(" "),
                                                  0 == t.settings.livetv_multi_servers
                                                      ? s("div", { staticClass: "col-md-3" }, [
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.form.livetv.hls, expression: "form.livetv.hls" }],
                                                                        staticClass: "custom-control-input",
                                                                        attrs: { id: "hls", type: "checkbox" },
                                                                        domProps: { checked: Array.isArray(t.form.livetv.hls) ? t._i(t.form.livetv.hls, null) > -1 : t.form.livetv.hls },
                                                                        on: {
                                                                            change: function (e) {
                                                                                var s = t.form.livetv.hls,
                                                                                    a = e.target,
                                                                                    i = !!a.checked;
                                                                                if (Array.isArray(s)) {
                                                                                    var r = t._i(s, null);
                                                                                    a.checked ? r < 0 && t.$set(t.form.livetv, "hls", s.concat([null])) : r > -1 && t.$set(t.form.livetv, "hls", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                } else t.$set(t.form.livetv, "hls", i);
                                                                            },
                                                                        },
                                                                    }),
                                                                    t._v(" "),
                                                                    s("label", { staticClass: "custom-control-label", attrs: { for: "hls" } }, [t._v("Hls Link (PHP FORMAT)")]),
                                                                ]),
                                                            ]),
                                                        ])
                                                      : t._e(),
                                                  t._v(" "),
                                                  t.add
                                                      ? s("div", { staticClass: "col-md-3" }, [
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.form.notification, expression: "form.notification" }],
                                                                        staticClass: "custom-control-input",
                                                                        attrs: { id: "notification", type: "checkbox" },
                                                                        domProps: { checked: Array.isArray(t.form.notification) ? t._i(t.form.notification, null) > -1 : t.form.notification },
                                                                        on: {
                                                                            change: function (e) {
                                                                                var s = t.form.notification,
                                                                                    a = e.target,
                                                                                    i = !!a.checked;
                                                                                if (Array.isArray(s)) {
                                                                                    var r = t._i(s, null);
                                                                                    a.checked ? r < 0 && t.$set(t.form, "notification", s.concat([null])) : r > -1 && t.$set(t.form, "notification", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                } else t.$set(t.form, "notification", i);
                                                                            },
                                                                        },
                                                                    }),
                                                                    t._v(" "),
                                                                    s("label", { staticClass: "custom-control-label", attrs: { for: "notification" } }, [t._v("Push notification")]),
                                                                ]),
                                                            ]),
                                                        ])
                                                      : t._e(),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "title" } }, [t._v("Title")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.livetv.name, expression: "form.livetv.name" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { placeholder: "Stream Name", id: "title", type: "text" },
                                                                  domProps: { value: t.form.livetv.name },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.livetv, "name", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "title" } }, [t._v("Overview")]),
                                                              t._v(" "),
                                                              s("textarea", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.livetv.overview, expression: "form.livetv.overview" }],
                                                                  staticClass: "form-control pb-3",
                                                                  attrs: { id: "overview", placeholder: "Stream Overview", required: "", rows: "8" },
                                                                  domProps: { value: t.form.livetv.overview },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.livetv, "overview", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s(
                                                              "div",
                                                              { staticClass: "form-group" },
                                                              [
                                                                  s("multiselect", {
                                                                      attrs: {
                                                                          "clear-on-select": !1,
                                                                          "close-on-select": !1,
                                                                          hideSelected: !0,
                                                                          multiple: !0,
                                                                          options: t.options,
                                                                          "preserve-search": !0,
                                                                          label: "name",
                                                                          placeholder: "Select Genre",
                                                                          "track-by": "name",
                                                                      },
                                                                      on: { remove: t.destroyGenre },
                                                                      model: {
                                                                          value: t.form.livetv.genres,
                                                                          callback: function (e) {
                                                                              t.$set(t.form.livetv, "genres", e);
                                                                          },
                                                                          expression: "form.livetv.genres",
                                                                      },
                                                                  }),
                                                              ],
                                                              1
                                                          ),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "title" } }, [t._v("BackDrop Path")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.livetv.backdrop_path, expression: "form.livetv.backdrop_path" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "backdrop_path", name: "backdrop_path", placeholder: "Backdrop Image", required: "", type: "text" },
                                                                  domProps: { value: t.form.livetv.backdrop_path },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.livetv, "backdrop_path", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                              t._v(" "),
                                                              t.form.livetv.poster_path
                                                                  ? s("img", { staticClass: "back_poster", attrs: { src: t.form.livetv.poster_path, alt: "poster path", "data-loaded": "true", height: "316", width: "210" } })
                                                                  : t._e(),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "poster_path" } }, [t._v("Poster Path")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.livetv.poster_path, expression: "form.livetv.poster_path" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "poster_path", name: "poster_path", placeholder: "Poster Image Link or Upload", required: "", type: "text" },
                                                                  domProps: { value: t.form.livetv.poster_path },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.livetv, "poster_path", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", [t._v("Poster Upload")]),
                                                              t._v(" "),
                                                              s("input", { staticClass: "file-upload-default" }),
                                                              t._v(" "),
                                                              s("div", { staticClass: "input-group col-xs-12" }, [
                                                                  s("input", { staticClass: "form-control file-upload-info", attrs: { id: "poster", placeholder: "Upload Image", type: "file" }, on: { change: t.storePoster } }),
                                                                  t._v(" "),
                                                                  t._m(3),
                                                              ]),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  0 == t.settings.livetv_multi_servers
                                                      ? s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-12" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "title" } }, [t._v("Link")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.form.livetv.link, expression: "form.livetv.link" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "link", placeholder: "HLS - M3U8 - DASH Steam Links", required: "", type: "text" },
                                                                        domProps: { value: t.form.livetv.link },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.form.livetv, "link", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ])
                                                      : t._e(),
                                                  t._v(" "),
                                                  t.add || (t.edit && 1 == t.settings.livetv_multi_servers)
                                                      ? s("div", { staticClass: "form-group" }, [
                                                            t._m(4),
                                                            t._v(" "),
                                                            s("div", { staticClass: "row" }, [
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s(
                                                                        "div",
                                                                        { staticClass: "form-group" },
                                                                        [
                                                                            s("label", { attrs: { for: "server" } }, [t._v("Server")]),
                                                                            t._v(" "),
                                                                            s("multiselect", {
                                                                                attrs: { options: t.servers, id: "server", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                model: {
                                                                                    value: t.server,
                                                                                    callback: function (e) {
                                                                                        t.server = e;
                                                                                    },
                                                                                    expression: "server",
                                                                                },
                                                                            }),
                                                                        ],
                                                                        1
                                                                    ),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s(
                                                                        "div",
                                                                        { staticClass: "form-group" },
                                                                        [
                                                                            s("label", { attrs: { for: "lang" } }, [t._v("Language")]),
                                                                            t._v(" "),
                                                                            s("multiselect", {
                                                                                attrs: { options: t.langs, id: "lang", label: "english_name", placeholder: "Select a Language", "track-by": "iso_639_1" },
                                                                                model: {
                                                                                    value: t.lang,
                                                                                    callback: function (e) {
                                                                                        t.lang = e;
                                                                                    },
                                                                                    expression: "lang",
                                                                                },
                                                                            }),
                                                                        ],
                                                                        1
                                                                    ),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s(
                                                                        "div",
                                                                        { staticClass: "form-group" },
                                                                        [
                                                                            s("label", { attrs: { for: "header" } }, [t._v("Headers")]),
                                                                            t._v(" "),
                                                                            s("multiselect", {
                                                                                attrs: { options: t.headers, id: "header", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                model: {
                                                                                    value: t.header,
                                                                                    callback: function (e) {
                                                                                        t.header = e;
                                                                                    },
                                                                                    expression: "header",
                                                                                },
                                                                            }),
                                                                        ],
                                                                        1
                                                                    ),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s(
                                                                        "div",
                                                                        { staticClass: "form-group" },
                                                                        [
                                                                            s("label", { attrs: { for: "useragent" } }, [t._v("User Agent")]),
                                                                            t._v(" "),
                                                                            s("multiselect", {
                                                                                attrs: { options: t.useragents, id: "useragent", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                model: {
                                                                                    value: t.useragent,
                                                                                    callback: function (e) {
                                                                                        t.useragent = e;
                                                                                    },
                                                                                    expression: "useragent",
                                                                                },
                                                                            }),
                                                                        ],
                                                                        1
                                                                    ),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s(
                                                                        "div",
                                                                        { staticClass: "form-group" },
                                                                        [
                                                                            s("label", { attrs: { for: "useragent" } }, [t._v("DRM UUID")]),
                                                                            t._v(" "),
                                                                            s("multiselect", {
                                                                                attrs: { options: t.drmuui, id: "drmuui", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                model: {
                                                                                    value: t.drmuuiselected,
                                                                                    callback: function (e) {
                                                                                        t.drmuuiselected = e;
                                                                                    },
                                                                                    expression: "drmuuiselected",
                                                                                },
                                                                            }),
                                                                        ],
                                                                        1
                                                                    ),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-6" }, [
                                                                    s(
                                                                        "div",
                                                                        { staticClass: "form-group" },
                                                                        [
                                                                            s("label", { attrs: { for: "useragent" } }, [t._v("DRM License Uri")]),
                                                                            t._v(" "),
                                                                            s("multiselect", {
                                                                                attrs: { options: t.serversdrm, id: "serversdrm", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                model: {
                                                                                    value: t.drmlicenceuriselected,
                                                                                    callback: function (e) {
                                                                                        t.drmlicenceuriselected = e;
                                                                                    },
                                                                                    expression: "drmlicenceuriselected",
                                                                                },
                                                                            }),
                                                                        ],
                                                                        1
                                                                    ),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.drm, expression: "drm" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "drm", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.drm) ? t._i(t.drm, null) > -1 : t.drm },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.drm,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked ? r < 0 && (t.drm = s.concat([null])) : r > -1 && (t.drm = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.drm = i;
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "drm" } }, [t._v("DRM")]),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.embed, expression: "embed" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "embed", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.embed) ? t._i(t.embed, null) > -1 : t.embed },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.embed,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked ? r < 0 && (t.embed = s.concat([null])) : r > -1 && (t.embed = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.embed = i;
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "embed" } }, [t._v("Embed")]),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.hls, expression: "hls" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "hls", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.hls) ? t._i(t.hls, null) > -1 : t.hls },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.hls,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked ? r < 0 && (t.hls = s.concat([null])) : r > -1 && (t.hls = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.hls = i;
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "hls" } }, [t._v("HlS Link  (PHP FORMAT)")]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "row" }, [
                                                                s("div", { staticClass: "col-md-6" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "link" } }, [t._v("Link")]),
                                                                        t._v(" "),
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.link, expression: "link" }],
                                                                            staticClass: "form-control",
                                                                            attrs: { id: "link", placeholder: "Upload or Insert Direct  Link", type: "text" },
                                                                            domProps: { value: t.link },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || (t.link = e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-1 my-auto" }, [
                                                                    s(
                                                                        "button",
                                                                        {
                                                                            staticClass: "btn btn-primary mr-2",
                                                                            on: {
                                                                                click: function (e) {
                                                                                    return e.preventDefault(), t.addLink();
                                                                                },
                                                                            },
                                                                        },
                                                                        [t._v("\n                  Add\n                ")]
                                                                    ),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "table-responsive" }, [
                                                                s("table", { staticClass: "table", attrs: { "aria-describedby": "Links Table" } }, [
                                                                    t._m(5),
                                                                    t._v(" "),
                                                                    s(
                                                                        "tbody",
                                                                        { attrs: { name: "links" } },
                                                                        t._l(t.form.links, function (e, a) {
                                                                            return s("tr", { key: a }, [
                                                                                s("td", { staticClass: "text-center" }, [
                                                                                    s("div", { staticClass: "list-icons" }, [
                                                                                        s(
                                                                                            "a",
                                                                                            {
                                                                                                staticClass: "list-icons-item text-warning",
                                                                                                attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                                on: {
                                                                                                    click: function (s) {
                                                                                                        return s.preventDefault(), t.destroyLink(e, a);
                                                                                                    },
                                                                                                },
                                                                                            },
                                                                                            [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                                        ),
                                                                                    ]),
                                                                                ]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.lang))]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.server))]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.header))]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.useragent))]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.link))]),
                                                                                t._v(" "),
                                                                                (1 === e.hls) | (!0 === e.hls)
                                                                                    ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                                    : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                                t._v(" "),
                                                                                (1 === e.embed) | (!0 === e.embed)
                                                                                    ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                                    : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                                t._v(" "),
                                                                                (1 === e.drm) | (!0 === e.drm)
                                                                                    ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                                    : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.drmuuid))]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.drmlicenceuri))]),
                                                                            ]);
                                                                        }),
                                                                        0
                                                                    ),
                                                                ]),
                                                            ]),
                                                        ])
                                                      : t._e(),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row justify-content-end" }, [
                                                      s("div", { staticClass: "col-auto" }, [
                                                          t.add
                                                              ? s(
                                                                    "button",
                                                                    {
                                                                        staticClass: "btn btn-primary mr-2",
                                                                        attrs: { type: "submit" },
                                                                        on: {
                                                                            click: function (e) {
                                                                                return e.preventDefault(), t.store();
                                                                            },
                                                                        },
                                                                    },
                                                                    [t._v("Save")]
                                                                )
                                                              : t._e(),
                                                          t._v(" "),
                                                          t.edit
                                                              ? s(
                                                                    "button",
                                                                    {
                                                                        staticClass: "btn btn-primary mr-2",
                                                                        attrs: { type: "submit" },
                                                                        on: {
                                                                            click: function (e) {
                                                                                return e.preventDefault(), t.update();
                                                                            },
                                                                        },
                                                                    },
                                                                    [t._v("Update")]
                                                                )
                                                              : t._e(),
                                                      ]),
                                                  ]),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "d-flex align-items-end flex-wrap" }, [e("div", { staticClass: "d-flex" })]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "input-group-prepend" }, [e("span", { staticClass: "input-group-text", attrs: { id: "search" } }, [e("i", { staticClass: "mdi mdi-magnify" })])]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { staticClass: "text-center", attrs: { id: "cover" } }, [t._v("Cover")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "id" } }, [t._v("ID")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "name" } }, [t._v("NAME")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "name" } }, [t._v("STATUS")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "options" } }, [t._v("OPTIONS")]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("Upload")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("em", { staticClass: "mdi mdi-video menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("VIDEOS")])]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { staticClass: "text-center", attrs: { id: "actions" } }, [t._v("Actions")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "langs" } }, [t._v("Lang")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("Server")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("Header")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("UserAgent")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("Link")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "hls" } }, [t._v("Hls Link (PHP FORMAT)")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("Embed")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("DRM")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("DRM UUID")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("DRM Licence")]),
                                ]),
                            ]);
                        },
                    ],
                    !1,
                    null,
                    null,
                    null
                );
            e.default = u.exports;
        },
        346: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a),
                r = s(3),
                n = s(6);
            function o(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            var l = {
                    data: function () {
                        return { title: "", body: "", image: "", link: "", type: "custom", tmdb: "", message: "" };
                    },
                    mounted: function () {
                        var t = this;
                        setTimeout(function () {
                            null == t.settings.authorization && t.showAlert("you must configure your FCM server key in settings");
                        }, 1e3);
                    },
                    methods: {
                        send: function () {
                            var t,
                                e = this;
                            return ((t = i.a.mark(function t() {
                                var s, a;
                                return i.a.wrap(
                                    function (t) {
                                        for (;;)
                                            switch ((t.prev = t.next)) {
                                                case 0:
                                                    return (
                                                        (t.prev = 0),
                                                        (s = { headers: { Authorization: "key=" + e.settings.authorization } }),
                                                        (a = { to: "/topics/all", data: { title: e.title, image: e.image, type: e.type, link: e.link, tmdb: e.tmdb, message: e.message } }),
                                                        (t.next = 5),
                                                        http.post("https://fcm.googleapis.com/fcm/send", a, s)
                                                    );
                                                case 5:
                                                    e.showSuccess(), console.log(e.type), (e.title = ""), (e.body = ""), (e.message = ""), (e.image = ""), (e.link = ""), (e.type = "custom"), (e.tmdb = ""), (t.next = 18);
                                                    break;
                                                case 15:
                                                    (t.prev = 15), (t.t0 = t.catch(0)), e.showError();
                                                case 18:
                                                case "end":
                                                    return t.stop();
                                            }
                                    },
                                    t,
                                    null,
                                    [[0, 15]]
                                );
                            })),
                            function () {
                                var e = this,
                                    s = arguments;
                                return new Promise(function (a, i) {
                                    var r = t.apply(e, s);
                                    function n(t) {
                                        o(r, a, i, n, l, "next", t);
                                    }
                                    function l(t) {
                                        o(r, a, i, n, l, "throw", t);
                                    }
                                    n(void 0);
                                });
                            })();
                        },
                        getSearchByName: function (t) {
                            var e = url + "/admin/search_featured?q=" + encodeURI(t);
                            return new Promise(function (s) {
                                if (t.length < 1) return s([]);
                                fetch(e)
                                    .then(function (t) {
                                        return t.json();
                                    })
                                    .then(function (t) {
                                        s(t.search);
                                    });
                            });
                        },
                        getResultValue: function (t) {
                            return 1 === t.is_anime || null != t.name ? t.name : t.title;
                        },
                        onSubmit: function (t) {
                            1 === t.is_anime
                                ? ((this.title = t.name), (this.message = t.overview), (this.image = t.backdrop_path), (this.type = "2"), (this.tmdb = t.id))
                                : null != t.name
                                ? ((this.title = t.name), (this.message = t.overview), (this.image = t.backdrop_path), (this.type = "1"), (this.tmdb = t.id))
                                : ((this.title = t.title), (this.message = t.overview), (this.image = t.backdrop_path), (this.type = "0"), (this.tmdb = t.id), console.log(this.type));
                        },
                    },
                    mixins: [r.a, n.a],
                },
                c = s(4),
                d = Object(c.a)(
                    l,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-md-12 grid-margin stretch-card" }, [
                                s("div", { staticClass: "card" }, [
                                    s("div", { staticClass: "card-body" }, [
                                        s("h4", { staticClass: "card-title" }, [t._v("Notifications")]),
                                        t._v(" "),
                                        s(
                                            "div",
                                            { staticClass: "form-group" },
                                            [
                                                s("autocomplete", {
                                                    attrs: {
                                                        search: t.getSearchByName,
                                                        placeholder: "Search Movie by Name",
                                                        "aria-label": "Search Movie by Name",
                                                        "data-loading": "true",
                                                        "data-position": "above",
                                                        "get-result-value": t.getResultValue,
                                                    },
                                                    on: { submit: t.onSubmit },
                                                }),
                                            ],
                                            1
                                        ),
                                        t._v(" "),
                                        s("form", { staticClass: "forms-sample" }, [
                                            s("div", { staticClass: "form-group" }, [
                                                s("label", { attrs: { for: "title" } }, [t._v("Title")]),
                                                t._v(" "),
                                                s("input", {
                                                    directives: [{ name: "model", rawName: "v-model", value: t.title, expression: "title" }],
                                                    staticClass: "form-control",
                                                    attrs: { id: "title", placeholder: "Title", type: "text" },
                                                    domProps: { value: t.title },
                                                    on: {
                                                        input: function (e) {
                                                            e.target.composing || (t.title = e.target.value);
                                                        },
                                                    },
                                                }),
                                            ]),
                                            t._v(" "),
                                            s("div", { staticClass: "form-group" }, [
                                                s("label", { attrs: { for: "content" } }, [t._v("Content")]),
                                                t._v(" "),
                                                s("textarea", {
                                                    directives: [{ name: "model", rawName: "v-model", value: t.message, expression: "message" }],
                                                    staticClass: "form-control",
                                                    attrs: { cols: "30", id: "content", rows: "10" },
                                                    domProps: { value: t.message },
                                                    on: {
                                                        input: function (e) {
                                                            e.target.composing || (t.message = e.target.value);
                                                        },
                                                    },
                                                }),
                                            ]),
                                            t._v(" "),
                                            s("div", { staticClass: "form-group" }, [
                                                s("label", { attrs: { for: "image" } }, [t._v("Image")]),
                                                t._v(" "),
                                                s("input", {
                                                    directives: [{ name: "model", rawName: "v-model", value: t.image, expression: "image" }],
                                                    staticClass: "form-control",
                                                    attrs: { id: "image", placeholder: "URL link here (Optional)", type: "text" },
                                                    domProps: { value: t.image },
                                                    on: {
                                                        input: function (e) {
                                                            e.target.composing || (t.image = e.target.value);
                                                        },
                                                    },
                                                }),
                                            ]),
                                            t._v(" "),
                                            t.image ? s("img", { staticClass: "back_poster", attrs: { src: t.image, alt: "poster path", "data-loaded": "true", height: "250", width: "120" } }) : t._e(),
                                            t._v(" "),
                                            s("div", { staticClass: "form-group" }, [
                                                s("label", { attrs: { for: "link" } }, [t._v("Link")]),
                                                t._v(" "),
                                                s("input", {
                                                    directives: [{ name: "model", rawName: "v-model", value: t.link, expression: "link" }],
                                                    staticClass: "form-control",
                                                    attrs: { id: "link", placeholder: "URL link here (Optional)", type: "text" },
                                                    domProps: { value: t.link },
                                                    on: {
                                                        input: function (e) {
                                                            e.target.composing || (t.link = e.target.value);
                                                        },
                                                    },
                                                }),
                                            ]),
                                            t._v(" "),
                                            s(
                                                "button",
                                                {
                                                    staticClass: "btn btn-primary mr-2",
                                                    attrs: { disabled: !t.settings.authorization || !t.title || !t.message, type: "button" },
                                                    on: {
                                                        click: function (e) {
                                                            return e.preventDefault(), t.send();
                                                        },
                                                    },
                                                },
                                                [t._v("Submit")]
                                            ),
                                        ]),
                                    ]),
                                ]),
                            ]),
                        ]);
                    },
                    [],
                    !1,
                    null,
                    null,
                    null
                );
            e.default = d.exports;
        },
        347: function (t, e, s) {
            "use strict";
            s.r(e);
            var a,
                i = s(0),
                r = s.n(i),
                n = s(3),
                o = s(6);
            function l(t, e, s) {
                return e in t ? Object.defineProperty(t, e, { value: s, enumerable: !0, configurable: !0, writable: !0 }) : (t[e] = s), t;
            }
            function c(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function d(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var r = t.apply(e, s);
                        function n(t) {
                            c(r, a, i, n, o, "next", t);
                        }
                        function o(t) {
                            c(r, a, i, n, o, "throw", t);
                        }
                        n(void 0);
                    });
                };
            }
            var u = {
                    data: function () {
                        return {
                            password: "",
                            notificationpath: "http://image.tmdb.org/t/p/w500/aL1fZFP5vsh3bIZEOBh6UxxtHK3.jpg",
                            image: "https://picsum.photos/id/1005/600/200",
                            logo: url + "/api/image/logo",
                            miniLogo: url + "/api/image/minilogo",
                            notificationicon: url + "/api/image/notificationicon",
                            networks_layouts_options1: "https://i.imgur.com/2euaMFB.png",
                            networks_layouts_options2: "https://i.imgur.com/3Y1tPs3.png",
                            networks_layouts_options: [
                                { title: "Layout1", img: "https://i.imgur.com/2euaMFB.png" },
                                { title: "Layout2", img: "https://i.imgur.com/3Y1tPs3.png" },
                            ],
                            networks_layouts: ["Layout1", "Layout2"],
                            options_substitles: ["Opensubs", "Internal"],
                            options: ["UnityAds", "StartApp", "Admob", "Facebook", "Appodeal", "Ironsource", "AppNext", "Vungle", "AppLovin"],
                            optionsDownloads: ["PremuimOnly", "WithAdsUnlock", "Free"],
                            optionsDownloadsSources: ["Stream", "External", "All"],
                            options_player: ["UnityAds", "StartApp", "Admob", "Facebook", "Appodeal", "Ironsource", "AppNext", "Vungle", "AppLovin"],
                            options_youtube: ["360p", "720p"],
                            options_trailers: ["Youtube", "SelfHosted", "All"],
                            payments_options: ["All", "Paypal", "Stripe"],
                            options_cast: ["IMDB", "INTERNAL"],
                        };
                    },
                    methods:
                        ((a = {
                            selectedPlan: function (t, e) {
                                (this.settings.default_layout_networks = t.title), console.log(this.settings.default_layout_networks);
                            },
                            update: function () {
                                var t = this;
                                return d(
                                    r.a.mark(function e() {
                                        var s;
                                        return r.a.wrap(
                                            function (e) {
                                                for (;;)
                                                    switch ((e.prev = e.next)) {
                                                        case 0:
                                                            return (e.prev = 0), (e.next = 3), axios.put(url + "/admin/settings/update/" + t.settings.id, t.settings);
                                                        case 3:
                                                            (s = e.sent), t.showSuccess(s.data.message), (e.next = 10);
                                                            break;
                                                        case 7:
                                                            (e.prev = 7), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                        case 10:
                                                        case "end":
                                                            return e.stop();
                                                    }
                                            },
                                            e,
                                            null,
                                            [[0, 7]]
                                        );
                                    })
                                )();
                            },
                            changeAppPassword: function () {
                                var t = this;
                                return d(
                                    r.a.mark(function e() {
                                        var s;
                                        return r.a.wrap(
                                            function (e) {
                                                for (;;)
                                                    switch ((e.prev = e.next)) {
                                                        case 0:
                                                            return (e.prev = 0), (e.next = 3), axios.put(url + "/admin/account/passwordApp/update", { password: t.password });
                                                        case 3:
                                                            (s = e.sent), (t.password = ""), t.showSuccess(s.data.message), (e.next = 11);
                                                            break;
                                                        case 8:
                                                            (e.prev = 8), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                        case 11:
                                                        case "end":
                                                            return e.stop();
                                                    }
                                            },
                                            e,
                                            null,
                                            [[0, 8]]
                                        );
                                    })
                                )();
                            },
                            updateMail: function () {
                                var t = this;
                                return d(
                                    r.a.mark(function e() {
                                        var s;
                                        return r.a.wrap(
                                            function (e) {
                                                for (;;)
                                                    switch ((e.prev = e.next)) {
                                                        case 0:
                                                            return (e.prev = 0), (e.next = 3), axios.get(url + "/admin/updateMailSettings", t.settings);
                                                        case 3:
                                                            (s = e.sent), t.showSuccess(s.data.message), (e.next = 10);
                                                            break;
                                                        case 7:
                                                            (e.prev = 7), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                        case 10:
                                                        case "end":
                                                            return e.stop();
                                                    }
                                            },
                                            e,
                                            null,
                                            [[0, 7]]
                                        );
                                    })
                                )();
                            },
                            updateLogo: function (t) {
                                var e = this;
                                return d(
                                    r.a.mark(function s() {
                                        var a, i;
                                        return r.a.wrap(
                                            function (s) {
                                                for (;;)
                                                    switch ((s.prev = s.next)) {
                                                        case 0:
                                                            return (s.prev = 0), (a = new FormData()).append("image", t.target.files[0]), (s.next = 5), axios.post(url + "/admin/update/logo", a);
                                                        case 5:
                                                            (i = s.sent), (e.logo = i.data.image_path), e.showSuccess(i.data.message), (s.next = 13);
                                                            break;
                                                        case 10:
                                                            (s.prev = 10), (s.t0 = s.catch(0)), e.showError(s.t0.response);
                                                        case 13:
                                                        case "end":
                                                            return s.stop();
                                                    }
                                            },
                                            s,
                                            null,
                                            [[0, 10]]
                                        );
                                    })
                                )();
                            },
                            updateMiniLogo: function (t) {
                                var e = this;
                                return d(
                                    r.a.mark(function s() {
                                        var a, i;
                                        return r.a.wrap(
                                            function (s) {
                                                for (;;)
                                                    switch ((s.prev = s.next)) {
                                                        case 0:
                                                            return (s.prev = 0), (a = new FormData()).append("image", t.target.files[0]), (s.next = 5), axios.post(url + "/admin/update/minilogo", a);
                                                        case 5:
                                                            (i = s.sent), (e.miniLogo = i.data.image_path), e.showSuccess(i.data.message), (s.next = 13);
                                                            break;
                                                        case 10:
                                                            (s.prev = 10), (s.t0 = s.catch(0)), e.showError(s.t0.response);
                                                        case 13:
                                                        case "end":
                                                            return s.stop();
                                                    }
                                            },
                                            s,
                                            null,
                                            [[0, 10]]
                                        );
                                    })
                                )();
                            },
                        }),
                        l(a, "updateMiniLogo", function (t) {
                            var e = this;
                            return d(
                                r.a.mark(function s() {
                                    var a, i;
                                    return r.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (s.prev = 0), (a = new FormData()).append("image", t.target.files[0]), (s.next = 5), axios.post(url + "/admin/update/notificationicon", a);
                                                    case 5:
                                                        (i = s.sent), (e.notificationicon = i.data.image_path), e.showSuccess(i.data.message), (s.next = 13);
                                                        break;
                                                    case 10:
                                                        (s.prev = 10), (s.t0 = s.catch(0)), e.showError(s.t0.response);
                                                    case 13:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 10]]
                                    );
                                })
                            )();
                        }),
                        l(a, "storePosterSplash", function (t) {
                            var e = this;
                            return d(
                                r.a.mark(function s() {
                                    var a, i;
                                    return r.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (s.prev = 0), (a = new FormData()).append("image", t.target.files[0]), (s.next = 5), axios.post(url + "/admin/update/splash", a);
                                                    case 5:
                                                        (i = s.sent), (e.settings.splash_image = i.data.image_path), e.showSuccess(i.data.message), (s.next = 13);
                                                        break;
                                                    case 10:
                                                        (s.prev = 10), (s.t0 = s.catch(0)), e.showError(s.t0.response);
                                                    case 13:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 10]]
                                    );
                                })
                            )();
                        }),
                        l(a, "storePosterPlaceHoder", function (t) {
                            var e = this;
                            return d(
                                r.a.mark(function s() {
                                    var a, i;
                                    return r.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (s.prev = 0), (a = new FormData()).append("image", t.target.files[0]), (s.next = 5), axios.post(url + "/admin/update/episode", a);
                                                    case 5:
                                                        (i = s.sent), (e.settings.default_media_placeholder_path = i.data.image_path), e.showSuccess(i.data.message), (s.next = 13);
                                                        break;
                                                    case 10:
                                                        (s.prev = 10), (s.t0 = s.catch(0)), e.showError(s.t0.response);
                                                    case 13:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 10]]
                                    );
                                })
                            )();
                        }),
                        l(a, "storeCustomBannerImage", function (t) {
                            var e = this;
                            return d(
                                r.a.mark(function s() {
                                    var a, i;
                                    return r.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (s.prev = 0), (a = new FormData()).append("image", t.target.files[0]), (s.next = 5), axios.post(url + "/admin/update/customBanner", a);
                                                    case 5:
                                                        (i = s.sent), (e.settings.custom_banner_image = i.data.image_path), e.showSuccess(i.data.message), (s.next = 13);
                                                        break;
                                                    case 10:
                                                        (s.prev = 10), (s.t0 = s.catch(0)), e.showError(s.t0.response);
                                                    case 13:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 10]]
                                    );
                                })
                            )();
                        }),
                        l(a, "storePosterPlaceHoderHome", function (t) {
                            var e = this;
                            return d(
                                r.a.mark(function s() {
                                    var a, i;
                                    return r.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (s.prev = 0), (a = new FormData()).append("image", t.target.files[0]), (s.next = 5), axios.post(url + "/admin/update/mediahome", a);
                                                    case 5:
                                                        (i = s.sent), (e.settings.default_media_placeholder_path_home = i.data.image_path), e.showSuccess(i.data.message), (s.next = 13);
                                                        break;
                                                    case 10:
                                                        (s.prev = 10), (s.t0 = s.catch(0)), e.showError(s.t0.response);
                                                    case 13:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 10]]
                                    );
                                })
                            )();
                        }),
                        l(a, "clearCache", function () {
                            var t = this;
                            this.showConfirm(
                                d(
                                    r.a.mark(function e() {
                                        return r.a.wrap(
                                            function (e) {
                                                for (;;)
                                                    switch ((e.prev = e.next)) {
                                                        case 0:
                                                            return (e.prev = 0), (e.next = 3), axios.get(url + "/api/cacheClear");
                                                        case 3:
                                                            e.sent, t.showSuccess("The Cache Has been Cleared !"), (e.next = 10);
                                                            break;
                                                        case 7:
                                                            (e.prev = 7), (e.t0 = e.catch(0)), t.showError();
                                                        case 10:
                                                        case "end":
                                                            return e.stop();
                                                    }
                                            },
                                            e,
                                            null,
                                            [[0, 7]]
                                        );
                                    })
                                )
                            );
                        }),
                        l(a, "clearCacheApi", function () {
                            var t = this;
                            this.showConfirm(
                                d(
                                    r.a.mark(function e() {
                                        return r.a.wrap(
                                            function (e) {
                                                for (;;)
                                                    switch ((e.prev = e.next)) {
                                                        case 0:
                                                            return (e.prev = 0), (e.next = 3), axios.get(url + "/api/cacheClearApi");
                                                        case 3:
                                                            e.sent, t.showSuccess("The Application Cache Api Has been Cleared !"), (e.next = 10);
                                                            break;
                                                        case 7:
                                                            (e.prev = 7), (e.t0 = e.catch(0)), t.showError();
                                                        case 10:
                                                        case "end":
                                                            return e.stop();
                                                    }
                                            },
                                            e,
                                            null,
                                            [[0, 7]]
                                        );
                                    })
                                )
                            );
                        }),
                        a),
                    mixins: [n.a, o.a],
                },
                m = (s(332), s(4)),
                p = Object(m.a)(
                    u,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-12 grid-margin stretch-card" }, [
                                s("div", { staticClass: "card" }, [
                                    s("div", { staticClass: "card-body" }, [
                                        s("div", { staticClass: "row" }, [
                                            s("div", { staticClass: "col-md-12" }, [
                                                t._m(0),
                                                t._v(" "),
                                                s("div", { staticClass: "tab-content", attrs: { id: "myTabContent" } }, [
                                                    s("div", { staticClass: "tab-pane fade show active", attrs: { "aria-labelledby": "brand-tab", id: "brand", role: "tabpanel" } }, [
                                                        s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-5" }, [t.logo ? s("div", { staticClass: "logo" }, [s("img", { attrs: { src: t.logo, alt: "logo" } })]) : t._e()]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-5" }, [t.miniLogo ? s("div", { staticClass: "logo" }, [s("img", { attrs: { src: t.miniLogo, alt: "mini logo" } })]) : t._e()]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-5" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", [t._v("Panel Logo upload")]),
                                                                    t._v(" "),
                                                                    s("input", { staticClass: "file-upload-default" }),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "input-group col-xs-12" }, [
                                                                        s("input", { staticClass: "form-control file-upload-info", attrs: { id: "logo", placeholder: "Upload Image", type: "file" }, on: { change: t.updateLogo } }),
                                                                        t._v(" "),
                                                                        t._m(1),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-5" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", [t._v("App Logo upload")]),
                                                                    t._v(" "),
                                                                    s("input", { staticClass: "file-upload-default" }),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "input-group col-xs-12" }, [
                                                                        s("input", { staticClass: "form-control file-upload-info", attrs: { id: "miniLogo", placeholder: "Upload Image", type: "file" }, on: { change: t.updateMiniLogo } }),
                                                                        t._v(" "),
                                                                        t._m(2),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "app_name" } }, [t._v("App name")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.app_name, expression: "settings.app_name" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "app_name", type: "text" },
                                                                        domProps: { value: t.settings.app_name },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "app_name", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "app_name" } }, [t._v("App Version")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.latestVersion, expression: "settings.latestVersion" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "latestVersion", type: "text" },
                                                                        domProps: { value: t.settings.latestVersion },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "latestVersion", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "update_title" } }, [t._v("Update Title")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.update_title, expression: "settings.update_title" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "update_title", type: "text" },
                                                                        domProps: { value: t.settings.update_title },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "update_title", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "app_name" } }, [t._v("App Update_link")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.url, expression: "settings.url" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "url", type: "text" },
                                                                        domProps: { value: t.settings.url },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "url", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-12" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "releaseNotes" } }, [t._v("Update Release Notes")]),
                                                                    t._v(" "),
                                                                    s("textarea", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.releaseNotes, expression: "settings.releaseNotes" }],
                                                                        staticClass: "form-control pb-3",
                                                                        attrs: { id: "releaseNotes", rows: "4", type: "text" },
                                                                        domProps: { value: t.settings.releaseNotes },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "releaseNotes", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-12" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "title" } }, [t._v("Privacy Policy")]),
                                                                    t._v(" "),
                                                                    s("textarea", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.privacy_policy, expression: "settings.privacy_policy" }],
                                                                        staticClass: "form-control pb-3",
                                                                        attrs: { id: "privacy_policy", rows: "10", type: "text" },
                                                                        domProps: { value: t.settings.privacy_policy },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "privacy_policy", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-3" }, [
                                                                s("div", { staticClass: "form-check" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.enable_custom_message, expression: "settings.enable_custom_message" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "enable_custom_message", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.settings.enable_custom_message) ? t._i(t.settings.enable_custom_message, null) > -1 : t.settings.enable_custom_message },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.settings.enable_custom_message,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked
                                                                                            ? r < 0 && t.$set(t.settings, "enable_custom_message", s.concat([null]))
                                                                                            : r > -1 && t.$set(t.settings, "enable_custom_message", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.$set(t.settings, "enable_custom_message", i);
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "enable_custom_message" } }, [
                                                                            t._v("\n                            Enable Custom Message (Home Page)\n                          "),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-12" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "custom_message" } }, [t._v("Custom Message")]),
                                                                    t._v(" "),
                                                                    s("textarea", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.custom_message, expression: "settings.custom_message" }],
                                                                        staticClass: "form-control pb-3",
                                                                        attrs: { id: "custom_message", rows: "10", type: "text" },
                                                                        domProps: { value: t.settings.custom_message },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "custom_message", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-3" }, [
                                                                s("div", { staticClass: "form-check" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.enable_custom_banner, expression: "settings.enable_custom_banner" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "enable_custom_banner", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.settings.enable_custom_banner) ? t._i(t.settings.enable_custom_banner, null) > -1 : t.settings.enable_custom_banner },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.settings.enable_custom_banner,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked
                                                                                            ? r < 0 && t.$set(t.settings, "enable_custom_banner", s.concat([null]))
                                                                                            : r > -1 && t.$set(t.settings, "enable_custom_banner", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.$set(t.settings, "enable_custom_banner", i);
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "enable_custom_banner" } }, [
                                                                            t._v("\n                            Enable Custom Banner (Home Page)\n                          "),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-8" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "custom_banner_image" } }, [t._v("Custom Banner Image")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.custom_banner_image, expression: "settings.custom_banner_image" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "custom_banner_image", type: "text" },
                                                                        domProps: { value: t.settings.custom_banner_image },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "custom_banner_image", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            t.settings.custom_banner_image ? s("img", { staticClass: "poster", attrs: { src: t.settings.custom_banner_image, "data-loaded": "true", height: "316", width: "210" } }) : t._e(),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-12" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", [t._v("Custom Banner Image Upload ")]),
                                                                    t._v(" "),
                                                                    s("input", { staticClass: "file-upload-default" }),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "input-group col-xs-12" }, [
                                                                        s("input", {
                                                                            staticClass: "form-control file-upload-info",
                                                                            attrs: { id: "poster", placeholder: "Upload Image", type: "file" },
                                                                            on: { change: t.storeCustomBannerImage },
                                                                        }),
                                                                        t._v(" "),
                                                                        t._m(3),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "col-md-6" }, [
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("label", { attrs: { for: "app_name" } }, [t._v("Custom Banner Link ( open a link )")]),
                                                                t._v(" "),
                                                                s("input", {
                                                                    directives: [{ name: "model", rawName: "v-model", value: t.settings.custom_banner_image_link, expression: "settings.custom_banner_image_link" }],
                                                                    staticClass: "form-control",
                                                                    attrs: { id: "url", type: "text" },
                                                                    domProps: { value: t.settings.custom_banner_image_link },
                                                                    on: {
                                                                        input: function (e) {
                                                                            e.target.composing || t.$set(t.settings, "custom_banner_image_link", e.target.value);
                                                                        },
                                                                    },
                                                                }),
                                                            ]),
                                                        ]),
                                                    ]),
                                                    t._v(" "),
                                                    s("div", { staticClass: "tab-pane fade", attrs: { "aria-labelledby": "firebase-tab", id: "firebase", role: "tabpanel" } }, [
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "row" }, [
                                                                s("div", { staticClass: "col-md-8" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "app_name" } }, [t._v("Firebase Server Key")]),
                                                                        t._v(" "),
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.authorization, expression: "settings.authorization" }],
                                                                            staticClass: "form-control",
                                                                            attrs: { id: "authorization", type: "text" },
                                                                            domProps: { value: t.settings.authorization },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || t.$set(t.settings, "authorization", e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                    ]),
                                                    t._v(" "),
                                                    s("div", { staticClass: "tab-pane fade", attrs: { "aria-labelledby": "ads-tab", id: "ads", role: "tabpanel" } }, [
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.wach_ads_to_unlock_player, expression: "settings.wach_ads_to_unlock_player" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "wach_ads_to_unlock_player", type: "checkbox" },
                                                                                domProps: {
                                                                                    checked: Array.isArray(t.settings.wach_ads_to_unlock_player) ? t._i(t.settings.wach_ads_to_unlock_player, null) > -1 : t.settings.wach_ads_to_unlock_player,
                                                                                },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.wach_ads_to_unlock_player,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "wach_ads_to_unlock_player", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "wach_ads_to_unlock_player", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "wach_ads_to_unlock_player", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "wach_ads_to_unlock_player" } }, [
                                                                                t._v("\n                              Enable ( Ads Unlock Inside Player)\n                            "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s(
                                                                    "div",
                                                                    { staticClass: "form-group" },
                                                                    [
                                                                        s("label", { attrs: { for: "lang" } }, [t._v("Default Interstitial Network ( Inside Player only\n                          )")]),
                                                                        t._v(" "),
                                                                        s("multiselect", {
                                                                            attrs: { options: t.options_player },
                                                                            model: {
                                                                                value: t.settings.default_network_player,
                                                                                callback: function (e) {
                                                                                    t.$set(t.settings, "default_network_player", e);
                                                                                },
                                                                                expression: "settings.default_network_player",
                                                                            },
                                                                        }),
                                                                    ],
                                                                    1
                                                                ),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.wach_ads_to_unlock, expression: "settings.wach_ads_to_unlock" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "wach_ads_to_unlock", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.wach_ads_to_unlock) ? t._i(t.settings.wach_ads_to_unlock, null) > -1 : t.settings.wach_ads_to_unlock },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.wach_ads_to_unlock,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "wach_ads_to_unlock", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "wach_ads_to_unlock", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "wach_ads_to_unlock", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "wach_ads_to_unlock" } }, [
                                                                                t._v("\n                              Enable ( UNLOCK CONTENT)\n                            "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s(
                                                                    "div",
                                                                    { staticClass: "form-group" },
                                                                    [
                                                                        s("label", { attrs: { for: "lang" } }, [t._v("Default Rewarded Network")]),
                                                                        t._v(" "),
                                                                        s("multiselect", {
                                                                            attrs: { options: t.options },
                                                                            model: {
                                                                                value: t.settings.default_network,
                                                                                callback: function (e) {
                                                                                    t.$set(t.settings, "default_network", e);
                                                                                },
                                                                                expression: "settings.default_network",
                                                                            },
                                                                        }),
                                                                    ],
                                                                    1
                                                                ),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        "Facebook" == t.settings.default_network ? s("div", { staticClass: "row d-flex", attrs: { id: "proBanner", "wfd-id": "71" } }, [t._m(4)]) : t._e(),
                                                        t._v(" "),
                                                        t._m(5),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-check" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.applovin_native, expression: "settings.applovin_native" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "applovin_native", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.settings.applovin_native) ? t._i(t.settings.applovin_native, null) > -1 : t.settings.applovin_native },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.settings.applovin_native,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked
                                                                                            ? r < 0 && t.$set(t.settings, "applovin_native", s.concat([null]))
                                                                                            : r > -1 && t.$set(t.settings, "applovin_native", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.$set(t.settings, "applovin_native", i);
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "applovin_native" } }, [
                                                                            t._v("\n                            AppLovin Native Ads\n                          "),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-check" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.applovin_banner, expression: "settings.applovin_banner" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "applovin_banner", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.settings.applovin_banner) ? t._i(t.settings.applovin_banner, null) > -1 : t.settings.applovin_banner },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.settings.applovin_banner,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked
                                                                                            ? r < 0 && t.$set(t.settings, "applovin_banner", s.concat([null]))
                                                                                            : r > -1 && t.$set(t.settings, "applovin_banner", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.$set(t.settings, "applovin_banner", i);
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "applovin_banner" } }, [
                                                                            t._v("\n                            AppLovin Banner\n                          "),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.applovin_interstitial, expression: "settings.applovin_interstitial" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "applovin_interstitial", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.applovin_interstitial) ? t._i(t.settings.applovin_interstitial, null) > -1 : t.settings.applovin_interstitial },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.applovin_interstitial,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "applovin_interstitial", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "applovin_interstitial", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "applovin_interstitial", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "applovin_interstitial" } }, [
                                                                                t._v("\n                              AppLovin interstitial\n                            "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "applovin_interstitial_show" } }, [t._v("AppLovin interstitial Show ( Number of taps before ads to show )")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.applovin_interstitial_show, expression: "settings.applovin_interstitial_show" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "applovin_interstitial_show", type: "text" },
                                                                        domProps: { value: t.settings.applovin_interstitial_show },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "applovin_interstitial_show", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "applovin_native_unitid" } }, [t._v("AppLovin Native Ads Unit ID")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.applovin_native_unitid, expression: "settings.applovin_native_unitid" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "applovin_native_unitid", type: "text" },
                                                                        domProps: { value: t.settings.applovin_native_unitid },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "applovin_native_unitid", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "applovin_reward_unitid" } }, [t._v("AppLovin Reward Unit ID")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.applovin_reward_unitid, expression: "settings.applovin_reward_unitid" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "applovin_reward_unitid", type: "text" },
                                                                        domProps: { value: t.settings.applovin_reward_unitid },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "applovin_reward_unitid", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "applovin_banner_unitid" } }, [t._v("AppLovin Banner Unit ID")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.applovin_banner_unitid, expression: "settings.applovin_banner_unitid" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "applovin_banner_unitid", type: "text" },
                                                                        domProps: { value: t.settings.applovin_banner_unitid },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "applovin_banner_unitid", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "applovin_interstitial_unitid" } }, [t._v("AppLovin Interstitial Unit ID")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.applovin_interstitial_unitid, expression: "settings.applovin_interstitial_unitid" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "applovin_interstitial_unitid", type: "text" },
                                                                        domProps: { value: t.settings.applovin_interstitial_unitid },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "applovin_interstitial_unitid", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        t._m(6),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-check" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.vungle_banner, expression: "settings.vungle_banner" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "vungle_banner", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.settings.vungle_banner) ? t._i(t.settings.vungle_banner, null) > -1 : t.settings.vungle_banner },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.settings.vungle_banner,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked
                                                                                            ? r < 0 && t.$set(t.settings, "vungle_banner", s.concat([null]))
                                                                                            : r > -1 && t.$set(t.settings, "vungle_banner", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.$set(t.settings, "vungle_banner", i);
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "vungle_banner" } }, [t._v("\n                            Vungle Banner\n                          ")]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.vungle_interstitial, expression: "settings.vungle_interstitial" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "vungle_interstitial", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.vungle_interstitial) ? t._i(t.settings.vungle_interstitial, null) > -1 : t.settings.vungle_interstitial },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.vungle_interstitial,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "vungle_interstitial", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "vungle_interstitial", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "vungle_interstitial", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "vungle_interstitial" } }, [
                                                                                t._v("\n                              Vungle interstitial\n                            "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "vungle_appid" } }, [t._v("VUNGLE APP ID")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.vungle_appid, expression: "settings.vungle_appid" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "vungle_appid", type: "text" },
                                                                        domProps: { value: t.settings.vungle_appid },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "vungle_appid", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "vungle_interstitial_show" } }, [t._v("Vungle interstitial Show ( Number of taps before ads to show )")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.vungle_interstitial_show, expression: "settings.vungle_interstitial_show" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "vungle_interstitial_show", type: "text" },
                                                                        domProps: { value: t.settings.vungle_interstitial_show },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "vungle_interstitial_show", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "vungle_interstitial_placement_name" } }, [t._v("Vungle Interstitial Placement Name")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.vungle_interstitial_placement_name, expression: "settings.vungle_interstitial_placement_name" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "vungle_interstitial_placement_name", type: "text" },
                                                                        domProps: { value: t.settings.vungle_interstitial_placement_name },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "vungle_interstitial_placement_name", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "vungle_banner_placement_name" } }, [t._v("Vungle Banner Placement Name")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.vungle_banner_placement_name, expression: "settings.vungle_banner_placement_name" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "vungle_banner_placement_name", type: "text" },
                                                                        domProps: { value: t.settings.vungle_banner_placement_name },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "vungle_banner_placement_name", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "vungle_reward_placement_name" } }, [t._v("Vungle Rewarded Placement Name")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.vungle_reward_placement_name, expression: "settings.vungle_reward_placement_name" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "vungle_reward_placement_name", type: "text" },
                                                                        domProps: { value: t.settings.vungle_reward_placement_name },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "vungle_reward_placement_name", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        t._m(7),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-check" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.appnext_banner, expression: "settings.appnext_banner" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "appnext_banner", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.settings.appnext_banner) ? t._i(t.settings.appnext_banner, null) > -1 : t.settings.appnext_banner },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.settings.appnext_banner,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked
                                                                                            ? r < 0 && t.$set(t.settings, "appnext_banner", s.concat([null]))
                                                                                            : r > -1 && t.$set(t.settings, "appnext_banner", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.$set(t.settings, "appnext_banner", i);
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "appnext_banner" } }, [
                                                                            t._v("\n                            AppNext Banner\n                          "),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.appnext_interstitial, expression: "settings.appnext_interstitial" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "appnext_interstitial", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.appnext_interstitial) ? t._i(t.settings.appnext_interstitial, null) > -1 : t.settings.appnext_interstitial },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.appnext_interstitial,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "appnext_interstitial", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "appnext_interstitial", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "appnext_interstitial", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "appnext_interstitial" } }, [
                                                                                t._v("\n                              AppNext interstitial\n                            "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "appnext_placementid" } }, [t._v("APPNEXT PLACEMENT ID")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.appnext_placementid, expression: "settings.appnext_placementid" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "appnext_placementid", type: "text" },
                                                                        domProps: { value: t.settings.appnext_placementid },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "appnext_placementid", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "appnext_interstitial_show" } }, [t._v("APPNEXT interstitial Show ( Number of taps before ads to show )")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.appnext_interstitial_show, expression: "settings.appnext_interstitial_show" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "appnext_interstitial_show", type: "text" },
                                                                        domProps: { value: t.settings.appnext_interstitial_show },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "appnext_interstitial_show", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        t._m(8),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-check" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.ironsource_banner, expression: "settings.ironsource_banner" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "ironsource_banner", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.settings.ironsource_banner) ? t._i(t.settings.ironsource_banner, null) > -1 : t.settings.ironsource_banner },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.settings.ironsource_banner,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked
                                                                                            ? r < 0 && t.$set(t.settings, "ironsource_banner", s.concat([null]))
                                                                                            : r > -1 && t.$set(t.settings, "ironsource_banner", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.$set(t.settings, "ironsource_banner", i);
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "ironsource_banner" } }, [
                                                                            t._v("\n                            IronSource Banner\n                          "),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.ironsource_interstitial, expression: "settings.ironsource_interstitial" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "ironsource_interstitial", type: "checkbox" },
                                                                                domProps: {
                                                                                    checked: Array.isArray(t.settings.ironsource_interstitial) ? t._i(t.settings.ironsource_interstitial, null) > -1 : t.settings.ironsource_interstitial,
                                                                                },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.ironsource_interstitial,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "ironsource_interstitial", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "ironsource_interstitial", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "ironsource_interstitial", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "ironsource_interstitial" } }, [
                                                                                t._v("\n                              IronSource interstitial\n                            "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "ironsource_app_key" } }, [t._v("IronSource APP KEY ")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.ironsource_app_key, expression: "settings.ironsource_app_key" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "ironsource_app_key", type: "text" },
                                                                        domProps: { value: t.settings.ironsource_app_key },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "ironsource_app_key", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "ironsource_interstitial_placement_name" } }, [t._v("IronSource Interstitial Placement Name")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [
                                                                            { name: "model", rawName: "v-model", value: t.settings.ironsource_interstitial_placement_name, expression: "settings.ironsource_interstitial_placement_name" },
                                                                        ],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "ironsource_interstitial_placement_name", type: "text" },
                                                                        domProps: { value: t.settings.ironsource_interstitial_placement_name },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "ironsource_interstitial_placement_name", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "ironsource_banner_placement_name" } }, [t._v("IronSource Banner Placement Name")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.ironsource_banner_placement_name, expression: "settings.ironsource_banner_placement_name" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "ironsource_banner_placement_name", type: "text" },
                                                                        domProps: { value: t.settings.ironsource_banner_placement_name },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "ironsource_banner_placement_name", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "ironsource_reward_placement_name" } }, [t._v("IronSource Rewarded Placement Name")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.ironsource_reward_placement_name, expression: "settings.ironsource_reward_placement_name" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "ironsource_reward_placement_name", type: "text" },
                                                                        domProps: { value: t.settings.ironsource_reward_placement_name },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "ironsource_reward_placement_name", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "ironsource_interstitial_show" } }, [t._v("IronSource interstitial Show ( Number of taps before ads to show )")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.ironsource_interstitial_show, expression: "settings.ironsource_interstitial_show" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "ironsource_interstitial_show", type: "text" },
                                                                        domProps: { value: t.settings.ironsource_interstitial_show },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "ironsource_interstitial_show", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        t._m(9),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-check" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.ad_banner, expression: "settings.ad_banner" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "ad_banner", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.settings.ad_banner) ? t._i(t.settings.ad_banner, null) > -1 : t.settings.ad_banner },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.settings.ad_banner,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked
                                                                                            ? r < 0 && t.$set(t.settings, "ad_banner", s.concat([null]))
                                                                                            : r > -1 && t.$set(t.settings, "ad_banner", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.$set(t.settings, "ad_banner", i);
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "ad_banner" } }, [t._v("\n                            Admob Banner\n                          ")]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.ad_unit_id_native_enable, expression: "settings.ad_unit_id_native_enable" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "ad_unit_id_native_enable", type: "checkbox" },
                                                                                domProps: {
                                                                                    checked: Array.isArray(t.settings.ad_unit_id_native_enable) ? t._i(t.settings.ad_unit_id_native_enable, null) > -1 : t.settings.ad_unit_id_native_enable,
                                                                                },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.ad_unit_id_native_enable,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "ad_unit_id_native_enable", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "ad_unit_id_native_enable", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "ad_unit_id_native_enable", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "ad_unit_id_native_enable" } }, [
                                                                                t._v("\n                              Admob Native Ads\n                            "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.ad_interstitial, expression: "settings.ad_interstitial" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "ad_interstitial", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.ad_interstitial) ? t._i(t.settings.ad_interstitial, null) > -1 : t.settings.ad_interstitial },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.ad_interstitial,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "ad_interstitial", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "ad_interstitial", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "ad_interstitial", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "ad_interstitial" } }, [
                                                                                t._v("\n                              Admob interstitial\n                            "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "ad_show_interstitial" } }, [t._v("Admob Interstitial Show")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.ad_show_interstitial, expression: "settings.ad_show_interstitial" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "ad_show_interstitial", type: "text" },
                                                                        domProps: { value: t.settings.ad_show_interstitial },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "ad_show_interstitial", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "ad_unit_id_interstitial" } }, [t._v("Admob Interstitial Unit ID")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.ad_unit_id_interstitial, expression: "settings.ad_unit_id_interstitial" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "ad_unit_id_interstitial", type: "text" },
                                                                        domProps: { value: t.settings.ad_unit_id_interstitial },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "ad_unit_id_interstitial", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "ad_unit_id_banner" } }, [t._v("Admob Banner Unit ID")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.ad_unit_id_banner, expression: "settings.ad_unit_id_banner" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "ad_unit_id_banner", type: "text" },
                                                                        domProps: { value: t.settings.ad_unit_id_banner },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "ad_unit_id_banner", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "ad_unit_id_native" } }, [t._v("Admob Native Unit ID")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.ad_unit_id_native, expression: "settings.ad_unit_id_native" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "ad_unit_id_native", type: "text" },
                                                                        domProps: { value: t.settings.ad_unit_id_native },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "ad_unit_id_native", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "ad_unit_id_rewarded" } }, [t._v("Admob Rewarded Unit Id")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.ad_unit_id_rewarded, expression: "settings.ad_unit_id_rewarded" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "ad_unit_id_rewarded", type: "text" },
                                                                        domProps: { value: t.settings.ad_unit_id_rewarded },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "ad_unit_id_rewarded", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        t._m(10),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-check" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.ad_face_audience_interstitial, expression: "settings.ad_face_audience_interstitial" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "ad_face_audience_interstitial", type: "checkbox" },
                                                                            domProps: {
                                                                                checked: Array.isArray(t.settings.ad_face_audience_interstitial)
                                                                                    ? t._i(t.settings.ad_face_audience_interstitial, null) > -1
                                                                                    : t.settings.ad_face_audience_interstitial,
                                                                            },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.settings.ad_face_audience_interstitial,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked
                                                                                            ? r < 0 && t.$set(t.settings, "ad_face_audience_interstitial", s.concat([null]))
                                                                                            : r > -1 && t.$set(t.settings, "ad_face_audience_interstitial", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.$set(t.settings, "ad_face_audience_interstitial", i);
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "ad_face_audience_interstitial" } }, [
                                                                            t._v("\n                            Facebook Audience Interstitial\n                          "),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-check" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.ad_face_audience_banner, expression: "settings.ad_face_audience_banner" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "ad_face_audience_banner", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.settings.ad_face_audience_banner) ? t._i(t.settings.ad_face_audience_banner, null) > -1 : t.settings.ad_face_audience_banner },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.settings.ad_face_audience_banner,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked
                                                                                            ? r < 0 && t.$set(t.settings, "ad_face_audience_banner", s.concat([null]))
                                                                                            : r > -1 && t.$set(t.settings, "ad_face_audience_banner", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.$set(t.settings, "ad_face_audience_banner", i);
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "ad_face_audience_banner" } }, [
                                                                            t._v("\n                            Facebook Audience Banner\n                          "),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-check" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.ad_face_audience_native, expression: "settings.ad_face_audience_native" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "ad_face_audience_native", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.settings.ad_face_audience_native) ? t._i(t.settings.ad_face_audience_native, null) > -1 : t.settings.ad_face_audience_native },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.settings.ad_face_audience_native,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked
                                                                                            ? r < 0 && t.$set(t.settings, "ad_face_audience_native", s.concat([null]))
                                                                                            : r > -1 && t.$set(t.settings, "ad_face_audience_native", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.$set(t.settings, "ad_face_audience_native", i);
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "ad_face_audience_native" } }, [
                                                                            t._v("\n                            Facebook Audience Native Ads\n                          "),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "facebook_show_interstitial" } }, [t._v("Facebook Audience Interstitial Show")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.facebook_show_interstitial, expression: "settings.facebook_show_interstitial" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "facebook_show_interstitial", type: "text" },
                                                                        domProps: { value: t.settings.facebook_show_interstitial },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "facebook_show_interstitial", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "ad_unit_id_facebook_interstitial_audience" } }, [t._v("Facebook Audience Interstitial Unit Id")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [
                                                                            {
                                                                                name: "model",
                                                                                rawName: "v-model",
                                                                                value: t.settings.ad_unit_id_facebook_interstitial_audience,
                                                                                expression: "\n                            settings.ad_unit_id_facebook_interstitial_audience\n                          ",
                                                                            },
                                                                        ],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "ad_unit_id_facebook_interstitial_audience", type: "text" },
                                                                        domProps: { value: t.settings.ad_unit_id_facebook_interstitial_audience },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "ad_unit_id_facebook_interstitial_audience", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "ad_unit_id_facebook_banner_audience" } }, [t._v("Facebook Audience Banner Unit Id")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.ad_unit_id_facebook_banner_audience, expression: "settings.ad_unit_id_facebook_banner_audience" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "ad_unit_id_facebook_banner_audience", type: "text" },
                                                                        domProps: { value: t.settings.ad_unit_id_facebook_banner_audience },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "ad_unit_id_facebook_banner_audience", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "ad_unit_id_facebook_native_audience" } }, [t._v("Facebook Audience Native Unit Id")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.ad_unit_id_facebook_native_audience, expression: "settings.ad_unit_id_facebook_native_audience" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "ad_unit_id_facebook_native_audience", type: "text" },
                                                                        domProps: { value: t.settings.ad_unit_id_facebook_native_audience },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "ad_unit_id_facebook_native_audience", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        t._m(11),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-check" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.unityads_banner, expression: "settings.unityads_banner" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "unityads_banner", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.settings.unityads_banner) ? t._i(t.settings.unityads_banner, null) > -1 : t.settings.unityads_banner },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.settings.unityads_banner,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked
                                                                                            ? r < 0 && t.$set(t.settings, "unityads_banner", s.concat([null]))
                                                                                            : r > -1 && t.$set(t.settings, "unityads_banner", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.$set(t.settings, "unityads_banner", i);
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "unityads_banner" } }, [
                                                                            t._v("\n                            UnityAds Banner\n                          "),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-check" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.unityads_interstitial, expression: "settings.unityads_interstitial" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "unityads_interstitial", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.settings.unityads_interstitial) ? t._i(t.settings.unityads_interstitial, null) > -1 : t.settings.unityads_interstitial },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.settings.unityads_interstitial,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked
                                                                                            ? r < 0 && t.$set(t.settings, "unityads_interstitial", s.concat([null]))
                                                                                            : r > -1 && t.$set(t.settings, "unityads_interstitial", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.$set(t.settings, "unityads_interstitial", i);
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "unityads_interstitial" } }, [
                                                                            t._v("\n                            UnityAds Interstitial\n                          "),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "unity_game_id" } }, [t._v("Unity Ads Game Id")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.unity_game_id, expression: "settings.unity_game_id" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "unity_game_id", type: "text" },
                                                                        domProps: { value: t.settings.unity_game_id },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "unity_game_id", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "unity_banner_placement_id" } }, [t._v("Unity Ads Banner Placement ID")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.unity_banner_placement_id, expression: "settings.unity_banner_placement_id" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "unity_banner_placement_id", type: "text" },
                                                                        domProps: { value: t.settings.unity_banner_placement_id },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "unity_banner_placement_id", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "unity_interstitial_placement_id" } }, [t._v("Unity Ads Interstitial Placement ID")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.unity_interstitial_placement_id, expression: "settings.unity_interstitial_placement_id" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "unity_interstitial_placement_id", type: "text" },
                                                                        domProps: { value: t.settings.unity_interstitial_placement_id },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "unity_interstitial_placement_id", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "unity_reward_placement_id" } }, [t._v("Unity Ads Reward Placement ID")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.unity_reward_placement_id, expression: "settings.unity_reward_placement_id" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "unity_reward_placement_id", type: "text" },
                                                                        domProps: { value: t.settings.unity_reward_placement_id },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "unity_reward_placement_id", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "unity_show" } }, [t._v("Unity Ads Show ( Number of taps before ads to show )")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.unity_show, expression: "settings.unity_show" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "unity_show", type: "text" },
                                                                        domProps: { value: t.settings.unity_show },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "unity_show", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        t._m(12),
                                                        t._v(" "),
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.appodeal_interstitial, expression: "settings.appodeal_interstitial" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "appodeal_interstitial", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.appodeal_interstitial) ? t._i(t.settings.appodeal_interstitial, null) > -1 : t.settings.appodeal_interstitial },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.appodeal_interstitial,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "appodeal_interstitial", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "appodeal_interstitial", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "appodeal_interstitial", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "appodeal_interstitial" } }, [
                                                                                t._v("\n                              Appodeal interstitial\n                            "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.appodeal_banner, expression: "settings.appodeal_banner" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "appodeal_banner", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.appodeal_banner) ? t._i(t.settings.appodeal_banner, null) > -1 : t.settings.appodeal_banner },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.appodeal_banner,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "appodeal_banner", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "appodeal_banner", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "appodeal_banner", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "appodeal_banner" } }, [
                                                                                t._v("\n                              Appodeal Banner\n                            "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "appodeal_show_interstitial" } }, [t._v("Appodeal Interstitial Show")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.appodeal_show_interstitial, expression: "settings.appodeal_show_interstitial" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "appodeal_show_interstitial", type: "text" },
                                                                        domProps: { value: t.settings.appodeal_show_interstitial },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "appodeal_show_interstitial", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "ad_unit_id__appodeal_rewarded" } }, [t._v("AppoDeal Application Key")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.ad_unit_id__appodeal_rewarded, expression: "settings.ad_unit_id__appodeal_rewarded" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "ad_unit_id__appodeal_rewarded", type: "text" },
                                                                        domProps: { value: t.settings.ad_unit_id__appodeal_rewarded },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "ad_unit_id__appodeal_rewarded", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        t._m(13),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-check" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.startapp_banner, expression: "settings.startapp_banner" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "startapp_banner", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.settings.startapp_banner) ? t._i(t.settings.startapp_banner, null) > -1 : t.settings.startapp_banner },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.settings.startapp_banner,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked
                                                                                            ? r < 0 && t.$set(t.settings, "startapp_banner", s.concat([null]))
                                                                                            : r > -1 && t.$set(t.settings, "startapp_banner", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.$set(t.settings, "startapp_banner", i);
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "startapp_banner" } }, [
                                                                            t._v("\n                            StartApp Banner\n                          "),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-check" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.startapp_interstitial, expression: "settings.startapp_interstitial" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "startapp_interstitial", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.settings.startapp_interstitial) ? t._i(t.settings.startapp_interstitial, null) > -1 : t.settings.startapp_interstitial },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.settings.startapp_interstitial,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked
                                                                                            ? r < 0 && t.$set(t.settings, "startapp_interstitial", s.concat([null]))
                                                                                            : r > -1 && t.$set(t.settings, "startapp_interstitial", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.$set(t.settings, "startapp_interstitial", i);
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "startapp_interstitial" } }, [
                                                                            t._v("\n                            StartApp nterstitial\n                          "),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "startapp_id" } }, [t._v("StartApp ID")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.startapp_id, expression: "settings.startapp_id" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "startapp_id", type: "text" },
                                                                        domProps: { value: t.settings.startapp_id },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "startapp_id", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                    ]),
                                                    t._v(" "),
                                                    s("div", { staticClass: "tab-pane fade", attrs: { "aria-labelledby": "code-tab", id: "code", role: "tabpanel" } }, [
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "row" }, [
                                                                s("div", { staticClass: "col-md-8" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "purchase_key" } }, [t._v("Purchase Code")]),
                                                                        t._v(" "),
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.purchase_key, expression: "settings.purchase_key" }],
                                                                            staticClass: "form-control",
                                                                            attrs: { id: "purchase_key", type: "text" },
                                                                            domProps: { value: t.settings.purchase_key },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || t.$set(t.settings, "purchase_key", e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                    ]),
                                                    t._v(" "),
                                                    s("div", { staticClass: "tab-pane fade", attrs: { "aria-labelledby": "laravel-tab", id: "laravel", role: "tabpanel" } }, [
                                                        t._m(14),
                                                        t._v(" "),
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "row" }, [
                                                                s("div", { staticClass: "col-md-8" }, [
                                                                    s("div", { staticClass: "input-group" }, [
                                                                        s("div", { staticClass: "input-group-btn" }, [
                                                                            s(
                                                                                "button",
                                                                                {
                                                                                    staticClass: "btn btn-primary ml-2",
                                                                                    attrs: { type: "submit" },
                                                                                    on: {
                                                                                        click: function (e) {
                                                                                            return e.preventDefault(), t.clearCache();
                                                                                        },
                                                                                    },
                                                                                },
                                                                                [t._v("Clear Cache")]
                                                                            ),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        t._m(15),
                                                        t._v(" "),
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "row" }, [
                                                                s("div", { staticClass: "col-md-8" }, [
                                                                    s("div", { staticClass: "input-group" }, [
                                                                        s("div", { staticClass: "input-group-btn" }, [
                                                                            s(
                                                                                "button",
                                                                                {
                                                                                    staticClass: "btn btn-primary ml-2",
                                                                                    attrs: { type: "submit" },
                                                                                    on: {
                                                                                        click: function (e) {
                                                                                            return e.preventDefault(), t.clearCacheApi();
                                                                                        },
                                                                                    },
                                                                                },
                                                                                [t._v("Clear Cache")]
                                                                            ),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        t._m(16),
                                                    ]),
                                                    t._v(" "),
                                                    s("div", { staticClass: "tab-pane fade", attrs: { "aria-labelledby": "tmdb-tab", id: "tmdb", role: "tabpanel" } }, [
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "row" }, [
                                                                s("div", { staticClass: "col-md-8" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "tmdb_api_key" } }, [t._v("Api key")]),
                                                                        t._v(" "),
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.tmdb_api_key, expression: "settings.tmdb_api_key" }],
                                                                            staticClass: "form-control",
                                                                            attrs: { id: "tmdb_api_key", type: "text" },
                                                                            domProps: { value: t.settings.tmdb_api_key },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || t.$set(t.settings, "tmdb_api_key", e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s(
                                                                        "div",
                                                                        { staticClass: "form-group" },
                                                                        [
                                                                            s("label", { attrs: { for: "lang" } }, [t._v("Language")]),
                                                                            t._v(" "),
                                                                            null == t.settings.tmdb_api_key
                                                                                ? s("p", { staticClass: "text-primary" }, [t._v("\n                          You should add tmdb key to able to select langs\n                        ")])
                                                                                : t._e(),
                                                                            t._v(" "),
                                                                            s("multiselect", {
                                                                                attrs: { options: t.langs, label: "english_name", "track-by": "iso_639_1" },
                                                                                model: {
                                                                                    value: t.settings.tmdb_lang,
                                                                                    callback: function (e) {
                                                                                        t.$set(t.settings, "tmdb_lang", e);
                                                                                    },
                                                                                    expression: "settings.tmdb_lang",
                                                                                },
                                                                            }),
                                                                        ],
                                                                        1
                                                                    ),
                                                                ]),
                                                            ]),
                                                        ]),
                                                    ]),
                                                    t._v(" "),
                                                    s(
                                                        "div",
                                                        { staticClass: "tab-pane fade", attrs: { "aria-labelledby": "appsettings-tab", id: "appsettings", role: "tabpanel" } },
                                                        [
                                                            t._m(17),
                                                            t._v(" "),
                                                            t._m(18),
                                                            t._v(" "),
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.enable_player_inter, expression: "settings.enable_player_inter" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "enable_player_inter", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.enable_player_inter) ? t._i(t.settings.enable_player_inter, null) > -1 : t.settings.enable_player_inter },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.enable_player_inter,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "enable_player_inter", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "enable_player_inter", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "enable_player_inter", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "enable_player_inter" } }, [
                                                                                t._v("Load Interstitial Ads on Player Exit ? ( MainPlayer Only )\n                            "),
                                                                            ]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "card-description" }, [
                                                                                t._v(
                                                                                    "\n                              if this option is activated an Interstitial ads  will be loaded whe the user close the main player .\n                            "
                                                                                ),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.enable_comments, expression: "settings.enable_comments" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "enable_comments", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.enable_comments) ? t._i(t.settings.enable_comments, null) > -1 : t.settings.enable_comments },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.enable_comments,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "enable_comments", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "enable_comments", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "enable_comments", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "enable_comments" } }, [t._v("Enable Comments\n                            ")]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "settings" }, [
                                                                s("div", { staticClass: "col-md-6" }, [
                                                                    s(
                                                                        "div",
                                                                        { staticClass: "form-group" },
                                                                        [
                                                                            s("label", { attrs: { for: "lang" } }, [t._v("Substitles Options")]),
                                                                            t._v(" "),
                                                                            s("multiselect", {
                                                                                attrs: { options: t.options_substitles },
                                                                                model: {
                                                                                    value: t.settings.default_substitle_option,
                                                                                    callback: function (e) {
                                                                                        t.$set(t.settings, "default_substitle_option", e);
                                                                                    },
                                                                                    expression: "settings.default_substitle_option",
                                                                                },
                                                                            }),
                                                                        ],
                                                                        1
                                                                    ),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.autosubstitles, expression: "settings.autosubstitles" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "autosubstitles", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.autosubstitles) ? t._i(t.settings.autosubstitles, null) > -1 : t.settings.autosubstitles },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.autosubstitles,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "autosubstitles", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "autosubstitles", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "autosubstitles", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "autosubstitles" } }, [t._v("Enable Auto Start Substitles\n                            ")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "card-description" }, [
                                                                                t._v(
                                                                                    "\n                              if this option is activated substitle will start automaticly with the stream depend on the options your selected above !\n                            "
                                                                                ),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.force_password_access, expression: "settings.force_password_access" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "force_password_access", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.force_password_access) ? t._i(t.settings.force_password_access, null) > -1 : t.settings.force_password_access },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.force_password_access,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "force_password_access", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "force_password_access", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "force_password_access", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "force_password_access" } }, [t._v("Force Password To Access to the Application ?")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v("\n                          if this option is user need to enter the correct password before accessing to the main login page\n                        "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "settings" }, [
                                                                s("div", { staticClass: "row" }, [
                                                                    s("div", { staticClass: "col-md-4" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("label", { attrs: { for: "app_password_access" } }, [t._v("App Password")]),
                                                                            t._v(" "),
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.password, expression: "password" }],
                                                                                staticClass: "form-control",
                                                                                attrs: { id: "app_password_access", type: "text" },
                                                                                domProps: { value: t.password },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || (t.password = e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "settings" }, [
                                                                s("div", { staticClass: "row" }, [
                                                                    s(
                                                                        "button",
                                                                        {
                                                                            staticClass: "btn btn-primary mr-2",
                                                                            attrs: { disabled: t.password.length < 6, "aria-pressed": "true", type: "button" },
                                                                            on: {
                                                                                click: function (e) {
                                                                                    return e.preventDefault(), t.changeAppPassword();
                                                                                },
                                                                            },
                                                                        },
                                                                        [t._v("Update App Password Only")]
                                                                    ),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "settings" }, [
                                                                s("div", { staticClass: "row" }, [
                                                                    s("div", { staticClass: "col-md-6" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("div", { staticClass: "form-check" }, [
                                                                                s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                    s("input", {
                                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.force_inappupdate, expression: "settings.force_inappupdate" }],
                                                                                        staticClass: "custom-control-input",
                                                                                        attrs: { id: "force_inappupdate", type: "checkbox" },
                                                                                        domProps: { checked: Array.isArray(t.settings.force_inappupdate) ? t._i(t.settings.force_inappupdate, null) > -1 : t.settings.force_inappupdate },
                                                                                        on: {
                                                                                            change: function (e) {
                                                                                                var s = t.settings.force_inappupdate,
                                                                                                    a = e.target,
                                                                                                    i = !!a.checked;
                                                                                                if (Array.isArray(s)) {
                                                                                                    var r = t._i(s, null);
                                                                                                    a.checked
                                                                                                        ? r < 0 && t.$set(t.settings, "force_inappupdate", s.concat([null]))
                                                                                                        : r > -1 && t.$set(t.settings, "force_inappupdate", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                                } else t.$set(t.settings, "force_inappupdate", i);
                                                                                            },
                                                                                        },
                                                                                    }),
                                                                                    t._v(" "),
                                                                                    s("label", { staticClass: "custom-control-label", attrs: { for: "force_inappupdate" } }, [t._v("Force InAppUpdate ?")]),
                                                                                    t._v(" "),
                                                                                    s("p", { staticClass: "text-primary" }, [
                                                                                        t._v(
                                                                                            "\n                          if this option is selected users can download the update inside the app without external link launcher.\n                        "
                                                                                        ),
                                                                                    ]),
                                                                                ]),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.force_update, expression: "settings.force_update" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "force_update", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.force_update) ? t._i(t.settings.force_update, null) > -1 : t.settings.force_update },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.force_update,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "force_update", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "force_update", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "force_update", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "force_update" } }, [t._v("Force Update ? ")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v("\n                          if this option will force users to update the app or they cannot use it !\n                        "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.flag_secure, expression: "settings.flag_secure" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "flag_secure", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.flag_secure) ? t._i(t.settings.flag_secure, null) > -1 : t.settings.flag_secure },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.flag_secure,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "flag_secure", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "flag_secure", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "flag_secure", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "flag_secure" } }, [t._v("Force FLAG_SECURE ?")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v("\n                          if this option is selected will prevent the OS to take a screenshot of the app.\n                        "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.enable_webview, expression: "settings.enable_webview" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "enable_webview", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.enable_webview) ? t._i(t.settings.enable_webview, null) > -1 : t.settings.enable_webview },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.enable_webview,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "enable_webview", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "enable_webview", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "enable_webview", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "enable_webview" } }, [t._v("Force Rewards Ads as Webview Ads ?")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v(
                                                                                    "\n                          if this option is selected Default Rewarded Network will be replaced with a webview page that will display your own ads\n\n                        link.\n                        "
                                                                                ),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "settings" }, [
                                                                s("div", { staticClass: "row" }, [
                                                                    s("div", { staticClass: "col-md-4" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("label", { attrs: { for: "webview_link" } }, [t._v("Rewarded Webview Ads Link")]),
                                                                            t._v(" "),
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.webview_link, expression: "settings.webview_link" }],
                                                                                staticClass: "form-control",
                                                                                attrs: { id: "webview_link", type: "text" },
                                                                                domProps: { value: t.settings.webview_link },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || t.$set(t.settings, "webview_link", e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            t._m(19),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.networks, expression: "settings.networks" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "networks", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.networks) ? t._i(t.settings.networks, null) > -1 : t.settings.networks },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.networks,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "networks", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "networks", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "networks", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "networks" } }, [t._v("Enable Networks ?")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v("\n                          if this option is selected Networks ( HomePage and Tab) will be disabled.\n                        "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "row" }, [
                                                                s("div", { staticClass: "col-md-4" }, [
                                                                    s(
                                                                        "div",
                                                                        { staticClass: "form-group" },
                                                                        [
                                                                            s("label", { attrs: { for: "lang" } }, [t._v("Default Layout for Networks")]),
                                                                            t._v(" "),
                                                                            s("multiselect", {
                                                                                attrs: { options: t.networks_layouts },
                                                                                model: {
                                                                                    value: t.settings.default_layout_networks,
                                                                                    callback: function (e) {
                                                                                        t.$set(t.settings, "default_layout_networks", e);
                                                                                    },
                                                                                    expression: "settings.default_layout_networks",
                                                                                },
                                                                            }),
                                                                        ],
                                                                        1
                                                                    ),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s(
                                                                "b-container",
                                                                { attrs: { fluid: "" } },
                                                                [
                                                                    s(
                                                                        "b-row",
                                                                        [
                                                                            s("b-col", [s("b-img", { attrs: { thumbnail: "", fluid: "", src: t.networks_layouts_options1, alt: "Image 1" } })], 1),
                                                                            t._v(" "),
                                                                            s("b-col", [s("b-img", { attrs: { thumbnail: "", fluid: "", src: t.networks_layouts_options2, alt: "Image 2" } })], 1),
                                                                        ],
                                                                        1
                                                                    ),
                                                                ],
                                                                1
                                                            ),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.suggest_auth, expression: "settings.suggest_auth" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "suggest_auth", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.suggest_auth) ? t._i(t.settings.suggest_auth, null) > -1 : t.settings.suggest_auth },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.suggest_auth,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "suggest_auth", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "suggest_auth", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "suggest_auth", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "suggest_auth" } }, [t._v("Force Suggestions only to Logged Users ?")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v("\n                          if this option only authenticated users can send a suggestion.\n                        "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.livetv_multi_servers, expression: "settings.livetv_multi_servers" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "livetv_multi_servers", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.livetv_multi_servers) ? t._i(t.settings.livetv_multi_servers, null) > -1 : t.settings.livetv_multi_servers },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.livetv_multi_servers,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "livetv_multi_servers", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "livetv_multi_servers", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "livetv_multi_servers", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "livetv_multi_servers" } }, [t._v("Enable Streaming Multi Servers ?")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v("\n                          if this option is selected live tv will have same system as movies to add multi servers.\n                        "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.notification_style, expression: "settings.notification_style" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "notification_style", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.notification_style) ? t._i(t.settings.notification_style, null) > -1 : t.settings.notification_style },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.notification_style,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "notification_style", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "notification_style", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "notification_style", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "notification_style" } }, [t._v("Enable Direct Enter Mode on Notification Click ?")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v(
                                                                                    "\n                          if this option is selected when the user click on the notification he will enter directly to the movie or episode stream directly.\n                        "
                                                                                ),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.notification_separated, expression: "settings.notification_separated" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "notification_separated", type: "checkbox" },
                                                                                domProps: {
                                                                                    checked: Array.isArray(t.settings.notification_separated) ? t._i(t.settings.notification_separated, null) > -1 : t.settings.notification_separated,
                                                                                },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.notification_separated,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "notification_separated", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "notification_separated", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "notification_separated", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "notification_separated" } }, [t._v("Send Notifications Separated ?")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v(
                                                                                    "\n                          if this option is selected if you sent a Notification the new one will not replace the old one if exist in the topbar\n                        "
                                                                                ),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.root_detection, expression: "settings.root_detection" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "root_detection", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.root_detection) ? t._i(t.settings.root_detection, null) > -1 : t.settings.root_detection },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.root_detection,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "root_detection", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "root_detection", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "root_detection", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "root_detection" } }, [t._v("Force Root Detection ? ")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v("\n                          if this option is selected users with rooted phones cannot use the app.\n                        "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.vpn, expression: "settings.vpn" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "vpn", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.vpn) ? t._i(t.settings.vpn, null) > -1 : t.settings.vpn },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.vpn,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked ? r < 0 && t.$set(t.settings, "vpn", s.concat([null])) : r > -1 && t.$set(t.settings, "vpn", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "vpn", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "vpn" } }, [t._v("Force Vpn Detection ? ")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v("\n                          if this option is selected app will check the vpn connexion!\n                        "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.separate_download, expression: "settings.separate_download" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "separate_download", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.separate_download) ? t._i(t.settings.separate_download, null) > -1 : t.settings.separate_download },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.separate_download,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "separate_download", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "separate_download", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "separate_download", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "separate_download" } }, [t._v("Separate Downloads from Stream links ?")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v("\n                          if this option is selected your downloads links will be separated from the main streams links\n                        "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.enable_download, expression: "settings.enable_download" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "enable_download", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.enable_download) ? t._i(t.settings.enable_download, null) > -1 : t.settings.enable_download },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.enable_download,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "enable_download", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "enable_download", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "enable_download", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "enable_download" } }, [t._v("Enable Downloads ?")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v("\n                          if this option is selected will enable download inside the app.\n                        "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "settings" }, [
                                                                s("div", { staticClass: "col-md-4" }, [
                                                                    s(
                                                                        "div",
                                                                        { staticClass: "form-group" },
                                                                        [
                                                                            s("label", { attrs: { for: "lang" } }, [t._v("Casts Options")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [t._v("\n                          Select how to use the actors inside the app .\n                        ")]),
                                                                            t._v(" "),
                                                                            s("multiselect", {
                                                                                attrs: { options: t.options_cast },
                                                                                model: {
                                                                                    value: t.settings.default_cast_option,
                                                                                    callback: function (e) {
                                                                                        t.$set(t.settings, "default_cast_option", e);
                                                                                    },
                                                                                    expression: "settings.default_cast_option",
                                                                                },
                                                                            }),
                                                                        ],
                                                                        1
                                                                    ),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "settings" }, [
                                                                s("div", { staticClass: "col-md-4" }, [
                                                                    s(
                                                                        "div",
                                                                        { staticClass: "form-group" },
                                                                        [
                                                                            s("label", { attrs: { for: "lang" } }, [t._v("Trailer Options")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [t._v("\n                          Select your default source for trailers !\n                        ")]),
                                                                            t._v(" "),
                                                                            s("multiselect", {
                                                                                attrs: { options: t.options_trailers },
                                                                                model: {
                                                                                    value: t.settings.default_trailer_default,
                                                                                    callback: function (e) {
                                                                                        t.$set(t.settings, "default_trailer_default", e);
                                                                                    },
                                                                                    expression: "settings.default_trailer_default",
                                                                                },
                                                                            }),
                                                                        ],
                                                                        1
                                                                    ),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "settings" }, [
                                                                s("div", { staticClass: "row" }, [
                                                                    s("div", { staticClass: "col-md-4" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("label", { attrs: { for: "hxfile_api_key" } }, [t._v("Hxfile Api Key")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [t._v("\n                          Enter Hxfile api key\n                        ")]),
                                                                            t._v(" "),
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.hxfile_api_key, expression: "settings.hxfile_api_key" }],
                                                                                staticClass: "form-control",
                                                                                attrs: { id: "hxfile_api_key", type: "text" },
                                                                                domProps: { value: t.settings.hxfile_api_key },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || t.$set(t.settings, "hxfile_api_key", e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.favoriteonline, expression: "settings.favoriteonline" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "favoriteonline", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.favoriteonline) ? t._i(t.settings.favoriteonline, null) > -1 : t.settings.favoriteonline },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.favoriteonline,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "favoriteonline", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "favoriteonline", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "favoriteonline", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "favoriteonline" } }, [t._v("Enable Save Favorite as online feature ?")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v("\n                          if this option is selected users can add and save movies online.\n                        "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.email_verify, expression: "settings.email_verify" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "email_verify", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.email_verify) ? t._i(t.settings.email_verify, null) > -1 : t.settings.email_verify },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.email_verify,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "email_verify", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "email_verify", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "email_verify", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "email_verify" } }, [t._v("Force Email Verification ?")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v(
                                                                                    "\n                          if this option is selected users require to verify their email addresses before using the application.\n                        "
                                                                                ),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.force_login, expression: "settings.force_login" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "force_login", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.force_login) ? t._i(t.settings.force_login, null) > -1 : t.settings.force_login },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.force_login,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "force_login", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "force_login", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "force_login", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "force_login" } }, [t._v("Force Login ?")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v("\n                          if this option is selected users must login to access to the home page !\n                        "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.enable_banner_bottom, expression: "settings.enable_banner_bottom" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "enable_banner_bottom", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.enable_banner_bottom) ? t._i(t.settings.enable_banner_bottom, null) > -1 : t.settings.enable_banner_bottom },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.enable_banner_bottom,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "enable_banner_bottom", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "enable_banner_bottom", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "enable_banner_bottom", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "enable_banner_bottom" } }, [t._v("Enable Banner Ads on HomePage ( Bottom Position ) ?")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v(
                                                                                    "\n                          if this option is selected you will have banner in the bottom position on the home page above the bottom Navigation Menu\n                          note : you can only have one banner wich mean the active banner from ads tab will be on the bottom !\n                        "
                                                                                ),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "settings" }, [
                                                                s("div", { staticClass: "row" }, [
                                                                    s("div", { staticClass: "col-md-4" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("label", { attrs: { for: "user_agent" } }, [t._v("Default User Agent ( GerarFilmsPlayer , vlc , MxPlayer and Embed )")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [t._v("\n                          Enter your prefered UserAgent to use it inside the players\n                        ")]),
                                                                            t._v(" "),
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.user_agent, expression: "settings.user_agent" }],
                                                                                staticClass: "form-control",
                                                                                attrs: { id: "app_url_android", type: "text" },
                                                                                domProps: { value: t.settings.user_agent },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || t.$set(t.settings, "user_agent", e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "col-md-6" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.resume_offline, expression: "settings.resume_offline" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "resume_offline", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.resume_offline) ? t._i(t.settings.resume_offline, null) > -1 : t.settings.resume_offline },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.resume_offline,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "resume_offline", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "resume_offline", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "resume_offline", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "resume_offline" } }, [t._v("Save Countinue watching info offline ? ( Recommended) ")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v(
                                                                                    "\n                          if this option is selected your resume movies info will be used from the user phone to save your server ressources.\n                        "
                                                                                ),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "col-md-6" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.enable_vlc, expression: "settings.enable_vlc" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "enable_vlc", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.enable_vlc) ? t._i(t.settings.enable_vlc, null) > -1 : t.settings.enable_vlc },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.enable_vlc,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "enable_vlc", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "enable_vlc", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "enable_vlc", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "enable_vlc" } }, [t._v("Enable Vlc and MXPlayer as Launch Options ?")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v("\n                          if this option is selected the user will be able to select the player video to play the movie .\n                        "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "col-md-6" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.enable_pinned, expression: "settings.enable_pinned" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "enable_pinned", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.enable_pinned) ? t._i(t.settings.enable_pinned, null) > -1 : t.settings.enable_pinned },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.enable_pinned,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "enable_pinned", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "enable_pinned", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "enable_pinned", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "enable_pinned" } }, [t._v("Enable Pinned (HomePage)")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v(
                                                                                    "\n                          if this option is selected the homepage will display a list of movies or series or animes that has a pinned checkbox activated .\n                        "
                                                                                ),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "col-md-6" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.enable_upcoming, expression: "settings.enable_upcoming" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "enable_upcoming", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.enable_upcoming) ? t._i(t.settings.enable_upcoming, null) > -1 : t.settings.enable_upcoming },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.enable_upcoming,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "enable_upcoming", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "enable_upcoming", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "enable_upcoming", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "enable_upcoming" } }, [t._v("Enable Upcoming (HomePage)")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v("\n                          if this option is selected the homepage will display a list of Upcoming movies and series.\n                        "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "settings" }, [
                                                                s("div", { staticClass: "row" }, [
                                                                    s("div", { staticClass: "col-md-4" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("label", { attrs: { for: "splash_image" } }, [t._v("Splash Image")]),
                                                                            t._v(" "),
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.splash_image, expression: "settings.splash_image" }],
                                                                                staticClass: "form-control",
                                                                                attrs: { id: "splash_image", type: "text" },
                                                                                domProps: { value: t.settings.splash_image },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || t.$set(t.settings, "splash_image", e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "row" }, [
                                                                    s("div", { staticClass: "col-md-4" }, [
                                                                        t.settings.splash_image ? s("img", { staticClass: "splash", attrs: { src: t.settings.splash_image, "data-loaded": "true", height: "300", width: "169" } }) : t._e(),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "row" }, [
                                                                    s("div", { staticClass: "col-md-4" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("label", [t._v("Splash Image Upload ")]),
                                                                            t._v(" "),
                                                                            s("input", { staticClass: "file-upload-default" }),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "input-group col-xs-12" }, [
                                                                                s("input", {
                                                                                    staticClass: "form-control file-upload-info",
                                                                                    attrs: { id: "poster", placeholder: "Upload Image", type: "file" },
                                                                                    on: { change: t.storePosterSplash },
                                                                                }),
                                                                                t._v(" "),
                                                                                t._m(20),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s("div", { staticClass: "form-check" }, [
                                                                            s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.settings.mantenance_mode, expression: "settings.mantenance_mode" }],
                                                                                    staticClass: "custom-control-input",
                                                                                    attrs: { id: "mantenance_mode", type: "checkbox" },
                                                                                    domProps: { checked: Array.isArray(t.settings.mantenance_mode) ? t._i(t.settings.mantenance_mode, null) > -1 : t.settings.mantenance_mode },
                                                                                    on: {
                                                                                        change: function (e) {
                                                                                            var s = t.settings.mantenance_mode,
                                                                                                a = e.target,
                                                                                                i = !!a.checked;
                                                                                            if (Array.isArray(s)) {
                                                                                                var r = t._i(s, null);
                                                                                                a.checked
                                                                                                    ? r < 0 && t.$set(t.settings, "mantenance_mode", s.concat([null]))
                                                                                                    : r > -1 && t.$set(t.settings, "mantenance_mode", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                            } else t.$set(t.settings, "mantenance_mode", i);
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("label", { staticClass: "custom-control-label", attrs: { for: "mantenance_mode" } }, [t._v("Enable Mantenance Mode ?")]),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-12" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "releaseNotes" } }, [t._v("Mantenance Message")]),
                                                                        t._v(" "),
                                                                        s("textarea", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.mantenance_mode_message, expression: "settings.mantenance_mode_message" }],
                                                                            staticClass: "form-control pb-3",
                                                                            attrs: { id: "releaseNotes", rows: "8", type: "text" },
                                                                            domProps: { value: t.settings.mantenance_mode_message },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || t.$set(t.settings, "mantenance_mode_message", e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "settings" }, [
                                                                    s("div", { staticClass: "col-md-6" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [
                                                                                s("label", { attrs: { for: "lang" } }, [t._v("Downloads Options")]),
                                                                                t._v(" "),
                                                                                s("multiselect", {
                                                                                    attrs: { options: t.optionsDownloads },
                                                                                    model: {
                                                                                        value: t.settings.default_downloads_options,
                                                                                        callback: function (e) {
                                                                                            t.$set(t.settings, "default_downloads_options", e);
                                                                                        },
                                                                                        expression: "settings.default_downloads_options",
                                                                                    },
                                                                                }),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s("div", { staticClass: "form-check" }, [
                                                                            s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.settings.allow_adm, expression: "settings.allow_adm" }],
                                                                                    staticClass: "custom-control-input",
                                                                                    attrs: { id: "allow_adm", type: "checkbox" },
                                                                                    domProps: { checked: Array.isArray(t.settings.allow_adm) ? t._i(t.settings.allow_adm, null) > -1 : t.settings.allow_adm },
                                                                                    on: {
                                                                                        change: function (e) {
                                                                                            var s = t.settings.allow_adm,
                                                                                                a = e.target,
                                                                                                i = !!a.checked;
                                                                                            if (Array.isArray(s)) {
                                                                                                var r = t._i(s, null);
                                                                                                a.checked
                                                                                                    ? r < 0 && t.$set(t.settings, "allow_adm", s.concat([null]))
                                                                                                    : r > -1 && t.$set(t.settings, "allow_adm", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                            } else t.$set(t.settings, "allow_adm", i);
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("label", { staticClass: "custom-control-label", attrs: { for: "allow_adm" } }, [
                                                                                    t._v("Allow use of ADM (External app for\n                              Downloads)?"),
                                                                                ]),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s("div", { staticClass: "form-check" }, [
                                                                            s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.settings.server_dialog_selection, expression: "settings.server_dialog_selection" }],
                                                                                    staticClass: "custom-control-input",
                                                                                    attrs: { id: "server_dialog_selection", type: "checkbox" },
                                                                                    domProps: {
                                                                                        checked: Array.isArray(t.settings.server_dialog_selection) ? t._i(t.settings.server_dialog_selection, null) > -1 : t.settings.server_dialog_selection,
                                                                                    },
                                                                                    on: {
                                                                                        change: function (e) {
                                                                                            var s = t.settings.server_dialog_selection,
                                                                                                a = e.target,
                                                                                                i = !!a.checked;
                                                                                            if (Array.isArray(s)) {
                                                                                                var r = t._i(s, null);
                                                                                                a.checked
                                                                                                    ? r < 0 && t.$set(t.settings, "server_dialog_selection", s.concat([null]))
                                                                                                    : r > -1 && t.$set(t.settings, "server_dialog_selection", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                            } else t.$set(t.settings, "server_dialog_selection", i);
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("label", { staticClass: "custom-control-label", attrs: { for: "server_dialog_selection" } }, [t._v("Enable Servers Selection Dialog ?")]),
                                                                                t._v(" "),
                                                                                s("p", { staticClass: "text-primary" }, [
                                                                                    t._v(
                                                                                        "\n                              if this option is activated you can select a\n                              server before playing any media !\n                            "
                                                                                    ),
                                                                                ]),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s("div", { staticClass: "form-check" }, [
                                                                            s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.settings.ads_player, expression: "settings.ads_player" }],
                                                                                    staticClass: "custom-control-input",
                                                                                    attrs: { id: "ads_player", type: "checkbox" },
                                                                                    domProps: { checked: Array.isArray(t.settings.ads_player) ? t._i(t.settings.ads_player, null) > -1 : t.settings.ads_player },
                                                                                    on: {
                                                                                        change: function (e) {
                                                                                            var s = t.settings.ads_player,
                                                                                                a = e.target,
                                                                                                i = !!a.checked;
                                                                                            if (Array.isArray(s)) {
                                                                                                var r = t._i(s, null);
                                                                                                a.checked
                                                                                                    ? r < 0 && t.$set(t.settings, "ads_player", s.concat([null]))
                                                                                                    : r > -1 && t.$set(t.settings, "ads_player", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                            } else t.$set(t.settings, "ads_player", i);
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("label", { staticClass: "custom-control-label", attrs: { for: "ads_player" } }, [t._v("Enable Vast Ads Player")]),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s("div", { staticClass: "form-check" }, [
                                                                            s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.settings.streaming, expression: "settings.streaming" }],
                                                                                    staticClass: "custom-control-input",
                                                                                    attrs: { id: "streaming", type: "checkbox" },
                                                                                    domProps: { checked: Array.isArray(t.settings.streaming) ? t._i(t.settings.streaming, null) > -1 : t.settings.streaming },
                                                                                    on: {
                                                                                        change: function (e) {
                                                                                            var s = t.settings.streaming,
                                                                                                a = e.target,
                                                                                                i = !!a.checked;
                                                                                            if (Array.isArray(s)) {
                                                                                                var r = t._i(s, null);
                                                                                                a.checked
                                                                                                    ? r < 0 && t.$set(t.settings, "streaming", s.concat([null]))
                                                                                                    : r > -1 && t.$set(t.settings, "streaming", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                            } else t.$set(t.settings, "streaming", i);
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("label", { staticClass: "custom-control-label", attrs: { for: "streaming" } }, [t._v("Streaming")]),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s("div", { staticClass: "form-check" }, [
                                                                            s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.settings.anime, expression: "settings.anime" }],
                                                                                    staticClass: "custom-control-input",
                                                                                    attrs: { id: "anime", type: "checkbox" },
                                                                                    domProps: { checked: Array.isArray(t.settings.anime) ? t._i(t.settings.anime, null) > -1 : t.settings.anime },
                                                                                    on: {
                                                                                        change: function (e) {
                                                                                            var s = t.settings.anime,
                                                                                                a = e.target,
                                                                                                i = !!a.checked;
                                                                                            if (Array.isArray(s)) {
                                                                                                var r = t._i(s, null);
                                                                                                a.checked
                                                                                                    ? r < 0 && t.$set(t.settings, "anime", s.concat([null]))
                                                                                                    : r > -1 && t.$set(t.settings, "anime", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                            } else t.$set(t.settings, "anime", i);
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("label", { staticClass: "custom-control-label", attrs: { for: "anime" } }, [t._v("Anime")]),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "row" }, [
                                                                    s("div", { staticClass: "col-md-8" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("div", { staticClass: "row" }, [
                                                                                s("div", { staticClass: "col-md-8" }, [
                                                                                    s("div", { staticClass: "form-group" }, [
                                                                                        s("label", { attrs: { for: "next_episode_timer" } }, [t._v("Next Episode Timer ( in sec )")]),
                                                                                        t._v(" "),
                                                                                        s("input", {
                                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.next_episode_timer, expression: "settings.next_episode_timer" }],
                                                                                            staticClass: "form-control",
                                                                                            attrs: { id: "next_episode_timer", type: "text" },
                                                                                            domProps: { value: t.settings.next_episode_timer },
                                                                                            on: {
                                                                                                input: function (e) {
                                                                                                    e.target.composing || t.$set(t.settings, "next_episode_timer", e.target.value);
                                                                                                },
                                                                                            },
                                                                                        }),
                                                                                    ]),
                                                                                ]),
                                                                            ]),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "row" }, [
                                                                                s("div", { staticClass: "col-md-8" }, [
                                                                                    s("div", { staticClass: "form-group" }, [
                                                                                        s("label", { attrs: { for: "default_media_placeholder_path" } }, [t._v("Default Empty Media Cover (Player)")]),
                                                                                        t._v(" "),
                                                                                        s("input", {
                                                                                            directives: [
                                                                                                {
                                                                                                    name: "model",
                                                                                                    rawName: "v-model",
                                                                                                    value: t.settings.default_media_placeholder_path,
                                                                                                    expression: "\n                                    settings.default_media_placeholder_path\n                                  ",
                                                                                                },
                                                                                            ],
                                                                                            staticClass: "form-control",
                                                                                            attrs: { id: "default_media_placeholder_path", type: "text" },
                                                                                            domProps: { value: t.settings.default_media_placeholder_path },
                                                                                            on: {
                                                                                                input: function (e) {
                                                                                                    e.target.composing || t.$set(t.settings, "default_media_placeholder_path", e.target.value);
                                                                                                },
                                                                                            },
                                                                                        }),
                                                                                    ]),
                                                                                ]),
                                                                                t._v(" "),
                                                                                t.settings.default_media_placeholder_path
                                                                                    ? s("img", { staticClass: "poster", attrs: { src: t.settings.default_media_placeholder_path, "data-loaded": "true", height: "316", width: "210" } })
                                                                                    : t._e(),
                                                                            ]),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "row" }, [
                                                                                s("div", { staticClass: "col-md-12" }, [
                                                                                    s("div", { staticClass: "form-group" }, [
                                                                                        s("label", [t._v("Default Empty Media Cover (Player) Upload\n                                ")]),
                                                                                        t._v(" "),
                                                                                        s("input", { staticClass: "file-upload-default" }),
                                                                                        t._v(" "),
                                                                                        s("div", { staticClass: "input-group col-xs-12" }, [
                                                                                            s("input", {
                                                                                                staticClass: "form-control file-upload-info",
                                                                                                attrs: { id: "poster", placeholder: "Upload Image", type: "file" },
                                                                                                on: { change: t.storePosterPlaceHoder },
                                                                                            }),
                                                                                            t._v(" "),
                                                                                            t._m(21),
                                                                                        ]),
                                                                                    ]),
                                                                                ]),
                                                                            ]),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "row" }, [
                                                                                s("div", { staticClass: "col-md-8" }, [
                                                                                    s("div", { staticClass: "form-group" }, [
                                                                                        s("label", { attrs: { for: "imdb_cover_path" } }, [t._v("IMDB Cover Path")]),
                                                                                        t._v(" "),
                                                                                        s("input", {
                                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.imdb_cover_path, expression: "settings.imdb_cover_path" }],
                                                                                            staticClass: "form-control",
                                                                                            attrs: { id: "imdb_cover_path", type: "text" },
                                                                                            domProps: { value: t.settings.imdb_cover_path },
                                                                                            on: {
                                                                                                input: function (e) {
                                                                                                    e.target.composing || t.$set(t.settings, "imdb_cover_path", e.target.value);
                                                                                                },
                                                                                            },
                                                                                        }),
                                                                                    ]),
                                                                                ]),
                                                                            ]),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "row" }, [
                                                                                s("div", { staticClass: "col-md-8" }, [
                                                                                    s("div", { staticClass: "form-group" }, [
                                                                                        s("label", { attrs: { for: "app_name" } }, [t._v("App Android Url")]),
                                                                                        t._v(" "),
                                                                                        s("input", {
                                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.app_url_android, expression: "settings.app_url_android" }],
                                                                                            staticClass: "form-control",
                                                                                            attrs: { id: "app_url_android", type: "text" },
                                                                                            domProps: { value: t.settings.app_url_android },
                                                                                            on: {
                                                                                                input: function (e) {
                                                                                                    e.target.composing || t.$set(t.settings, "app_url_android", e.target.value);
                                                                                                },
                                                                                            },
                                                                                        }),
                                                                                    ]),
                                                                                ]),
                                                                            ]),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "row" }, [
                                                                                s("div", { staticClass: "col-md-8" }, [
                                                                                    s("div", { staticClass: "form-group" }, [
                                                                                        s("label", { attrs: { for: "app_name" } }, [t._v("Facebook Url")]),
                                                                                        t._v(" "),
                                                                                        s("input", {
                                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.facebook_url, expression: "settings.facebook_url" }],
                                                                                            staticClass: "form-control",
                                                                                            attrs: { id: "app_url_android", type: "text" },
                                                                                            domProps: { value: t.settings.facebook_url },
                                                                                            on: {
                                                                                                input: function (e) {
                                                                                                    e.target.composing || t.$set(t.settings, "facebook_url", e.target.value);
                                                                                                },
                                                                                            },
                                                                                        }),
                                                                                    ]),
                                                                                ]),
                                                                            ]),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "row" }, [
                                                                                s("div", { staticClass: "col-md-8" }, [
                                                                                    s("div", { staticClass: "form-group" }, [
                                                                                        s("label", { attrs: { for: "app_name" } }, [t._v("Twitter Url")]),
                                                                                        t._v(" "),
                                                                                        s("input", {
                                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.twitter_url, expression: "settings.twitter_url" }],
                                                                                            staticClass: "form-control",
                                                                                            attrs: { id: "app_url_android", type: "text" },
                                                                                            domProps: { value: t.settings.twitter_url },
                                                                                            on: {
                                                                                                input: function (e) {
                                                                                                    e.target.composing || t.$set(t.settings, "twitter_url", e.target.value);
                                                                                                },
                                                                                            },
                                                                                        }),
                                                                                    ]),
                                                                                ]),
                                                                            ]),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "row" }, [
                                                                                s("div", { staticClass: "col-md-8" }, [
                                                                                    s("div", { staticClass: "form-group" }, [
                                                                                        s("label", { attrs: { for: "app_name" } }, [t._v("Instagram Url")]),
                                                                                        t._v(" "),
                                                                                        s("input", {
                                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.instagram_url, expression: "settings.instagram_url" }],
                                                                                            staticClass: "form-control",
                                                                                            attrs: { id: "app_url_android", type: "text" },
                                                                                            domProps: { value: t.settings.instagram_url },
                                                                                            on: {
                                                                                                input: function (e) {
                                                                                                    e.target.composing || t.$set(t.settings, "instagram_url", e.target.value);
                                                                                                },
                                                                                            },
                                                                                        }),
                                                                                    ]),
                                                                                ]),
                                                                            ]),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "row" }, [
                                                                                s("div", { staticClass: "col-md-8" }, [
                                                                                    s("div", { staticClass: "form-group" }, [
                                                                                        s("label", { attrs: { for: "telegram_url" } }, [t._v("Telegram Url")]),
                                                                                        t._v(" "),
                                                                                        s("input", {
                                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.telegram_url, expression: "settings.telegram_url" }],
                                                                                            staticClass: "form-control",
                                                                                            attrs: { id: "telegram_url", type: "text" },
                                                                                            domProps: { value: t.settings.telegram_url },
                                                                                            on: {
                                                                                                input: function (e) {
                                                                                                    e.target.composing || t.$set(t.settings, "telegram_url", e.target.value);
                                                                                                },
                                                                                            },
                                                                                        }),
                                                                                    ]),
                                                                                ]),
                                                                            ]),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "row" }, [
                                                                                s("div", { staticClass: "col-md-8" }, [
                                                                                    s("div", { staticClass: "form-group" }, [
                                                                                        s("label", { attrs: { for: "featured_home_numbers" } }, [
                                                                                            t._v("\n                                  Featured Elements Numbers\n                                "),
                                                                                        ]),
                                                                                        t._v(" "),
                                                                                        s("input", {
                                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.featured_home_numbers, expression: "settings.featured_home_numbers" }],
                                                                                            staticClass: "form-control",
                                                                                            attrs: { id: "featured_home_numbers", type: "text" },
                                                                                            domProps: { value: t.settings.featured_home_numbers },
                                                                                            on: {
                                                                                                input: function (e) {
                                                                                                    e.target.composing || t.$set(t.settings, "featured_home_numbers", e.target.value);
                                                                                                },
                                                                                            },
                                                                                        }),
                                                                                    ]),
                                                                                ]),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ],
                                                        1
                                                    ),
                                                    t._v(" "),
                                                    s("div", { staticClass: "tab-pane fade", attrs: { "aria-labelledby": "payments-tab", id: "payments", role: "tabpanel" } }, [
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s(
                                                                    "div",
                                                                    { staticClass: "form-group" },
                                                                    [
                                                                        s("label", { attrs: { for: "lang" } }, [t._v("Default Payment")]),
                                                                        t._v(" "),
                                                                        s("multiselect", {
                                                                            attrs: { options: t.payments_options },
                                                                            model: {
                                                                                value: t.settings.default_payment,
                                                                                callback: function (e) {
                                                                                    t.$set(t.settings, "default_payment", e);
                                                                                },
                                                                                expression: "settings.default_payment",
                                                                            },
                                                                        }),
                                                                    ],
                                                                    1
                                                                ),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "row" }, [
                                                                s("div", { staticClass: "col-md-8" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "paypal_client_id" } }, [t._v("Paypal Client ID")]),
                                                                        t._v(" "),
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.paypal_client_id, expression: "settings.paypal_client_id" }],
                                                                            staticClass: "form-control",
                                                                            attrs: { id: "paypal_client_id", type: "text" },
                                                                            domProps: { value: t.settings.paypal_client_id },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || t.$set(t.settings, "paypal_client_id", e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "paypal_currency" } }, [t._v("Paypal Currency")]),
                                                                        t._v(" "),
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.paypal_currency, expression: "settings.paypal_currency" }],
                                                                            staticClass: "form-control",
                                                                            attrs: { id: "paypal_currency", type: "text" },
                                                                            domProps: { value: t.settings.paypal_currency },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || t.$set(t.settings, "paypal_currency", e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "stripe_publishable_key" } }, [t._v("Stripe Publishable key")]),
                                                                        t._v(" "),
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.stripe_publishable_key, expression: "settings.stripe_publishable_key" }],
                                                                            staticClass: "form-control",
                                                                            attrs: { id: "stripe_publishable_key", type: "text" },
                                                                            domProps: { value: t.settings.stripe_publishable_key },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || t.$set(t.settings, "stripe_publishable_key", e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "stripe_secret_key" } }, [t._v("Stripe Secret key")]),
                                                                        t._v(" "),
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.stripe_secret_key, expression: "settings.stripe_secret_key" }],
                                                                            staticClass: "form-control",
                                                                            attrs: { id: "stripe_secret_key", type: "text" },
                                                                            domProps: { value: t.settings.stripe_secret_key },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || t.$set(t.settings, "stripe_secret_key", e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                    ]),
                                                    t._v(" "),
                                                    s("div", { staticClass: "tab-pane fade", attrs: { "aria-labelledby": "emails-tab", id: "emails", role: "tabpanel" } }, [
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "row" }, [
                                                                s("div", { staticClass: "col-md-12" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "releaseNotes" } }, [t._v("Reset Password Message")]),
                                                                        t._v(" "),
                                                                        s("textarea", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.reset_password_message, expression: "settings.reset_password_message" }],
                                                                            staticClass: "form-control pb-3",
                                                                            attrs: { id: "reset_password_message", rows: "10", type: "text" },
                                                                            domProps: { value: t.settings.reset_password_message },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || t.$set(t.settings, "reset_password_message", e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                    ]),
                                                    t._v(" "),
                                                    s("div", { staticClass: "tab-pane fade", attrs: { "aria-labelledby": "aws-tab", id: "aws", role: "tabpanel" } }, [
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "row mb-2" }, [
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-switch ml-2" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.aws_s3_storage, expression: "settings.aws_s3_storage" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { type: "checkbox", id: "aws_s3_storage" },
                                                                                domProps: { checked: Array.isArray(t.settings.aws_s3_storage) ? t._i(t.settings.aws_s3_storage, null) > -1 : t.settings.aws_s3_storage },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.aws_s3_storage,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "aws_s3_storage", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "aws_s3_storage", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "aws_s3_storage", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "aws_s3_storage" } }, [t._v("AWS S3 Storage")]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "row" }, [
                                                                s("div", { staticClass: "col-md-12" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "aws_access_key_id" } }, [t._v("AWS access key ID")]),
                                                                        t._v(" "),
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.aws_access_key_id, expression: "settings.aws_access_key_id" }],
                                                                            staticClass: "form-control",
                                                                            attrs: { id: "aws_access_key_id", type: "text" },
                                                                            domProps: { value: t.settings.aws_access_key_id },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || t.$set(t.settings, "aws_access_key_id", e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-12" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "aws_secret_access_key" } }, [t._v("AWS secret access key")]),
                                                                        t._v(" "),
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.aws_secret_access_key, expression: "settings.aws_secret_access_key" }],
                                                                            staticClass: "form-control",
                                                                            attrs: { id: "aws_secret_access_key", type: "text" },
                                                                            domProps: { value: t.settings.aws_secret_access_key },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || t.$set(t.settings, "aws_secret_access_key", e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-12" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "aws_default_region" } }, [t._v("AWS default region")]),
                                                                        t._v(" "),
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.aws_default_region, expression: "settings.aws_default_region" }],
                                                                            staticClass: "form-control",
                                                                            attrs: { id: "aws_default_region", type: "text" },
                                                                            domProps: { value: t.settings.aws_default_region },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || t.$set(t.settings, "aws_default_region", e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-12" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "aws_bucket" } }, [t._v("AWS bucket")]),
                                                                        t._v(" "),
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.aws_bucket, expression: "settings.aws_bucket" }],
                                                                            staticClass: "form-control",
                                                                            attrs: { id: "aws_bucket", type: "text" },
                                                                            domProps: { value: t.settings.aws_bucket },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || t.$set(t.settings, "aws_bucket", e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "row mb-2" }, [
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-switch ml-2" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.wasabi_storage, expression: "settings.wasabi_storage" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { type: "checkbox", id: "wasabi_storage" },
                                                                                domProps: { checked: Array.isArray(t.settings.wasabi_storage) ? t._i(t.settings.wasabi_storage, null) > -1 : t.settings.wasabi_storage },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.wasabi_storage,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "wasabi_storage", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "wasabi_storage", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "wasabi_storage", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "wasabi_storage" } }, [t._v("Wasabi Storage")]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "row" }, [
                                                                s("div", { staticClass: "col-md-12" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "wasabi_access_key_id" } }, [t._v("Wasabi access key ID")]),
                                                                        t._v(" "),
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.wasabi_access_key_id, expression: "settings.wasabi_access_key_id" }],
                                                                            staticClass: "form-control",
                                                                            attrs: { id: "wasabi_access_key_id", type: "text" },
                                                                            domProps: { value: t.settings.wasabi_access_key_id },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || t.$set(t.settings, "wasabi_access_key_id", e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-12" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "wasabi_secret_access_key" } }, [t._v("Wasabi secret access key")]),
                                                                        t._v(" "),
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.wasabi_secret_access_key, expression: "settings.wasabi_secret_access_key" }],
                                                                            staticClass: "form-control",
                                                                            attrs: { id: "wasabi_secret_access_key", type: "text" },
                                                                            domProps: { value: t.settings.wasabi_secret_access_key },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || t.$set(t.settings, "wasabi_secret_access_key", e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-12" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "wasabi_default_region" } }, [t._v("Wasabi default region")]),
                                                                        t._v(" "),
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.wasabi_default_region, expression: "settings.wasabi_default_region" }],
                                                                            staticClass: "form-control",
                                                                            attrs: { id: "wasabi_default_region", type: "text" },
                                                                            domProps: { value: t.settings.wasabi_default_region },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || t.$set(t.settings, "wasabi_default_region", e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-12" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "wasabi_bucket" } }, [t._v("Wasabi bucket")]),
                                                                        t._v(" "),
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.wasabi_bucket, expression: "settings.wasabi_bucket" }],
                                                                            staticClass: "form-control",
                                                                            attrs: { id: "wasabi_bucket", type: "text" },
                                                                            domProps: { value: t.settings.wasabi_bucket },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || t.$set(t.settings, "wasabi_bucket", e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                    ]),
                                                    t._v(" "),
                                                    s("div", { staticClass: "tab-pane fade", attrs: { "aria-labelledby": "laravel-options-tab", id: "laravel-options", role: "tabpanel" } }),
                                                ]),
                                            ]),
                                        ]),
                                        t._v(" "),
                                        s(
                                            "button",
                                            {
                                                staticClass: "btn btn-primary mr-2",
                                                attrs: { "aria-pressed": "true", type: "button" },
                                                on: {
                                                    click: function (e) {
                                                        return e.preventDefault(), t.update();
                                                    },
                                                },
                                            },
                                            [t._v("\n            Update\n          ")]
                                        ),
                                    ]),
                                ]),
                            ]),
                        ]);
                    },
                    [
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("ul", { staticClass: "nav nav-tabs", attrs: { id: "myTab", role: "tablist" } }, [
                                s("li", { staticClass: "nav-item" }, [
                                    s("a", { staticClass: "nav-link active", attrs: { "aria-controls": "brand", "aria-selected": "true", "data-toggle": "tab", href: "#brand", id: "brand-tab", role: "tab" } }, [t._v("General")]),
                                ]),
                                t._v(" "),
                                s("li", { staticClass: "nav-item" }, [
                                    s("a", { staticClass: "nav-link", attrs: { "aria-controls": "firebase", "aria-selected": "false", "data-toggle": "tab", href: "#firebase", id: "firebase-tab", role: "tab" } }, [
                                        t._v("Notification Service"),
                                    ]),
                                ]),
                                t._v(" "),
                                s("li", { staticClass: "nav-item" }, [
                                    s("a", { staticClass: "nav-link", attrs: { "aria-controls": "tmdb", "aria-selected": "false", "data-toggle": "tab", href: "#tmdb", id: "tmdb-tab", role: "tab" } }, [t._v("TMDB Api Key")]),
                                ]),
                                t._v(" "),
                                s("li", { staticClass: "nav-item" }, [
                                    s("a", { staticClass: "nav-link", attrs: { "aria-controls": "code", "aria-selected": "false", "data-toggle": "tab", href: "#code", id: "code-tab", role: "tab" } }, [t._v("Purchase Code")]),
                                ]),
                                t._v(" "),
                                s("li", { staticClass: "nav-item" }, [
                                    s("a", { staticClass: "nav-link", attrs: { "aria-controls": "ads", "aria-selected": "false", "data-toggle": "tab", href: "#ads", id: "ads-tab", role: "tab" } }, [t._v("Ads")]),
                                ]),
                                t._v(" "),
                                s("li", { staticClass: "nav-item" }, [
                                    s("a", { staticClass: "nav-link", attrs: { "aria-controls": "appsettings", "aria-selected": "false", "data-toggle": "tab", href: "#appsettings", id: "appsettings-tab", role: "tab" } }, [
                                        t._v("App Settings"),
                                    ]),
                                ]),
                                t._v(" "),
                                s("li", { staticClass: "nav-item" }, [
                                    s("a", { staticClass: "nav-link", attrs: { "aria-controls": "payments", "aria-selected": "false", "data-toggle": "tab", href: "#payments", id: "payments-tab", role: "tab" } }, [t._v("Payments")]),
                                ]),
                                t._v(" "),
                                s("li", { staticClass: "nav-item" }, [
                                    s("a", { staticClass: "nav-link", attrs: { "aria-controls": "aws", "aria-selected": "false", "data-toggle": "tab", href: "#aws", id: "aws-tab", role: "tab" } }, [t._v("Web Storage Services")]),
                                ]),
                                t._v(" "),
                                s("li", { staticClass: "nav-item" }, [
                                    s("a", { staticClass: "nav-link", attrs: { "aria-controls": "laravel", "aria-selected": "false", "data-toggle": "tab", href: "#laravel", id: "laravel-tab", role: "laravel" } }, [t._v("Laravel Options")]),
                                ]),
                                t._v(" "),
                                s("li", { staticClass: "nav-item" }, [
                                    s("a", { staticClass: "nav-link", attrs: { "aria-controls": "laravel", "aria-selected": "false", "data-toggle": "tab", href: "#emails", id: "emails-tab", role: "laravel" } }, [t._v("Emails")]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                              Upload\n                            ")]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                              Upload\n                            ")]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                              Upload\n                            ")]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "col-md-12 grid-margin", attrs: { "wfd-id": "72" } }, [
                                e("div", { staticClass: "card bg-gradient-primary border-0", attrs: { "wfd-id": "73" } }, [
                                    e("div", { staticClass: "card-body py-3 px-4 d-flex align-items-center justify-content-between flex-wrap", attrs: { "wfd-id": "74" } }, [
                                        e("p", { staticClass: "mb-0 text-white font-weight-medium" }, [
                                            this._v(" You have selected facebook as your default reward you need to setup it as bidding take a look at the doc ( Biding Part ) !               "),
                                        ]),
                                        this._v(" "),
                                        e("div", { staticClass: "d-flex", attrs: { "wfd-id": "75" } }, [
                                            e("a", { staticClass: "btn btn-outline-light mr-2 bg-gradient-danger border-0", attrs: { href: "https://demo.yobdev.live/documentation/", target: "_blank" } }, [this._v("Documentation")]),
                                            this._v(" "),
                                            e("button", { staticClass: "btn border-0 p-0 ml-auto", attrs: { id: "bannerClose", "wfd-id": "123" } }, [e("i", { staticClass: "mdi mdi-close text-white" })]),
                                        ]),
                                    ]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("h4", { staticClass: "card-title" }, [this._v("AppLovin")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("h4", { staticClass: "card-title" }, [this._v("VUNGLE")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("h4", { staticClass: "card-title" }, [this._v("APPNEXT")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("h4", { staticClass: "card-title" }, [this._v("IRONSOURCE")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("h4", { staticClass: "card-title" }, [this._v("ADMOB")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("h4", { staticClass: "card-title" }, [this._v("FACEBOOK")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("h4", { staticClass: "card-title" }, [this._v("UNITY ADS")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("h4", { staticClass: "card-title" }, [this._v("APPODEAL ADS")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("h4", { staticClass: "card-title" }, [this._v("STARTAPP")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("h4", { staticClass: "card-title" }, [this._v("Cllear Panel Cache")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("h4", { staticClass: "card-title" }, [this._v("Clear Application APi CACHE")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("h4", { staticClass: "card-title" })]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "col-md-6" }, [
                                e("div", { staticClass: "form-group" }, [
                                    e("div", { staticClass: "form-check" }, [
                                        e("label", { staticClass: "form-check-label" }, [
                                            e("input", { staticClass: "form-check-input", attrs: { type: "checkbox", disabled: "", checked: "" } }),
                                            this._v("\n                              FFmpeg Conversion ( Upcoming )\n                            "),
                                            e("i", { staticClass: "input-helper" }),
                                        ]),
                                    ]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "col-md-6" }, [
                                e("div", { staticClass: "form-group" }, [
                                    e("div", { staticClass: "form-check" }, [
                                        e("label", { staticClass: "form-check-label" }, [
                                            e("input", { staticClass: "form-check-input", attrs: { type: "checkbox", disabled: "", checked: "" } }),
                                            this._v("\n                              User Profiles Selection ( Upcoming )\n                            "),
                                            e("i", { staticClass: "input-helper" }),
                                        ]),
                                    ]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "col-md-12" }, [
                                e("div", { staticClass: "form-group" }, [
                                    e("div", { staticClass: "form-check" }, [
                                        e("p", { staticClass: "text-primary" }, [
                                            this._v(
                                                "\n                          Note : you can olso the file on your root of laravel webviewAds.html and paste your code ( a network ads script for ex ) there \n                          , will be used if no link entred in this section.\n                        "
                                            ),
                                        ]),
                                    ]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                                Upload\n                              ")]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                                      Upload\n                                    ")]),
                            ]);
                        },
                    ],
                    !1,
                    null,
                    "06a3afa8",
                    null
                );
            e.default = p.exports;
        },
        348: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a);
            function r(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function n(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var n = t.apply(e, s);
                        function o(t) {
                            r(n, a, i, o, l, "next", t);
                        }
                        function l(t) {
                            r(n, a, i, o, l, "throw", t);
                        }
                        o(void 0);
                    });
                };
            }
            var o = {
                    data: function () {
                        return { password: "", password_confirmation: "", user: {}, avatar: url + "/api/image/users" };
                    },
                    mounted: function () {
                        var t = this;
                        return n(
                            i.a.mark(function e() {
                                var s;
                                return i.a.wrap(
                                    function (e) {
                                        for (;;)
                                            switch ((e.prev = e.next)) {
                                                case 0:
                                                    return (e.prev = 0), (e.next = 3), axios.get(url + "/admin/account/data");
                                                case 3:
                                                    (s = e.sent), (t.user = s.data), (e.next = 10);
                                                    break;
                                                case 7:
                                                    (e.prev = 7), (e.t0 = e.catch(0)), t.showError();
                                                case 10:
                                                case "end":
                                                    return e.stop();
                                            }
                                    },
                                    e,
                                    null,
                                    [[0, 7]]
                                );
                            })
                        )();
                    },
                    methods: {
                        updateAvatar: function (t) {
                            var e = this;
                            return n(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (s.prev = 0), (a = new FormData()).append("image", t.target.files[0]), (s.next = 5), axios.post(url + "/admin/update/avatar", a);
                                                    case 5:
                                                        (r = s.sent), (e.logo = r.data.image_path), e.showSuccess(r.data.message), (s.next = 13);
                                                        break;
                                                    case 10:
                                                        (s.prev = 10), (s.t0 = s.catch(0)), e.showError(s.t0.response);
                                                    case 13:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 10]]
                                    );
                                })
                            )();
                        },
                        update: function () {
                            var t = this;
                            return n(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.put(url + "/admin/account/update", t.user);
                                                    case 3:
                                                        (s = e.sent), (t.user = s.data.body), t.showSuccess(s.data.message), (e.next = 11);
                                                        break;
                                                    case 8:
                                                        (e.prev = 8), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 11:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 8]]
                                    );
                                })
                            )();
                        },
                        change: function () {
                            var t = this;
                            return n(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.put(url + "/admin/account/password/update", { password: t.password, password_confirmation: t.password_confirmation });
                                                    case 3:
                                                        (s = e.sent), (t.password = ""), (t.password_confirmation = ""), t.showSuccess(s.data.message), (e.next = 12);
                                                        break;
                                                    case 9:
                                                        (e.prev = 9), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 12:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 9]]
                                    );
                                })
                            )();
                        },
                    },
                    mixins: [s(3).a],
                },
                l = s(4),
                c = Object(l.a)(
                    o,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-md-6 grid-margin stretch-card" }, [
                                s("div", { staticClass: "card" }, [
                                    s("div", { staticClass: "card-body" }, [
                                        s("h4", { staticClass: "card-title" }, [t._v("Update Profile")]),
                                        t._v(" "),
                                        s("form", { staticClass: "forms-sample" }, [
                                            s("div", { staticClass: "form-group" }, [
                                                s("div", { staticClass: "form-group" }, [
                                                    s("label", { attrs: { for: "name" } }, [t._v("Name")]),
                                                    t._v(" "),
                                                    s("input", {
                                                        directives: [{ name: "model", rawName: "v-model", value: t.user.name, expression: "user.name" }],
                                                        staticClass: "form-control",
                                                        attrs: { id: "name", placeholder: "Name", type: "text" },
                                                        domProps: { value: t.user.name },
                                                        on: {
                                                            input: function (e) {
                                                                e.target.composing || t.$set(t.user, "name", e.target.value);
                                                            },
                                                        },
                                                    }),
                                                ]),
                                                t._v(" "),
                                                s("div", { staticClass: "form-group" }, [
                                                    s("label", { attrs: { for: "email" } }, [t._v("E-mail")]),
                                                    t._v(" "),
                                                    s("input", {
                                                        directives: [{ name: "model", rawName: "v-model", value: t.user.email, expression: "user.email" }],
                                                        staticClass: "form-control",
                                                        attrs: { id: "email", placeholder: "Email", type: "email" },
                                                        domProps: { value: t.user.email },
                                                        on: {
                                                            input: function (e) {
                                                                e.target.composing || t.$set(t.user, "email", e.target.value);
                                                            },
                                                        },
                                                    }),
                                                ]),
                                                t._v(" "),
                                                s("div", { staticClass: "form-group" }, [
                                                    s("label", { attrs: { for: "avatar" } }, [t._v("Avatar")]),
                                                    t._v(" "),
                                                    s("input", {
                                                        directives: [{ name: "model", rawName: "v-model", value: t.user.avatar, expression: "user.avatar" }],
                                                        staticClass: "form-control",
                                                        attrs: { id: "avatar", placeholder: "avatar", type: "avatar" },
                                                        domProps: { value: t.user.avatar },
                                                        on: {
                                                            input: function (e) {
                                                                e.target.composing || t.$set(t.user, "avatar", e.target.value);
                                                            },
                                                        },
                                                    }),
                                                ]),
                                                t._v(" "),
                                                s("div", { staticClass: "row" }, [s("div", { staticClass: "col-md-8" }, [t.avatar ? s("div", { staticClass: "logo" }, [s("img", { attrs: { src: t.avatar, alt: "avatar" } })]) : t._e()])]),
                                                t._v(" "),
                                                s("div", { staticClass: "form-group" }, [
                                                    s("label", [t._v("Avatar upload")]),
                                                    t._v(" "),
                                                    s("input", { staticClass: "file-upload-default" }),
                                                    t._v(" "),
                                                    s("div", { staticClass: "input-group col-xs-12" }, [
                                                        s("input", { staticClass: "form-control file-upload-info", attrs: { id: "avatar", placeholder: "Upload Image", type: "file" }, on: { change: t.updateAvatar } }),
                                                        t._v(" "),
                                                        t._m(0),
                                                    ]),
                                                ]),
                                                t._v(" "),
                                                s(
                                                    "button",
                                                    {
                                                        staticClass: "btn btn-info",
                                                        attrs: { disabled: !t.user.name || !t.user.email, "aria-pressed": "true", type: "button" },
                                                        on: {
                                                            click: function (e) {
                                                                return e.preventDefault(), t.update();
                                                            },
                                                        },
                                                    },
                                                    [t._v("Update")]
                                                ),
                                            ]),
                                            t._v(" "),
                                            s("div", { staticClass: "row" }, [
                                                s("div", { staticClass: "col-md-12" }, [
                                                    s("div", { staticClass: "form-group" }, [
                                                        s("label", { attrs: { for: "password" } }, [t._v("Password")]),
                                                        t._v(" "),
                                                        s("input", {
                                                            directives: [{ name: "model", rawName: "v-model", value: t.password, expression: "password" }],
                                                            staticClass: "form-control",
                                                            attrs: { id: "password", placeholder: "Password", type: "password" },
                                                            domProps: { value: t.password },
                                                            on: {
                                                                input: function (e) {
                                                                    e.target.composing || (t.password = e.target.value);
                                                                },
                                                            },
                                                        }),
                                                    ]),
                                                    t._v(" "),
                                                    s("div", { staticClass: "form-group" }, [
                                                        s("label", { attrs: { for: "password_confirmation" } }, [t._v("Confirm Password")]),
                                                        t._v(" "),
                                                        s("input", {
                                                            directives: [{ name: "model", rawName: "v-model", value: t.password_confirmation, expression: "password_confirmation" }],
                                                            staticClass: "form-control",
                                                            attrs: { id: "password_confirmation", placeholder: "Password", type: "password" },
                                                            domProps: { value: t.password_confirmation },
                                                            on: {
                                                                input: function (e) {
                                                                    e.target.composing || (t.password_confirmation = e.target.value);
                                                                },
                                                            },
                                                        }),
                                                    ]),
                                                    t._v(" "),
                                                    s(
                                                        "button",
                                                        {
                                                            staticClass: "btn btn-info",
                                                            attrs: { disabled: t.password.length < 6 || t.password_confirmation.length < 6 || t.password !== t.password_confirmation, "aria-pressed": "true", type: "button" },
                                                            on: {
                                                                click: function (e) {
                                                                    return e.preventDefault(), t.change();
                                                                },
                                                            },
                                                        },
                                                        [t._v("Update Password Only")]
                                                    ),
                                                ]),
                                            ]),
                                        ]),
                                    ]),
                                ]),
                            ]),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("Upload")])]);
                        },
                    ],
                    !1,
                    null,
                    "2e291b37",
                    null
                );
            e.default = c.exports;
        },
        349: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a),
                r = s(3),
                n = s(6);
            function o(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function l(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var r = t.apply(e, s);
                        function n(t) {
                            o(r, a, i, n, l, "next", t);
                        }
                        function l(t) {
                            o(r, a, i, n, l, "throw", t);
                        }
                        n(void 0);
                    });
                };
            }
            var c = {
                    data: function () {
                        return { index: !0, search: "", form: { report: { name: "", message: "" }, notification: !1 }, reports: [], options: [], loading: !1, paginate: ["filteredReports"] };
                    },
                    mounted: function () {
                        var t = this;
                        return l(
                            i.a.mark(function e() {
                                var s;
                                return i.a.wrap(function (e) {
                                    for (;;)
                                        switch ((e.prev = e.next)) {
                                            case 0:
                                                return (e.next = 2), axios.get(url + "/admin/reports/data");
                                            case 2:
                                                (s = e.sent), (t.reports = s.data);
                                            case 4:
                                            case "end":
                                                return e.stop();
                                        }
                                }, e);
                            })
                        )();
                    },
                    methods: {
                        back: function () {
                            (this.form.report = ""), (this.add = !1), (this.edit = !1), (this.index = !0);
                        },
                        destroy: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                l(
                                    i.a.mark(function a() {
                                        var r, n;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            return (a.prev = 0), (a.next = 3), axios.delete(url + "/admin/reports/destroy/" + t);
                                                        case 3:
                                                            (r = a.sent),
                                                                (n = s.reports.findIndex(function (e) {
                                                                    return e.id === t;
                                                                })),
                                                                s.reports.splice(n, 1),
                                                                s.paginate.filteredReports.list.splice(e, 1),
                                                                s.showSuccess(r.data.message),
                                                                (a.next = 13);
                                                            break;
                                                        case 10:
                                                            (a.prev = 10), (a.t0 = a.catch(0)), s.showError();
                                                        case 13:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 10]]
                                        );
                                    })
                                )
                            );
                        },
                    },
                    computed: {
                        filteredReports: function () {
                            var t = this;
                            return this.reports.filter(function (e) {
                                return e.title.toLowerCase().match(t.search.toLowerCase());
                            });
                        },
                    },
                    mixins: [r.a, n.a],
                },
                d = s(4),
                u = Object(d.a)(
                    c,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            t.index
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s("p", { staticClass: "card-title" }, [t._v("Reports")]),
                                              t._v(" "),
                                              s("div", { staticClass: "table-responsive" }, [
                                                  s(
                                                      "table",
                                                      { staticClass: "table", attrs: { "aria-describedby": "Report Table" } },
                                                      [
                                                          t._m(0),
                                                          t._v(" "),
                                                          s(
                                                              "tbody",
                                                              t._l(t.paginated("filteredReports"), function (e, a) {
                                                                  return s("tr", { key: a }, [
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.id))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.title))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.message))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [
                                                                          s(
                                                                              "button",
                                                                              {
                                                                                  staticClass: "btn btn-danger btn-sm",
                                                                                  attrs: { type: "button" },
                                                                                  on: {
                                                                                      click: function (s) {
                                                                                          return t.destroy(e.id, a);
                                                                                      },
                                                                                  },
                                                                              },
                                                                              [t._v("Dismiss")]
                                                                          ),
                                                                      ]),
                                                                  ]);
                                                              }),
                                                              0
                                                          ),
                                                          t._v(" "),
                                                          t.filteredReports.length ? s("paginate", { attrs: { list: t.filteredReports, per: 5, name: "filteredReports", tag: "tbody" } }) : t._e(),
                                                          t._v(" "),
                                                          t.filteredReports.length
                                                              ? s("paginate-links", {
                                                                    staticClass: "float-right",
                                                                    attrs: {
                                                                        async: !0,
                                                                        classes: { ul: "pagination", li: "page-item", a: "page-link", ".next > a": "next-link", ".prev > a": "prev-link" },
                                                                        "hide-single-page": !0,
                                                                        limit: 5,
                                                                        "show-step-links": !0,
                                                                        for: "filteredReports",
                                                                    },
                                                                })
                                                              : t._e(),
                                                      ],
                                                      1
                                                  ),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("thead", [
                                e("tr", [
                                    e("th", { staticClass: "text-center", attrs: { id: "id" } }, [this._v("ID")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "movie_name" } }, [this._v("Movie Name")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "message" } }, [this._v("Message")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "actions" } }, [this._v("Actions")]),
                                ]),
                            ]);
                        },
                    ],
                    !1,
                    null,
                    null,
                    null
                );
            e.default = u.exports;
        },
        350: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a),
                r = s(3),
                n = s(6);
            function o(t, e) {
                return (
                    (function (t) {
                        if (Array.isArray(t)) return t;
                    })(t) ||
                    (function (t, e) {
                        var s = null == t ? null : ("undefined" != typeof Symbol && t[Symbol.iterator]) || t["@@iterator"];
                        if (null == s) return;
                        var a,
                            i,
                            r = [],
                            n = !0,
                            o = !1;
                        try {
                            for (s = s.call(t); !(n = (a = s.next()).done) && (r.push(a.value), !e || r.length !== e); n = !0);
                        } catch (t) {
                            (o = !0), (i = t);
                        } finally {
                            try {
                                n || null == s.return || s.return();
                            } finally {
                                if (o) throw i;
                            }
                        }
                        return r;
                    })(t, e) ||
                    c(t, e) ||
                    (function () {
                        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    })()
                );
            }
            function l(t, e) {
                var s = ("undefined" != typeof Symbol && t[Symbol.iterator]) || t["@@iterator"];
                if (!s) {
                    if (Array.isArray(t) || (s = c(t)) || (e && t && "number" == typeof t.length)) {
                        s && (t = s);
                        var a = 0,
                            i = function () {};
                        return {
                            s: i,
                            n: function () {
                                return a >= t.length ? { done: !0 } : { done: !1, value: t[a++] };
                            },
                            e: function (t) {
                                throw t;
                            },
                            f: i,
                        };
                    }
                    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var r,
                    n = !0,
                    o = !1;
                return {
                    s: function () {
                        s = s.call(t);
                    },
                    n: function () {
                        var t = s.next();
                        return (n = t.done), t;
                    },
                    e: function (t) {
                        (o = !0), (r = t);
                    },
                    f: function () {
                        try {
                            n || null == s.return || s.return();
                        } finally {
                            if (o) throw r;
                        }
                    },
                };
            }
            function c(t, e) {
                if (t) {
                    if ("string" == typeof t) return d(t, e);
                    var s = Object.prototype.toString.call(t).slice(8, -1);
                    return "Object" === s && t.constructor && (s = t.constructor.name), "Map" === s || "Set" === s ? Array.from(t) : "Arguments" === s || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(s) ? d(t, e) : void 0;
                }
            }
            function d(t, e) {
                (null == e || e > t.length) && (e = t.length);
                for (var s = 0, a = new Array(e); s < e; s++) a[s] = t[s];
                return a;
            }
            function u(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function m(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var r = t.apply(e, s);
                        function n(t) {
                            u(r, a, i, n, o, "next", t);
                        }
                        function o(t) {
                            u(r, a, i, n, o, "throw", t);
                        }
                        n(void 0);
                    });
                };
            }
            var p = {
                    data: function () {
                        return {
                            isuploading: !1,
                            fetchingCompleted: !1,
                            isFetchingData: !0,
                            percent: 0,
                            index: !0,
                            add: !1,
                            edit: !1,
                            size: "default",
                            align: "right",
                            animes: {},
                            customEpisodes: { name: "", episode_number: "", overview: "" },
                            customSeason: { name: "", season_number: "", episodes: [] },
                            paginate: ["animes", "filteredAnimes"],
                            tmdb: null,
                            pageNum: null,
                            form: { anime: { backdrop_path: "", poster_path: "", preview_path: "", genres: [], casterslist: [], networks: [], seasons: [{ episodes: [{ videos: [], downloads: [], substitles: [] }] }] }, notification: !1 },
                            substypes: ["srt", "vtt", "ass"],
                            typesubstitle: "srt",
                            poster: "",
                            backdrop: "",
                            posterSeason: "",
                            stillEpisode: "",
                            search: "",
                            servers: [],
                            headers: [],
                            serversdrm: [],
                            drmuui: [
                                { id: 1, name: "widevine" },
                                { id: 2, name: "playready" },
                                { id: 3, name: "clearkey" },
                            ],
                            useragents: [],
                            server: "",
                            useragent: "",
                            drmuuiselected: "",
                            drmlicenceuriselected: "",
                            header: "",
                            headerdownload: "",
                            useragentdownload: "",
                            season: null,
                            selectedSeason: -1,
                            oldSeason: {},
                            episode: null,
                            selectedEpisode: -1,
                            embed: !1,
                            supported_hosts: !1,
                            hls: !1,
                            link: "",
                            supported_hosts_download: !1,
                            external_download: !1,
                            linkDownload: "",
                            serverdownload: "",
                            serversDownloads: [],
                            linksubstitle: "",
                            options: [],
                            optionscast: {},
                            optionsnetwork: [],
                            addseason: "",
                            addepisode: "",
                            video: null,
                            showModal: !1,
                            showModalSeason: !1,
                            substitle: null,
                            loading: !1,
                            zip: !1,
                        };
                    },
                    mounted: function () {
                        var t = this;
                        return m(
                            i.a.mark(function e() {
                                var s;
                                return i.a.wrap(function (e) {
                                    for (;;)
                                        switch ((e.prev = e.next)) {
                                            case 0:
                                                return (e.next = 2), axios.get(url + "/admin/animes/data");
                                            case 2:
                                                return (s = e.sent), (t.animes = s.data), (e.next = 6), axios.get(url + "/admin/servers/dataservers");
                                            case 6:
                                                return (s = e.sent), (t.servers = s.data), (e.next = 10), axios.get(url + "/admin/genres/datagenres");
                                            case 10:
                                                return (s = e.sent), (t.options = s.data), (e.next = 14), axios.get(url + "/admin/casters/datawebcaster");
                                            case 14:
                                                return (s = e.sent), (t.optionscast = s.data.data), (e.next = 18), axios.get(url + "/admin/networks/datawebnetworks");
                                            case 18:
                                                return (s = e.sent), (t.optionsnetwork = s.data), (e.next = 22), axios.get(url + "/admin/headers/dataheaders");
                                            case 22:
                                                return (s = e.sent), (t.headers = s.data), (e.next = 26), axios.get(url + "/admin/drmservers/drmdataservers");
                                            case 26:
                                                return (s = e.sent), (t.serversdrm = s.data), (e.next = 30), axios.get(url + "/admin/useragents/datausersagentoptions");
                                            case 30:
                                                (s = e.sent), (t.useragents = s.data);
                                            case 32:
                                            case "end":
                                                return e.stop();
                                        }
                                }, e);
                            })
                        )();
                    },
                    methods: {
                        onLaunchSearchCasters: function (t) {
                            var e = this;
                            axios.get(url + "/admin/searchwebcasts?q=" + t).then(function (t) {
                                e.optionscast = t.data.search_cast;
                            });
                        },
                        getResults: function () {
                            var t = this,
                                e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
                            axios.get(url + "/admin/animes/data?page=" + e).then(function (s) {
                                (t.animes = s.data), (t.pageNum = e);
                            });
                        },
                        searchUnit: _.debounce(function () {
                            var t = this;
                            axios.get(url + "/admin/search_animes?q=" + this.search).then(function (e) {
                                t.animes.data = e.data.animes;
                            });
                        }),
                        create: function () {
                            (this.index = !1), (this.edit = !1), (this.add = !0);
                        },
                        back: function () {
                            (this.form.anime = { backdrop_path: "", poster_path: "", preview_path: "", genres: [], typesubstitle: "", networks: [], seasons: [{ episodes: [{ videos: [], downloads: [], substitles: [] }] }] }),
                                (this.link = ""),
                                (this.linksubstitle = ""),
                                (this.server = ""),
                                (this.video = null),
                                (this.substitle = null),
                                (this.tmdb = null),
                                (this.add = !1),
                                (this.edit = !1),
                                (this.index = !0);
                        },
                        editing: function (t) {
                            (this.index = !1), (this.add = !1), (this.edit = !0), (this.form.anime = t), (this.tmdb = t.tmdb_id);
                        },
                        getSearchByName: function (t) {
                            var e = this.settings.tmdb_api_key,
                                s = this.settings.tmdb_lang.iso_639_1,
                                a = "".concat("https://api.themoviedb.org/3/search/tv?api_key=").concat(e, "&language=").concat(s, "&query=").concat(encodeURI(t), "&include_adult=false=");
                            return new Promise(function (e) {
                                if (t.length < 1) return e([]);
                                fetch(a)
                                    .then(function (t) {
                                        return t.json();
                                    })
                                    .then(function (t) {
                                        e(t.results);
                                    });
                            });
                        },
                        getResultValue: function (t) {
                            return t.name;
                        },
                        onSubmit: function (t) {
                            (this.tmdb = t.id), this.getanime();
                        },
                        getSerie_Find: function () {
                            var t = this;
                            return m(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), http.get("https://api.themoviedb.org/3/find/" + t.tmdb + "?api_key=" + t.settings.tmdb_api_key + "&external_source=imdb_id");
                                                    case 3:
                                                        (s = e.sent), (t.tmdb = s.data.tv_results[0].id), t.getanime(), (e.next = 11);
                                                        break;
                                                    case 8:
                                                        (e.prev = 8), (e.t0 = e.catch(0)), t.showError();
                                                    case 11:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 8]]
                                    );
                                })
                            )();
                        },
                        getanime: function () {
                            var t = this;
                            return m(
                                i.a.mark(function e() {
                                    var s, a, r, n, c, d, u, m, p, v, f;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (
                                                            (s = ""),
                                                            (a = t.form.anime),
                                                            (r = ""),
                                                            (n = ""),
                                                            (e.prev = 4),
                                                            (e.next = 7),
                                                            http.get(
                                                                "https://api.themoviedb.org/3/tv/" +
                                                                    t.tmdb +
                                                                    "?api_key=" +
                                                                    t.settings.tmdb_api_key +
                                                                    "&language=" +
                                                                    t.settings.tmdb_lang.iso_639_1 +
                                                                    "&append_to_response=videos,external_ids,casts,networks"
                                                            )
                                                        );
                                                    case 7:
                                                        (c = e.sent), (d = l(c.data.networks));
                                                        try {
                                                            for (d.s(); !(u = d.n()).done; ) (m = u.value).logo_path && (m.logo_path = t.settings.imdb_cover_path + m.logo_path);
                                                        } catch (t) {
                                                            d.e(t);
                                                        } finally {
                                                            d.f();
                                                        }
                                                        if (
                                                            ((s = _.mapKeys(c.data, function (t, e) {
                                                                return "id" == e ? "tmdb_id" : e;
                                                            })),
                                                            t.edit && (s.id = a.id),
                                                            void 0 === s.videos.results[0])
                                                        ) {
                                                            e.next = 16;
                                                            break;
                                                        }
                                                        (s.preview_path = s.videos.results[0].key), (e.next = 24);
                                                        break;
                                                    case 16:
                                                        if (!t.edit || !a.preview_path) {
                                                            e.next = 20;
                                                            break;
                                                        }
                                                        (s.preview_path = a.preview_path), (e.next = 24);
                                                        break;
                                                    case 20:
                                                        return (e.next = 22), http.get("https://api.themoviedb.org/3/tv/" + t.tmdb + "/videos?api_key=" + t.settings.tmdb_api_key);
                                                    case 22:
                                                        (c = e.sent).data.results[0] && (s.preview_path = c.data.results[0].key);
                                                    case 24:
                                                        s.external_ids.imdb_id && (s.imdb_external_id = s.external_ids.imdb_id),
                                                            s.poster_path && (s.poster_path = t.settings.imdb_cover_path + s.poster_path),
                                                            s.backdrop_path && (s.backdrop_path = t.settings.imdb_cover_path + s.backdrop_path),
                                                            (p = l(s.seasons.entries())),
                                                            (e.prev = 28),
                                                            (f = i.a.mark(function e() {
                                                                var d, u, m, p, f, h, g, b, C, x, w;
                                                                return i.a.wrap(function (e) {
                                                                    for (;;)
                                                                        switch ((e.prev = e.next)) {
                                                                            case 0:
                                                                                return (
                                                                                    (d = o(v.value, 2)),
                                                                                    (u = d[0]),
                                                                                    (m = d[1]),
                                                                                    (s.seasons[u] = _.mapKeys(m, function (t, e) {
                                                                                        return "id" == e ? "tmdb_id" : e;
                                                                                    })),
                                                                                    t.edit &&
                                                                                        void 0 !==
                                                                                            (r = a.seasons.find(function (t) {
                                                                                                return t.season_number === m.season_number;
                                                                                            })) &&
                                                                                        ((s.seasons[u].id = r.id), (s.seasons[u].anime_id = r.anime_id)),
                                                                                    s.seasons[u].poster_path && (s.seasons[u].poster_path = t.settings.imdb_cover_path + s.seasons[u].poster_path),
                                                                                    (p = []),
                                                                                    (e.next = 7),
                                                                                    http.get(
                                                                                        "https://api.themoviedb.org/3/tv/" +
                                                                                            t.tmdb +
                                                                                            "/season/" +
                                                                                            m.season_number +
                                                                                            "?api_key=" +
                                                                                            t.settings.tmdb_api_key +
                                                                                            "&language=" +
                                                                                            t.settings.tmdb_lang.iso_639_1
                                                                                    )
                                                                                );
                                                                            case 7:
                                                                                (c = e.sent), (f = l(c.data.episodes));
                                                                                try {
                                                                                    for (
                                                                                        g = function () {
                                                                                            var e = h.value;
                                                                                            (e = _.mapKeys(e, function (t, e) {
                                                                                                return "id" == e ? "tmdb_id" : e;
                                                                                            })).still_path && (e.still_path = t.settings.imdb_cover_path + e.still_path),
                                                                                                t.edit &&
                                                                                                    void 0 !== r &&
                                                                                                    void 0 !==
                                                                                                        (n = r.episodes.find(function (t) {
                                                                                                            return t.tmdb_id === e.tmdb_id;
                                                                                                        })) &&
                                                                                                    ((e.id = n.id), (e.season_id = n.season_id), (e.videos = n.videos)),
                                                                                                p.push(e);
                                                                                        },
                                                                                            f.s();
                                                                                        !(h = f.n()).done;

                                                                                    )
                                                                                        g();
                                                                                } catch (t) {
                                                                                    f.e(t);
                                                                                } finally {
                                                                                    f.f();
                                                                                }
                                                                                return (
                                                                                    (b = []),
                                                                                    (e.next = 13),
                                                                                    http.get("https://api.themoviedb.org/3/tv/" + t.tmdb + "/credits?api_key=" + t.settings.tmdb_api_key + "&language=" + t.settings.tmdb_lang.iso_639_1)
                                                                                );
                                                                            case 13:
                                                                                (c = e.sent), (C = l(c.data.cast));
                                                                                try {
                                                                                    for (
                                                                                        w = function () {
                                                                                            var e = x.value;
                                                                                            e.profile_path && (e.profile_path = t.settings.imdb_cover_path + e.profile_path),
                                                                                                axios
                                                                                                    .get("https://api.themoviedb.org/3/person/" + e.id + "?api_key=" + t.settings.tmdb_api_key + "&language=" + t.settings.tmdb_lang.iso_639_1)
                                                                                                    .then(function (t) {
                                                                                                        null != t.data.biography && (e.biography = t.data.biography),
                                                                                                            null != t.data.place_of_birth && (e.place_of_birth = t.data.place_of_birth),
                                                                                                            null != t.data.birthday && (e.birthday = t.data.birthday);
                                                                                                    }),
                                                                                                b.push(e);
                                                                                        },
                                                                                            C.s();
                                                                                        !(x = C.n()).done;

                                                                                    )
                                                                                        w();
                                                                                } catch (t) {
                                                                                    C.e(t);
                                                                                } finally {
                                                                                    C.f();
                                                                                }
                                                                                (s.casterslist = b), (s.seasons[u].episodes = p);
                                                                            case 18:
                                                                            case "end":
                                                                                return e.stop();
                                                                        }
                                                                }, e);
                                                            })),
                                                            p.s();
                                                    case 31:
                                                        if ((v = p.n()).done) {
                                                            e.next = 35;
                                                            break;
                                                        }
                                                        return e.delegateYield(f(), "t0", 33);
                                                    case 33:
                                                        e.next = 31;
                                                        break;
                                                    case 35:
                                                        e.next = 40;
                                                        break;
                                                    case 37:
                                                        (e.prev = 37), (e.t1 = e.catch(28)), p.e(e.t1);
                                                    case 40:
                                                        return (e.prev = 40), p.f(), e.finish(40);
                                                    case 43:
                                                        (t.form.anime = s), (e.next = 49);
                                                        break;
                                                    case 46:
                                                        (e.prev = 46), (e.t2 = e.catch(4)), t.showError();
                                                    case 49:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [
                                            [4, 46],
                                            [28, 37, 40, 43],
                                        ]
                                    );
                                })
                            )();
                        },
                        store: function () {
                            var t = this;
                            return m(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.post(url + "/admin/animes/store", t.form);
                                                    case 3:
                                                        (s = e.sent),
                                                            (t.add = !1),
                                                            (t.edit = !1),
                                                            (t.index = !0),
                                                            (t.form.anime = { backdrop_path: "", poster_path: "", preview_path: "", genres: [], seasons: [{ episodes: [{ videos: [], substitles: [] }] }] }),
                                                            (t.tmdb = null),
                                                            (t.selectedSeason = -1),
                                                            (t.selectedEpisode = -1),
                                                            (t.season = null),
                                                            (t.episode = null),
                                                            (t.link = ""),
                                                            (t.linksubstitle = ""),
                                                            (t.server = ""),
                                                            (t.video = null),
                                                            (t.substitle = null),
                                                            t.animes.data.unshift(s.data.body),
                                                            t.showSuccess(s.data.message),
                                                            axios.get(url + "/admin/animes/data?page=" + t.pageNum).then(function (e) {
                                                                t.animes = e.data;
                                                            }),
                                                            (e.next = 26);
                                                        break;
                                                    case 23:
                                                        (e.prev = 23), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 26:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 23]]
                                    );
                                })
                            )();
                        },
                        update: function () {
                            var t = this;
                            return m(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.put(url + "/admin/animes/update/" + t.form.anime.id, t.form);
                                                    case 3:
                                                        (s = e.sent),
                                                            (t.add = !1),
                                                            (t.edit = !1),
                                                            (t.index = !0),
                                                            (t.form.anime = { backdrop_path: "", poster_path: "", preview_path: "", genres: [], seasons: [{ episodes: [{ videos: [] }] }] }),
                                                            (t.tmdb = null),
                                                            (t.selectedSeason = -1),
                                                            (t.selectedEpisode = -1),
                                                            (t.season = null),
                                                            (t.episode = null),
                                                            (t.link = ""),
                                                            (t.server = ""),
                                                            (t.video = null),
                                                            t.showSuccess(s.data.message),
                                                            axios.get(url + "/admin/animes/data?page=" + t.pageNum).then(function (e) {
                                                                t.animes = e.data;
                                                            }),
                                                            (e.next = 23);
                                                        break;
                                                    case 20:
                                                        (e.prev = 20), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 23:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 20]]
                                    );
                                })
                            )();
                        },
                        destroy: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                m(
                                    i.a.mark(function e() {
                                        var a, r;
                                        return i.a.wrap(
                                            function (e) {
                                                for (;;)
                                                    switch ((e.prev = e.next)) {
                                                        case 0:
                                                            return (e.prev = 0), (e.next = 3), axios.delete(url + "/admin/animes/destroy/" + t);
                                                        case 3:
                                                            (a = e.sent),
                                                                (r = s.animes.data.findIndex(function (e) {
                                                                    return e.id === t;
                                                                })),
                                                                s.animes.data.splice(r, 1),
                                                                (s.selectedSeason = -1),
                                                                (s.selectedEpisode = -1),
                                                                (s.season = null),
                                                                (s.episode = null),
                                                                s.showSuccess(a.data.message),
                                                                (e.next = 16);
                                                            break;
                                                        case 13:
                                                            (e.prev = 13), (e.t0 = e.catch(0)), s.showError();
                                                        case 16:
                                                        case "end":
                                                            return e.stop();
                                                    }
                                            },
                                            e,
                                            null,
                                            [[0, 13]]
                                        );
                                    })
                                )
                            );
                        },
                        storePoster: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (s.prev = 0), (e.poster = t.target.files[0]), (a = new FormData()).append("image", e.poster), (s.next = 6), axios.post(url + "/admin/animes/image/store", a);
                                                    case 6:
                                                        (r = s.sent), (e.form.anime.poster_path = r.data.image_path), e.showSuccess(r.data.message), (s.next = 14);
                                                        break;
                                                    case 11:
                                                        (s.prev = 11), (s.t0 = s.catch(0)), e.showError(s.t0.response);
                                                    case 14:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 11]]
                                    );
                                })
                            )();
                        },
                        storePosterSeason: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (s.prev = 0), (e.posterSeason = t.target.files[0]), (a = new FormData()).append("image", e.posterSeason), (s.next = 6), axios.post(url + "/admin/animes/image/store", a);
                                                    case 6:
                                                        (r = s.sent), (e.form.anime.seasons[e.selectedSeason].poster_path = r.data.image_path), e.showSuccess(r.data.message), (s.next = 14);
                                                        break;
                                                    case 11:
                                                        (s.prev = 11), (s.t0 = s.catch(0)), e.showError(s.t0.response);
                                                    case 14:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 11]]
                                    );
                                })
                            )();
                        },
                        storeStillEpisode: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (s.prev = 0), (e.stillEpisode = t.target.files[0]), (a = new FormData()).append("image", e.stillEpisode), (s.next = 6), axios.post(url + "/admin/animes/image/store", a);
                                                    case 6:
                                                        (r = s.sent), (e.form.anime.seasons[e.selectedSeason].episodes[e.selectedEpisode].still_path = r.data.image_path), e.showSuccess(r.data.message), (s.next = 14);
                                                        break;
                                                    case 11:
                                                        (s.prev = 11), (s.t0 = s.catch(0)), e.showError(s.t0.response);
                                                    case 14:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 11]]
                                    );
                                })
                            )();
                        },
                        storeBackdrop: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (s.prev = 0), (e.backdrop = t.target.files[0]), (a = new FormData()).append("image", e.backdrop), (s.next = 6), axios.post(url + "/admin/animes/image/store", a);
                                                    case 6:
                                                        (r = s.sent), (e.form.anime.backdrop_path = r.data.image_path), e.showSuccess(r.data.message), (s.next = 14);
                                                        break;
                                                    case 11:
                                                        (s.prev = 11), (s.t0 = s.catch(0)), e.showError(s.t0.response);
                                                    case 14:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 11]]
                                    );
                                })
                            )();
                        },
                        storeVideo: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (
                                                            (s.prev = 0),
                                                            (e.video = t.target.files[0]),
                                                            (a = new FormData()).append("video", e.video),
                                                            (s.next = 6),
                                                            axios.post(url + "/admin/video/store", a, {
                                                                onUploadProgress: function (t) {
                                                                    (e.isuploading = !0), (e.percent = Math.round((t.loaded / t.total) * 100));
                                                                },
                                                            })
                                                        );
                                                    case 6:
                                                        (r = s.sent),
                                                            (e.link = r.data.video_path),
                                                            (e.server = { name: r.data.server }),
                                                            e.showSuccess(r.data.message),
                                                            setTimeout(function () {
                                                                return (e.isuploading = !1);
                                                            }, 2e3),
                                                            (s.next = 17);
                                                        break;
                                                    case 13:
                                                        (s.prev = 13),
                                                            (s.t0 = s.catch(0)),
                                                            e.showError(),
                                                            setTimeout(function () {
                                                                return (e.isuploading = !1);
                                                            }, 2e3);
                                                    case 17:
                                                        return (s.prev = 17), s.finish(17);
                                                    case 19:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 13, 17, 19]]
                                    );
                                })
                            )();
                        },
                        addNewSeason: function () {
                            var t = this;
                            return m(
                                i.a.mark(function e() {
                                    return i.a.wrap(function (e) {
                                        for (;;)
                                            switch ((e.prev = e.next)) {
                                                case 0:
                                                    t.form.anime.seasons.push({ name: t.customSeason.name, overview: t.customSeason.overview, season_number: t.customSeason.season_number, episodes: [] }),
                                                        (t.customSeason.name = ""),
                                                        (t.customSeason.overview = ""),
                                                        (t.customSeason.season_number = ""),
                                                        (t.showModalSeason = !1);
                                                case 5:
                                                case "end":
                                                    return e.stop();
                                            }
                                    }, e);
                                })
                            )();
                        },
                        addNewEpisode: function () {
                            var t = this;
                            return m(
                                i.a.mark(function e() {
                                    return i.a.wrap(function (e) {
                                        for (;;)
                                            switch ((e.prev = e.next)) {
                                                case 0:
                                                    t.form.anime.seasons[t.selectedSeason].episodes.push({ name: t.customEpisodes.name, overview: t.customEpisodes.overview, episode_number: t.customEpisodes.episode_number }),
                                                        (t.customEpisodes.name = ""),
                                                        (t.customEpisodes.overview = ""),
                                                        (t.customEpisodes.episode_number = ""),
                                                        (t.showModal = !1);
                                                case 5:
                                                case "end":
                                                    return e.stop();
                                            }
                                    }, e);
                                })
                            )();
                        },
                        addSubs: function () {
                            if ("" !== this.linksubstitle && "" !== this.form.anime) {
                                var t = this.form.anime.seasons[this.selectedSeason].episodes[this.selectedEpisode];
                                t.substitles || Vue.set(t, "substitles", []),
                                    t.substitles.unshift({
                                        link: this.linksubstitle,
                                        type: this.typesubstitle,
                                        lang: this.langsub.english_name && "No Language" !== this.langsub.english_name ? this.langsub.english_name : this.settings.tmdb_lang.english_name,
                                        zip: this.zip,
                                    }),
                                    (this.linksubstitle = ""),
                                    (this.server = ""),
                                    (this.typesubstitle = ""),
                                    (this.substitle = null),
                                    (this.zip = !1);
                            }
                        },
                        addLinkDownload: function () {
                            var t = this.form.anime.seasons[this.selectedSeason].episodes[this.selectedEpisode];
                            t.downloads || Vue.set(t, "downloads", []),
                                t.downloads.unshift({
                                    server: this.serverdownload.name,
                                    header: this.headerdownload.name,
                                    useragent: this.useragentdownload.name,
                                    link: this.linkDownload,
                                    lang: this.langdownload.english_name && "No Language" !== this.langdownload.english_name ? this.langdownload.english_name : this.settings.tmdb_lang.english_name,
                                    external: this.external_download,
                                    supported_hosts: this.supported_hosts_download,
                                }),
                                (this.linkDownload = ""),
                                (this.serverdownload = ""),
                                (this.headerdownload = ""),
                                (this.useragentdownload = ""),
                                (this.download = null),
                                (this.supported_hosts_download = !1),
                                (this.external_download = !1);
                        },
                        addLink: function () {
                            if ("" !== this.selectedServer && "" !== this.link && "" !== this.form.anime && 0 !== this.selectedServer) {
                                var t = this.form.anime.seasons[this.selectedSeason].episodes[this.selectedEpisode];
                                t.videos || Vue.set(t, "videos", []),
                                    t.videos.unshift({
                                        server: this.server.name,
                                        header: this.header.name,
                                        drmuuid: this.drmuuiselected.name,
                                        drmlicenceuri: this.drmlicenceuriselected.name,
                                        useragent: this.useragent.name,
                                        link: this.link,
                                        lang: this.lang.english_name && "No Language" !== this.lang.english_name ? this.lang.english_name : this.settings.tmdb_lang.english_name,
                                        embed: this.embed,
                                        hls: this.hls,
                                        supported_hosts: this.supported_hosts,
                                        drm: this.drm,
                                    }),
                                    (this.link = ""),
                                    (this.server = ""),
                                    (this.header = ""),
                                    (this.useragent = ""),
                                    (this.video = null),
                                    (this.supported_hosts = !1),
                                    (this.embed = !1),
                                    (this.hls = !1),
                                    (this.drmuuiselected = ""),
                                    (this.drmlicenceuriselected = ""),
                                    (this.drm = !1);
                            }
                        },
                        deleteLinkDownload: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                m(
                                    i.a.mark(function a() {
                                        var r;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            if (((a.prev = 0), !t.id)) {
                                                                a.next = 6;
                                                                break;
                                                            }
                                                            return (a.next = 4), axios.delete(url + "/admin/animes/downloads/destroy/" + t.id);
                                                        case 4:
                                                            (r = a.sent), s.showSuccess(r.data.message);
                                                        case 6:
                                                            s.form.anime.seasons[s.selectedSeason].episodes[s.selectedEpisode].downloads.splice(e, 1), (a.next = 12);
                                                            break;
                                                        case 9:
                                                            (a.prev = 9), (a.t0 = a.catch(0)), s.showError();
                                                        case 12:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 9]]
                                        );
                                    })
                                )
                            );
                        },
                        deleteLink: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                m(
                                    i.a.mark(function a() {
                                        var r;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            if (((a.prev = 0), !t.id)) {
                                                                a.next = 6;
                                                                break;
                                                            }
                                                            return (a.next = 4), axios.delete(url + "/admin/animes/videos/destroy/" + t.id);
                                                        case 4:
                                                            (r = a.sent), s.showSuccess(r.data.message);
                                                        case 6:
                                                            s.form.anime.seasons[s.selectedSeason].episodes[s.selectedEpisode].videos.splice(e, 1), (a.next = 12);
                                                            break;
                                                        case 9:
                                                            (a.prev = 9), (a.t0 = a.catch(0)), s.showError();
                                                        case 12:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 9]]
                                        );
                                    })
                                )
                            );
                        },
                        destroyCast: function (t) {
                            var e = this;
                            null !== t.cast &&
                                axios
                                    .delete(url + "/admin/animes/casts/destroy/" + t.id)
                                    .then(function (t) {
                                        return e.showSuccess(t.data.message);
                                    })
                                    .catch();
                        },
                        storeSubstitle: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (
                                                            (s.prev = 0),
                                                            (e.loading = !0),
                                                            (e.substitle = t.target.files[0]),
                                                            (a = new FormData()).append("substitle", e.substitle),
                                                            (s.next = 7),
                                                            axios.post(url + "/admin/substitle/store", a)
                                                        );
                                                    case 7:
                                                        (r = s.sent), (e.linksubstitle = r.data.substitle_path), (e.zip = !0), e.showSuccess(r.data.message), (s.next = 16);
                                                        break;
                                                    case 13:
                                                        (s.prev = 13), (s.t0 = s.catch(0)), e.showError();
                                                    case 16:
                                                        return (s.prev = 16), (e.loading = !1), s.finish(16);
                                                    case 19:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 13, 16, 19]]
                                    );
                                })
                            )();
                        },
                        deleteLinkSubs: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                m(
                                    i.a.mark(function a() {
                                        var r;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            if (((a.prev = 0), !t.id)) {
                                                                a.next = 6;
                                                                break;
                                                            }
                                                            return (a.next = 4), axios.delete(url + "/admin/animes/substitles/destroy/" + t.id);
                                                        case 4:
                                                            (r = a.sent), s.showSuccess(r.data.message);
                                                        case 6:
                                                            s.form.anime.seasons[s.selectedSeason].episodes[s.selectedEpisode].substitles.splice(e, 1), (a.next = 12);
                                                            break;
                                                        case 9:
                                                            (a.prev = 9), (a.t0 = a.catch(0)), s.showError();
                                                        case 12:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 9]]
                                        );
                                    })
                                )
                            );
                        },
                        storeVideoTrailer: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r, n;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (
                                                            (s.prev = 0),
                                                            (a = e.form.anime.name),
                                                            (e.video_trailer = t.target.files[0]),
                                                            (r = new FormData()).append("video", e.video_trailer),
                                                            r.append("movie_title", a.replace(/ /g, "_")),
                                                            (s.next = 8),
                                                            axios.post(url + "/admin/video/store", r, {
                                                                onUploadProgress: function (t) {
                                                                    (e.isuploading = !0), (e.percent = Math.round((t.loaded / t.total) * 100));
                                                                },
                                                            })
                                                        );
                                                    case 8:
                                                        (n = s.sent),
                                                            (e.form.anime.trailer_url = n.data.video_path),
                                                            e.showSuccess(n.data.message),
                                                            console.log(r),
                                                            setTimeout(function () {
                                                                return (e.isuploading = !1);
                                                            }, 2e3),
                                                            (s.next = 19);
                                                        break;
                                                    case 15:
                                                        (s.prev = 15),
                                                            (s.t0 = s.catch(0)),
                                                            e.showError(),
                                                            setTimeout(function () {
                                                                return (e.isuploading = !1);
                                                            }, 2e3);
                                                    case 19:
                                                        return (s.prev = 19), s.finish(19);
                                                    case 21:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 15, 19, 21]]
                                    );
                                })
                            )();
                        },
                        selectSeason: function (t) {
                            (this.selectedSeason = this.form.anime.seasons.indexOf(t)), (this.episode = null), (this.selectedEpisode = -1);
                        },
                        selectEpisode: function (t) {
                            this.selectedEpisode = this.form.anime.seasons[this.selectedSeason].episodes.indexOf(t);
                        },
                        destroyGenre: function (t) {
                            var e = this;
                            null !== t.genre &&
                                axios
                                    .delete(url + "/admin/animes/genres/destroy/" + t.id)
                                    .then(function (t) {
                                        return e.showSuccess(t.data.message);
                                    })
                                    .catch();
                        },
                        getSeason: function () {
                            var t = this;
                            return m(
                                i.a.mark(function e() {
                                    var s, a, r, n, c, d;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (
                                                            (e.prev = 0),
                                                            (e.next = 3),
                                                            http.get(
                                                                "https://api.themoviedb.org/3/tv/" + t.form.anime.tmdb_id + "/season/" + t.addseason + "?api_key=" + t.settings.tmdb_api_key + "&language=" + t.settings.tmdb_lang.iso_639_1
                                                            )
                                                        );
                                                    case 3:
                                                        ((s = e.sent).data = _.mapKeys(s.data, function (t, e) {
                                                            return "id" == e ? "tmdb_id" : e;
                                                        })),
                                                            s.data.poster_path && (s.data.poster_path = t.settings.imdb_cover_path + s.data.poster_path),
                                                            (a = l(s.data.episodes.entries()));
                                                        try {
                                                            for (a.s(); !(r = a.n()).done; )
                                                                (n = o(r.value, 2)),
                                                                    (c = n[0]),
                                                                    (d = n[1]),
                                                                    (s.data.episodes[c] = _.mapKeys(d, function (t, e) {
                                                                        return "id" == e ? "tmdb_id" : e;
                                                                    })),
                                                                    d.still_path && (s.data.episodes[c].still_path = t.settings.imdb_cover_path + d.still_path);
                                                        } catch (t) {
                                                            a.e(t);
                                                        } finally {
                                                            a.f();
                                                        }
                                                        t.form.anime.seasons.findIndex(function (t) {
                                                            return t.season_number === s.data.season_number;
                                                        }) < 0
                                                            ? (t.form.anime.seasons.push(s.data), t.showSuccess())
                                                            : t.showError("this season already exists"),
                                                            (t.addseason = ""),
                                                            (e.next = 16);
                                                        break;
                                                    case 13:
                                                        (e.prev = 13), (e.t0 = e.catch(0)), t.showError();
                                                    case 16:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 13]]
                                    );
                                })
                            )();
                        },
                        destroySeason: function () {
                            var t = this;
                            this.showConfirm(
                                m(
                                    i.a.mark(function e() {
                                        var s, a;
                                        return i.a.wrap(
                                            function (e) {
                                                for (;;)
                                                    switch ((e.prev = e.next)) {
                                                        case 0:
                                                            if (!(s = t.form.anime.seasons[t.selectedSeason]).id) {
                                                                e.next = 12;
                                                                break;
                                                            }
                                                            return (e.prev = 2), (e.next = 5), axios.delete(url + "/admin/animes/seasons/destroy/" + s.id);
                                                        case 5:
                                                            (a = e.sent), t.showSuccess(a.data.message), (e.next = 12);
                                                            break;
                                                        case 9:
                                                            (e.prev = 9), (e.t0 = e.catch(2)), t.showError();
                                                        case 12:
                                                            t.form.anime.seasons.splice(t.selectedSeason, 1), (t.season = null), (t.episode = null), (t.selectedSeason = -1), (t.selectedEpisode = -1);
                                                        case 17:
                                                        case "end":
                                                            return e.stop();
                                                    }
                                            },
                                            e,
                                            null,
                                            [[2, 9]]
                                        );
                                    })
                                )
                            );
                        },
                        getEpisode: function () {
                            var t = this;
                            return m(
                                i.a.mark(function e() {
                                    var s, a;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (
                                                            (e.prev = 0),
                                                            (e.next = 3),
                                                            http.get(
                                                                "https://api.themoviedb.org/3/tv/" +
                                                                    t.tmdb +
                                                                    "/season/" +
                                                                    t.form.anime.seasons[t.selectedSeason].season_number +
                                                                    "/episode/" +
                                                                    t.addepisode +
                                                                    "?api_key=" +
                                                                    t.settings.tmdb_api_key +
                                                                    "&language=" +
                                                                    t.settings.tmdb_lang.iso_639_1
                                                            )
                                                        );
                                                    case 3:
                                                        (s = e.sent),
                                                            t.form.anime.seasons[t.selectedSeason].episodes.findIndex(function (t) {
                                                                return t.episode_number === s.data.episode_number;
                                                            }) < 0
                                                                ? ((a = _.mapKeys(s.data, function (t, e) {
                                                                      return "id" == e ? "tmdb_id" : e;
                                                                  })).still_path && (a.still_path = t.settings.imdb_cover_path + a.still_path),
                                                                  t.form.anime.seasons[t.selectedSeason].episodes.push(a),
                                                                  t.showSuccess())
                                                                : t.showError("this episode already exists"),
                                                            (t.addepisode = ""),
                                                            (e.next = 12);
                                                        break;
                                                    case 9:
                                                        (e.prev = 9), (e.t0 = e.catch(0)), t.showError();
                                                    case 12:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 9]]
                                    );
                                })
                            )();
                        },
                        send: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (
                                                            (e.form.anime = t),
                                                            console.log(t.name),
                                                            (s.prev = 2),
                                                            (a = { headers: { Authorization: "key=" + e.settings.authorization } }),
                                                            (r = { to: "/topics/all", data: { title: t.name, message: t.overview, image: t.backdrop_path, type: "2", tmdb: t.id } }),
                                                            (s.next = 7),
                                                            http.post("https://fcm.googleapis.com/fcm/send", r, a)
                                                        );
                                                    case 7:
                                                        e.showSuccess(), (e.title = ""), (e.body = ""), (e.image = ""), (s.next = 16);
                                                        break;
                                                    case 13:
                                                        (s.prev = 13), (s.t0 = s.catch(2)), e.showError();
                                                    case 16:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[2, 13]]
                                    );
                                })
                            )();
                        },
                        sendEpisode: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (
                                                            (s.prev = 0),
                                                            (a = { headers: { Authorization: "key=" + e.settings.authorization } }),
                                                            (r = { to: "/topics/all", data: { title: t.name, image: t.still_path, type: "episode_anime", link: "", tmdb: t.id, message: t.overview } }),
                                                            (s.next = 5),
                                                            http.post("https://fcm.googleapis.com/fcm/send", r, a)
                                                        );
                                                    case 5:
                                                        e.showSuccess(), (e.title = ""), (e.body = ""), (e.image = ""), (e.link = ""), (e.tmdb = ""), (s.next = 16);
                                                        break;
                                                    case 13:
                                                        (s.prev = 13), (s.t0 = s.catch(0)), e.showError();
                                                    case 16:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 13]]
                                    );
                                })
                            )();
                        },
                        destroyNetwork: function (t) {
                            var e = this;
                            null !== t.network &&
                                axios
                                    .delete(url + "/admin/animes/networks/destroy/" + t.id)
                                    .then(function (t) {
                                        return e.showSuccess(t.data.message);
                                    })
                                    .catch();
                        },
                        destroySubs: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                m(
                                    i.a.mark(function a() {
                                        var r;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            if (((a.prev = 0), !t.id)) {
                                                                a.next = 6;
                                                                break;
                                                            }
                                                            return (a.next = 4), axios.delete(url + "/admin/animes/substitles/destroy/" + t.id);
                                                        case 4:
                                                            (r = a.sent), s.showSuccess(r.data.message);
                                                        case 6:
                                                            s.form.anime.seasons[s.selectedSeason].episodes[s.selectedEpisode].substitles.splice(e, 1), (a.next = 12);
                                                            break;
                                                        case 9:
                                                            (a.prev = 9), (a.t0 = a.catch(0)), s.showError();
                                                        case 12:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 9]]
                                        );
                                    })
                                )
                            );
                        },
                        destroyEpisode: function () {
                            var t = this;
                            this.showConfirm(
                                m(
                                    i.a.mark(function e() {
                                        var s, a;
                                        return i.a.wrap(
                                            function (e) {
                                                for (;;)
                                                    switch ((e.prev = e.next)) {
                                                        case 0:
                                                            if (!(s = t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode]).id) {
                                                                e.next = 12;
                                                                break;
                                                            }
                                                            return (e.prev = 2), (e.next = 5), axios.delete(url + "/admin/animes/episodes/destroy/" + s.id);
                                                        case 5:
                                                            (a = e.sent), t.showSuccess(a.data.message), (e.next = 12);
                                                            break;
                                                        case 9:
                                                            (e.prev = 9), (e.t0 = e.catch(2)), t.showError();
                                                        case 12:
                                                            t.form.anime.seasons[t.selectedSeason].episodes.splice(t.selectedEpisode, 1), (t.episode = null), (t.selectedEpisode = -1);
                                                        case 15:
                                                        case "end":
                                                            return e.stop();
                                                    }
                                            },
                                            e,
                                            null,
                                            [[2, 9]]
                                        );
                                    })
                                )
                            );
                        },
                    },
                    computed: {
                        filteredAnimes: function () {
                            var t = this;
                            return this.animes.filter(function (e) {
                                return e.name.toLowerCase().match(t.search.toLowerCase());
                            });
                        },
                    },
                    mixins: [r.a, n.a],
                },
                v = (s(334), s(4)),
                f = Object(v.a)(
                    p,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-md-12 grid-margin" }, [
                                s("div", { staticClass: "d-flex justify-content-between flex-wrap" }, [
                                    t._m(0),
                                    t._v(" "),
                                    s("div", { staticClass: "d-flex justify-content-between align-items-end flex-wrap" }, [
                                        t.index
                                            ? s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.create();
                                                          },
                                                      },
                                                  },
                                                  [t._v("Add Anime")]
                                              )
                                            : t._e(),
                                        t._v(" "),
                                        t.index
                                            ? t._e()
                                            : s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.back();
                                                          },
                                                      },
                                                  },
                                                  [t._v("Back")]
                                              ),
                                    ]),
                                ]),
                            ]),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-md-6 grid-margin" }, [
                                      s("ul", { staticClass: "navbar-nav mr-lg-4 w-100" }, [
                                          s("li", { staticClass: "nav-item nav-search d-none d-lg-block w-100" }, [
                                              s("div", { staticClass: "input-group" }, [
                                                  t._m(1),
                                                  t._v(" "),
                                                  s("input", {
                                                      directives: [{ name: "model", rawName: "v-model", value: t.search, expression: "search" }],
                                                      staticClass: "form-control",
                                                      attrs: { type: "text", placeholder: "Search now", "aria-label": "search", "aria-describedby": "search" },
                                                      domProps: { value: t.search },
                                                      on: {
                                                          keyup: t.searchUnit,
                                                          input: function (e) {
                                                              e.target.composing || (t.search = e.target.value);
                                                          },
                                                      },
                                                  }),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s(
                                                  "div",
                                                  { staticClass: "table-responsive" },
                                                  [
                                                      s("table", { staticClass: "table", attrs: { "aria-describedby": "table animes", id: "table animes" } }, [
                                                          t._m(2),
                                                          t._v(" "),
                                                          s(
                                                              "tbody",
                                                              t._l(t.animes.data, function (e) {
                                                                  return s("tr", { key: e.id }, [
                                                                      s("td", { staticClass: "text-center" }, [s("img", { attrs: { src: e.poster_path, alt: "poster path", height: "80", width: "80" } })]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.id))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.tmdb_id))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.name))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.vote_average))]),
                                                                      t._v(" "),
                                                                      1 === e.active
                                                                          ? s("td", { staticClass: "text-center" }, [s("label", { staticClass: "badge badge-success" }, [t._v("Visible")])])
                                                                          : s("td", { staticClass: "text-center" }, [s("label", { staticClass: "badge badge-danger" }, [t._v("Invisible")])]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [
                                                                          s("div", { staticClass: "list-icons" }, [
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item mr-2",
                                                                                      attrs: { "data-original-title": "Send Notification", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.send(e);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-bell-ring menu-icon", staticStyle: { color: "#4d83ff" } })]
                                                                              ),
                                                                              t._v(" "),
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item mr-2",
                                                                                      attrs: { "data-original-title": "Edit", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.editing(e);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-pencil fa-lg", staticStyle: { color: "#4d83ff" } })]
                                                                              ),
                                                                              t._v(" "),
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item text-warning",
                                                                                      attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.destroy(e.id, t.index);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                              ),
                                                                          ]),
                                                                      ]),
                                                                  ]);
                                                              }),
                                                              0
                                                          ),
                                                      ]),
                                                      t._v(" "),
                                                      s("pagination", { staticClass: "mb-0", attrs: { data: t.animes, "show-disabled": !1, limit: 5, size: t.size, align: t.align }, on: { "pagination-change-page": t.getResults } }),
                                                  ],
                                                  1
                                              ),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.add || t.edit
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s("section", [
                                                  s("div", { staticClass: "poster-container" }, [
                                                      t.form.anime.poster_path
                                                          ? s("img", { staticClass: "poster", attrs: { src: t.form.anime.poster_path, alt: "anime poster", "data-loaded": "true", height: "316", width: "210" } })
                                                          : t._e(),
                                                      t._v(" "),
                                                      s("div", { staticClass: "many-inputs" }, [
                                                          s("div", { staticClass: "input-container" }, [
                                                              s(
                                                                  "div",
                                                                  { staticClass: "form-group" },
                                                                  [
                                                                      s("autocomplete", {
                                                                          attrs: { search: t.getSearchByName, placeholder: "Search Anime by Name", "aria-label": "Search Anime by Name", "get-result-value": t.getResultValue },
                                                                          on: { submit: t.onSubmit },
                                                                      }),
                                                                  ],
                                                                  1
                                                              ),
                                                              t._v(" "),
                                                              t.add
                                                                  ? s("div", { staticClass: "form-group" }, [
                                                                        s("div", { staticClass: "input-group" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.tmdb, expression: "tmdb" }],
                                                                                staticClass: "form-control",
                                                                                attrs: { type: "text", placeholder: "Example : tt7286456", "aria-label": "Search Movie" },
                                                                                domProps: { value: t.tmdb },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || (t.tmdb = e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "input-group-append" }, [
                                                                                s(
                                                                                    "button",
                                                                                    {
                                                                                        staticClass: "btn btn-sm btn-primary",
                                                                                        attrs: { type: "type", disabled: !t.settings.tmdb_api_key },
                                                                                        on: {
                                                                                            click: function (e) {
                                                                                                return t.getSerie_Find();
                                                                                            },
                                                                                        },
                                                                                    },
                                                                                    [t._v("Search")]
                                                                                ),
                                                                            ]),
                                                                        ]),
                                                                    ])
                                                                  : t._e(),
                                                              t._v(" "),
                                                              t.edit
                                                                  ? s("div", { staticClass: "form-group" }, [
                                                                        s("div", { staticClass: "input-group" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.tmdb, expression: "tmdb" }],
                                                                                staticClass: "form-control",
                                                                                attrs: { type: "text", placeholder: "Example : tt7286456", "aria-label": "Search Movie" },
                                                                                domProps: { value: t.tmdb },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || (t.tmdb = e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "input-group-append" }, [
                                                                                s(
                                                                                    "button",
                                                                                    {
                                                                                        staticClass: "btn btn-sm btn-primary",
                                                                                        attrs: { type: "type", disabled: !t.settings.tmdb_api_key },
                                                                                        on: {
                                                                                            click: function (e) {
                                                                                                return t.getanime();
                                                                                            },
                                                                                        },
                                                                                    },
                                                                                    [t._v("Search")]
                                                                                ),
                                                                            ]),
                                                                        ]),
                                                                    ])
                                                                  : t._e(),
                                                              t._v(" "),
                                                              s("div", { staticClass: "input-container" }, [
                                                                  s("div", { staticClass: "row" }, [
                                                                      s("div", { staticClass: "col-md-3" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "name" } }, [t._v("Serie Name")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.anime.name, expression: "form.anime.name" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "name", type: "text" },
                                                                                  domProps: { value: t.form.anime.name },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.anime, "name", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-3" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "imdb_external_id" } }, [t._v("External IMDB ID")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.anime.imdb_external_id, expression: "form.anime.imdb_external_id" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "imdb_external_id", type: "text" },
                                                                                  domProps: { value: t.form.anime.imdb_external_id },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.anime, "imdb_external_id", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-3" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "original_name" } }, [t._v("Original title")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.anime.original_name, expression: "form.anime.original_name" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "original_name", type: "text" },
                                                                                  domProps: { value: t.form.anime.original_name },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.anime, "original_name", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-3" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "subtitle" } }, [t._v("Sub Title")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.anime.subtitle, expression: "form.anime.subtitle" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "subtitle", type: "text" },
                                                                                  domProps: { value: t.form.anime.subtitle },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.anime, "subtitle", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                  ]),
                                                              ]),
                                                              t._v(" "),
                                                              s("div", { staticClass: "input-container" }, [
                                                                  s("div", { staticClass: "row" }, [
                                                                      s("div", { staticClass: "col-md-4" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                  s("input", {
                                                                                      directives: [{ name: "model", rawName: "v-model", value: t.form.anime.premuim, expression: "form.anime.premuim" }],
                                                                                      staticClass: "custom-control-input",
                                                                                      attrs: { placeholder: "Premuim", id: "premuim", type: "checkbox" },
                                                                                      domProps: { checked: Array.isArray(t.form.anime.premuim) ? t._i(t.form.anime.premuim, null) > -1 : t.form.anime.premuim },
                                                                                      on: {
                                                                                          change: function (e) {
                                                                                              var s = t.form.anime.premuim,
                                                                                                  a = e.target,
                                                                                                  i = !!a.checked;
                                                                                              if (Array.isArray(s)) {
                                                                                                  var r = t._i(s, null);
                                                                                                  a.checked
                                                                                                      ? r < 0 && t.$set(t.form.anime, "premuim", s.concat([null]))
                                                                                                      : r > -1 && t.$set(t.form.anime, "premuim", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                              } else t.$set(t.form.anime, "premuim", i);
                                                                                          },
                                                                                      },
                                                                                  }),
                                                                                  t._v(" "),
                                                                                  s("label", { staticClass: "custom-control-label", attrs: { for: "premuim" } }, [
                                                                                      t._v("\n                              Premuim\n                              Only\n                            "),
                                                                                  ]),
                                                                              ]),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      t.edit
                                                                          ? s("div", { staticClass: "col-md-3" }, [
                                                                                s("div", { staticClass: "form-group" }, [
                                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                        s("input", {
                                                                                            directives: [{ name: "model", rawName: "v-model", value: t.form.anime.active, expression: "form.anime.active" }],
                                                                                            staticClass: "custom-control-input",
                                                                                            attrs: { id: "active", type: "checkbox" },
                                                                                            domProps: { checked: Array.isArray(t.form.anime.active) ? t._i(t.form.anime.active, null) > -1 : t.form.anime.active },
                                                                                            on: {
                                                                                                change: function (e) {
                                                                                                    var s = t.form.anime.active,
                                                                                                        a = e.target,
                                                                                                        i = !!a.checked;
                                                                                                    if (Array.isArray(s)) {
                                                                                                        var r = t._i(s, null);
                                                                                                        a.checked
                                                                                                            ? r < 0 && t.$set(t.form.anime, "active", s.concat([null]))
                                                                                                            : r > -1 && t.$set(t.form.anime, "active", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                                    } else t.$set(t.form.anime, "active", i);
                                                                                                },
                                                                                            },
                                                                                        }),
                                                                                        t._v(" "),
                                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "active" } }, [t._v("Active")]),
                                                                                    ]),
                                                                                ]),
                                                                            ])
                                                                          : t._e(),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-4" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                  s("input", {
                                                                                      directives: [{ name: "model", rawName: "v-model", value: t.form.anime.newEpisodes, expression: "form.anime.newEpisodes" }],
                                                                                      staticClass: "custom-control-input",
                                                                                      attrs: { id: "newEpisodes", type: "checkbox" },
                                                                                      domProps: { checked: Array.isArray(t.form.anime.newEpisodes) ? t._i(t.form.anime.newEpisodes, null) > -1 : t.form.anime.newEpisodes },
                                                                                      on: {
                                                                                          change: function (e) {
                                                                                              var s = t.form.anime.newEpisodes,
                                                                                                  a = e.target,
                                                                                                  i = !!a.checked;
                                                                                              if (Array.isArray(s)) {
                                                                                                  var r = t._i(s, null);
                                                                                                  a.checked
                                                                                                      ? r < 0 && t.$set(t.form.anime, "newEpisodes", s.concat([null]))
                                                                                                      : r > -1 && t.$set(t.form.anime, "newEpisodes", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                              } else t.$set(t.form.anime, "newEpisodes", i);
                                                                                          },
                                                                                      },
                                                                                  }),
                                                                                  t._v(" "),
                                                                                  s("label", { staticClass: "custom-control-label", attrs: { for: "newEpisodes" } }, [t._v("Has New episodes ?")]),
                                                                              ]),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-3" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                  s("input", {
                                                                                      directives: [{ name: "model", rawName: "v-model", value: t.form.anime.pinned, expression: "form.anime.pinned" }],
                                                                                      staticClass: "custom-control-input",
                                                                                      attrs: { id: "pinned", type: "checkbox" },
                                                                                      domProps: { checked: Array.isArray(t.form.anime.pinned) ? t._i(t.form.anime.pinned, null) > -1 : t.form.anime.pinned },
                                                                                      on: {
                                                                                          change: function (e) {
                                                                                              var s = t.form.anime.pinned,
                                                                                                  a = e.target,
                                                                                                  i = !!a.checked;
                                                                                              if (Array.isArray(s)) {
                                                                                                  var r = t._i(s, null);
                                                                                                  a.checked
                                                                                                      ? r < 0 && t.$set(t.form.anime, "pinned", s.concat([null]))
                                                                                                      : r > -1 && t.$set(t.form.anime, "pinned", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                              } else t.$set(t.form.anime, "pinned", i);
                                                                                          },
                                                                                      },
                                                                                  }),
                                                                                  t._v(" "),
                                                                                  s("label", { staticClass: "custom-control-label", attrs: { for: "pinned" } }, [t._v("Pinned")]),
                                                                              ]),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      t.add
                                                                          ? s("div", { staticClass: "col-md-4" }, [
                                                                                s("div", { staticClass: "form-group" }, [
                                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                        s("input", {
                                                                                            directives: [{ name: "model", rawName: "v-model", value: t.form.notification, expression: "form.notification" }],
                                                                                            staticClass: "custom-control-input",
                                                                                            attrs: { id: "notification", type: "checkbox" },
                                                                                            domProps: { checked: Array.isArray(t.form.notification) ? t._i(t.form.notification, null) > -1 : t.form.notification },
                                                                                            on: {
                                                                                                change: function (e) {
                                                                                                    var s = t.form.notification,
                                                                                                        a = e.target,
                                                                                                        i = !!a.checked;
                                                                                                    if (Array.isArray(s)) {
                                                                                                        var r = t._i(s, null);
                                                                                                        a.checked
                                                                                                            ? r < 0 && t.$set(t.form, "notification", s.concat([null]))
                                                                                                            : r > -1 && t.$set(t.form, "notification", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                                    } else t.$set(t.form, "notification", i);
                                                                                                },
                                                                                            },
                                                                                        }),
                                                                                        t._v(" "),
                                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "notification" } }, [t._v("Push notification")]),
                                                                                    ]),
                                                                                ]),
                                                                            ])
                                                                          : t._e(),
                                                                  ]),
                                                              ]),
                                                              t._v(" "),
                                                              s("div", { staticClass: "input-container" }, [
                                                                  s("div", { staticClass: "row" }, [
                                                                      s("div", { staticClass: "col-md-6" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "poster_path" } }, [t._v("Poster Path")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.anime.poster_path, expression: "form.anime.poster_path" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "poster_path", name: "poster_path", type: "text" },
                                                                                  domProps: { value: t.form.anime.poster_path },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.anime, "poster_path", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-6" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", [t._v("Poster upload")]),
                                                                              t._v(" "),
                                                                              s("input", { staticClass: "file-upload-default" }),
                                                                              t._v(" "),
                                                                              s("div", { staticClass: "input-group col-xs-12" }, [
                                                                                  s("input", {
                                                                                      staticClass: "form-control file-upload-info",
                                                                                      attrs: { id: "poster", placeholder: "Upload Image", type: "file" },
                                                                                      on: { change: t.storePoster },
                                                                                  }),
                                                                                  t._v(" "),
                                                                                  t._m(3),
                                                                              ]),
                                                                          ]),
                                                                      ]),
                                                                  ]),
                                                              ]),
                                                              t._v(" "),
                                                              s("div", { staticClass: "row" }, [
                                                                  s("div", { staticClass: "col-md-12" }, [
                                                                      s(
                                                                          "div",
                                                                          { staticClass: "form-group" },
                                                                          [
                                                                              s("multiselect", {
                                                                                  attrs: {
                                                                                      "clear-on-select": !1,
                                                                                      "close-on-select": !1,
                                                                                      hideSelected: !0,
                                                                                      multiple: !0,
                                                                                      options: t.options,
                                                                                      "preserve-search": !0,
                                                                                      label: "name",
                                                                                      placeholder: "Select Genre",
                                                                                      "track-by": "name",
                                                                                  },
                                                                                  on: { remove: t.destroyGenre },
                                                                                  model: {
                                                                                      value: t.form.anime.genres,
                                                                                      callback: function (e) {
                                                                                          t.$set(t.form.anime, "genres", e);
                                                                                      },
                                                                                      expression: "form.anime.genres",
                                                                                  },
                                                                              }),
                                                                          ],
                                                                          1
                                                                      ),
                                                                  ]),
                                                              ]),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-6" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "poster_path" } }, [t._v("Backdrop Path")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.anime.backdrop_path, expression: "form.anime.backdrop_path" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "backdrop_path", name: "backdrop_path", type: "text" },
                                                                  domProps: { value: t.form.anime.backdrop_path },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.anime, "backdrop_path", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                      t._v(" "),
                                                      s("div", { staticClass: "col-md-6" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", [t._v("Backdrop upload")]),
                                                              t._v(" "),
                                                              s("input", { staticClass: "file-upload-default" }),
                                                              t._v(" "),
                                                              s("div", { staticClass: "input-group col-xs-12" }, [
                                                                  s("input", { staticClass: "form-control file-upload-info", attrs: { id: "backdrop", placeholder: "Upload Image", type: "file" }, on: { change: t.storeBackdrop } }),
                                                                  t._v(" "),
                                                                  t._m(4),
                                                              ]),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      t._m(5),
                                                      t._v(" "),
                                                      s("div", { staticClass: "row" }, [
                                                          s("div", { staticClass: "col-md-12" }, [
                                                              s(
                                                                  "div",
                                                                  { staticClass: "form-group" },
                                                                  [
                                                                      s("multiselect", {
                                                                          attrs: {
                                                                              "clear-on-select": !1,
                                                                              "close-on-select": !1,
                                                                              hideSelected: !0,
                                                                              multiple: !0,
                                                                              options: t.optionsnetwork,
                                                                              "preserve-search": !0,
                                                                              "open-direction": "bottom",
                                                                              noResult: "No Cast found. Consider changing the search query",
                                                                              "track-by": "id",
                                                                              label: "name",
                                                                              placeholder: "Select Network",
                                                                          },
                                                                          on: { remove: t.destroyNetwork },
                                                                          model: {
                                                                              value: t.form.anime.networks,
                                                                              callback: function (e) {
                                                                                  t.$set(t.form.anime, "networks", e);
                                                                              },
                                                                              expression: "form.anime.networks",
                                                                          },
                                                                      }),
                                                                  ],
                                                                  1
                                                              ),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      t._m(6),
                                                      t._v(" "),
                                                      s("div", { staticClass: "row" }, [
                                                          s("div", { staticClass: "col-md-4" }, [
                                                              s("div", { staticClass: "form-group" }, [
                                                                  s("label", { attrs: { for: "preview_path" } }, [t._v("Youtube Trailer ID")]),
                                                                  t._v(" "),
                                                                  s("input", {
                                                                      directives: [{ name: "model", rawName: "v-model", value: t.form.anime.preview_path, expression: "form.anime.preview_path" }],
                                                                      staticClass: "form-control",
                                                                      attrs: { id: "preview_path", type: "text" },
                                                                      domProps: { value: t.form.anime.preview_path },
                                                                      on: {
                                                                          input: function (e) {
                                                                              e.target.composing || t.$set(t.form.anime, "preview_path", e.target.value);
                                                                          },
                                                                      },
                                                                  }),
                                                              ]),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "col-md-4" }, [
                                                              s("div", { staticClass: "form-group" }, [
                                                                  s("label", { attrs: { for: "trailer_url" } }, [t._v("Youtube Trailer Self Hosted")]),
                                                                  t._v(" "),
                                                                  s("input", {
                                                                      directives: [{ name: "model", rawName: "v-model", value: t.form.anime.trailer_url, expression: "form.anime.trailer_url" }],
                                                                      staticClass: "form-control",
                                                                      attrs: { id: "trailer_url", type: "text" },
                                                                      domProps: { value: t.form.anime.trailer_url },
                                                                      on: {
                                                                          input: function (e) {
                                                                              e.target.composing || t.$set(t.form.anime, "trailer_url", e.target.value);
                                                                          },
                                                                      },
                                                                  }),
                                                              ]),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "col-md-4" }, [
                                                              s("div", { staticClass: "form-group" }, [
                                                                  s("label", [t._v("Upload Trailer")]),
                                                                  t._v(" "),
                                                                  s("input", { staticClass: "file-upload-default" }),
                                                                  t._v(" "),
                                                                  s("div", { staticClass: "input-group col-xs-12" }, [
                                                                      s("input", {
                                                                          staticClass: "form-control file-upload-info",
                                                                          attrs: { id: "video_trailer", placeholder: "Upload Image", type: "file" },
                                                                          on: { change: t.storeVideoTrailer },
                                                                      }),
                                                                      t._v(" "),
                                                                      t._m(7),
                                                                  ]),
                                                              ]),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      t._m(8),
                                                      t._v(" "),
                                                      s("div", { staticClass: "row" }, [
                                                          s("div", { staticClass: "col-md-12" }, [
                                                              s(
                                                                  "div",
                                                                  { staticClass: "form-group" },
                                                                  [
                                                                      s("multiselect", {
                                                                          attrs: {
                                                                              "clear-on-select": !1,
                                                                              "close-on-select": !1,
                                                                              hideSelected: !0,
                                                                              multiple: !0,
                                                                              options: t.optionscast,
                                                                              "preserve-search": !0,
                                                                              "open-direction": "bottom",
                                                                              noResult: "No Cast found. Consider changing the search query",
                                                                              "track-by": "id",
                                                                              label: "name",
                                                                              placeholder: "Select Genre",
                                                                          },
                                                                          on: { remove: t.destroyCast, "search-change": t.onLaunchSearchCasters },
                                                                          model: {
                                                                              value: t.form.anime.casterslist,
                                                                              callback: function (e) {
                                                                                  t.$set(t.form.anime, "casterslist", e);
                                                                              },
                                                                              expression: "form.anime.casterslist",
                                                                          },
                                                                      }),
                                                                  ],
                                                                  1
                                                              ),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "overview" } }, [t._v("Details")]),
                                                              t._v(" "),
                                                              s("textarea", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.anime.overview, expression: "form.anime.overview" }],
                                                                  staticClass: "form-control pb-3",
                                                                  attrs: { id: "overview", rows: "6", type: "text" },
                                                                  domProps: { value: t.form.anime.overview },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.anime, "overview", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-4" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "release_date" } }, [t._v("Release Date")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.anime.first_air_date, expression: "form.anime.first_air_date" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "release_date", type: "date" },
                                                                  domProps: { value: t.form.anime.first_air_date },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.anime, "first_air_date", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                      t._v(" "),
                                                      s("div", { staticClass: "col-md-4" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "preview_path" } }, [t._v("Youtube Trailer ID")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.anime.preview_path, expression: "form.anime.preview_path" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "preview_path", type: "text" },
                                                                  domProps: { value: t.form.anime.preview_path },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.anime, "preview_path", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                      t._v(" "),
                                                      s("div", { staticClass: "col-md-4" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "vote_average" } }, [t._v("Vote Average")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.anime.vote_average, expression: "form.anime.vote_average" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "vote_average", type: "text" },
                                                                  domProps: { value: t.form.anime.vote_average },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.anime, "vote_average", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-6" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "vote_count" } }, [t._v("Vote Count")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.anime.vote_count, expression: "form.anime.vote_count" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "vote_count", type: "text" },
                                                                  domProps: { value: t.form.anime.vote_count },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.anime, "vote_count", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                      t._v(" "),
                                                      s("div", { staticClass: "col-md-6" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "popularity" } }, [t._v("Popularity")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.anime.popularity, expression: "form.anime.popularity" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "popularity", type: "text" },
                                                                  domProps: { value: t.form.anime.popularity },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.anime, "popularity", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s(
                                                      "div",
                                                      { staticClass: "row" },
                                                      [
                                                          s(
                                                              "div",
                                                              { staticClass: "col-md-6" },
                                                              [
                                                                  s("div", { staticClass: "input-group" }, [
                                                                      s("input", {
                                                                          directives: [{ name: "model", rawName: "v-model", value: t.addseason, expression: "addseason" }],
                                                                          staticClass: "form-control input",
                                                                          attrs: { type: "text", placeholder: "Season number" },
                                                                          domProps: { value: t.addseason },
                                                                          on: {
                                                                              input: function (e) {
                                                                                  e.target.composing || (t.addseason = e.target.value);
                                                                              },
                                                                          },
                                                                      }),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "input-group-btn" }, [
                                                                          s(
                                                                              "button",
                                                                              {
                                                                                  staticClass: "btn btn-primary ml-2",
                                                                                  attrs: { type: "submit" },
                                                                                  on: {
                                                                                      click: function (e) {
                                                                                          return e.preventDefault(), t.getSeason();
                                                                                      },
                                                                                  },
                                                                              },
                                                                              [t._v("Add from TMDB")]
                                                                          ),
                                                                          t._v(" "),
                                                                          s(
                                                                              "button",
                                                                              {
                                                                                  staticClass: "btn btn-primary ml-2",
                                                                                  attrs: { type: "submit" },
                                                                                  on: {
                                                                                      click: function (e) {
                                                                                          t.showModalSeason = !0;
                                                                                      },
                                                                                  },
                                                                              },
                                                                              [t._v("Add Custom Season")]
                                                                          ),
                                                                      ]),
                                                                  ]),
                                                                  t._v(" "),
                                                                  s(
                                                                      "Modal",
                                                                      {
                                                                          attrs: { title: "Add New Season" },
                                                                          model: {
                                                                              value: t.showModalSeason,
                                                                              callback: function (e) {
                                                                                  t.showModalSeason = e;
                                                                              },
                                                                              expression: "showModalSeason",
                                                                          },
                                                                      },
                                                                      [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "season_number" } }, [t._v("Season Number")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.customSeason.season_number, expression: "customSeason.season_number" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "season_number", type: "text" },
                                                                                  domProps: { value: t.customSeason.season_number },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.customSeason, "season_number", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                          t._v(" "),
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "season_number" } }, [t._v("Season Name")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.customSeason.name, expression: "customSeason.name" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "name", type: "text" },
                                                                                  domProps: { value: t.customSeason.name },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.customSeason, "name", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                          t._v(" "),
                                                                          s("label", { attrs: { for: "seasonoverview" } }, [t._v("Season Overview")]),
                                                                          t._v(" "),
                                                                          s("textarea", {
                                                                              directives: [{ name: "model", rawName: "v-model", value: t.customSeason.overview, expression: "customSeason.overview" }],
                                                                              staticClass: "form-control",
                                                                              attrs: { id: "seasonoverview", required: "" },
                                                                              domProps: { value: t.customSeason.overview },
                                                                              on: {
                                                                                  input: function (e) {
                                                                                      e.target.composing || t.$set(t.customSeason, "overview", e.target.value);
                                                                                  },
                                                                              },
                                                                          }),
                                                                          t._v(" "),
                                                                          s("div", { staticClass: "input-group" }, [
                                                                              s("div", { staticClass: "input-group-btn" }, [
                                                                                  s(
                                                                                      "button",
                                                                                      {
                                                                                          staticClass: "btn btn-primary ml-2",
                                                                                          attrs: { type: "submit" },
                                                                                          on: {
                                                                                              click: function (e) {
                                                                                                  return e.preventDefault(), t.addNewSeason();
                                                                                              },
                                                                                          },
                                                                                      },
                                                                                      [t._v("Save")]
                                                                                  ),
                                                                              ]),
                                                                          ]),
                                                                      ]
                                                                  ),
                                                                  t._v(" "),
                                                                  s(
                                                                      "div",
                                                                      { staticClass: "form-group" },
                                                                      [
                                                                          s("label", { attrs: { for: "season" } }, [t._v("Season")]),
                                                                          t._v(" "),
                                                                          s("multiselect", {
                                                                              attrs: {
                                                                                  "deselect-label": "Can't remove this value",
                                                                                  "track-by": "season_number",
                                                                                  label: "season_number",
                                                                                  placeholder: "Select season",
                                                                                  options: t.form.anime.seasons,
                                                                                  searchable: !0,
                                                                                  "allow-empty": !0,
                                                                              },
                                                                              on: { select: t.selectSeason },
                                                                              scopedSlots: t._u(
                                                                                  [
                                                                                      {
                                                                                          key: "singleLabel",
                                                                                          fn: function (e) {
                                                                                              return [s("span", { staticClass: "option__title ml-1" }, [t._v(t._s(e.option.name))])];
                                                                                          },
                                                                                      },
                                                                                  ],
                                                                                  null,
                                                                                  !1,
                                                                                  3162673735
                                                                              ),
                                                                              model: {
                                                                                  value: t.season,
                                                                                  callback: function (e) {
                                                                                      t.season = e;
                                                                                  },
                                                                                  expression: "season",
                                                                              },
                                                                          }),
                                                                      ],
                                                                      1
                                                                  ),
                                                                  t._v(" "),
                                                                  t.selectedSeason >= 0 && t.form.anime.seasons[t.selectedSeason]
                                                                      ? s("div", { staticClass: "form-group" }, [
                                                                            s("label", { attrs: { for: "seasonoverview" } }, [t._v("Season Id")]),
                                                                            t._v(" "),
                                                                            s("textarea", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.form.anime.seasons[t.selectedSeason].id, expression: "form.anime.seasons[selectedSeason].id" }],
                                                                                staticClass: "form-control",
                                                                                attrs: { id: "seasonoverview", required: "" },
                                                                                domProps: { value: t.form.anime.seasons[t.selectedSeason].id },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || t.$set(t.form.anime.seasons[t.selectedSeason], "id", e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { attrs: { for: "seasonoverview" } }, [t._v("Season Name")]),
                                                                            t._v(" "),
                                                                            s("textarea", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.form.anime.seasons[t.selectedSeason].name, expression: "form.anime.seasons[selectedSeason].name" }],
                                                                                staticClass: "form-control",
                                                                                attrs: { id: "seasonoverview", required: "" },
                                                                                domProps: { value: t.form.anime.seasons[t.selectedSeason].name },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || t.$set(t.form.anime.seasons[t.selectedSeason], "name", e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { attrs: { for: "seasonoverview" } }, [t._v("Season Overview")]),
                                                                            t._v(" "),
                                                                            s("textarea", {
                                                                                directives: [
                                                                                    { name: "model", rawName: "v-model", value: t.form.anime.seasons[t.selectedSeason].overview, expression: "form.anime.seasons[selectedSeason].overview" },
                                                                                ],
                                                                                staticClass: "form-control",
                                                                                attrs: { id: "seasonoverview", required: "" },
                                                                                domProps: { value: t.form.anime.seasons[t.selectedSeason].overview },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || t.$set(t.form.anime.seasons[t.selectedSeason], "overview", e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                        ])
                                                                      : t._e(),
                                                                  t._v(" "),
                                                                  t.selectedSeason >= 0
                                                                      ? s("div", { staticClass: "input-group" }, [
                                                                            t._m(9),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "custom-file" }, [
                                                                                s("input", {
                                                                                    staticClass: "custom-file-input",
                                                                                    attrs: { type: "file", id: "posterSeason" },
                                                                                    on: {
                                                                                        change: function (e) {
                                                                                            return t.storePosterSeason();
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("label", { staticClass: "custom-file-label", attrs: { for: "posterSeason" } }, [
                                                                                    t._v(t._s(t.posterSeason.length ? t.posterSeason.name : "Choose poster season")),
                                                                                ]),
                                                                            ]),
                                                                        ])
                                                                      : t._e(),
                                                                  t._v(" "),
                                                                  t.selectedSeason >= 0
                                                                      ? s("div", { staticClass: "float-right my-2" }, [
                                                                            s(
                                                                                "button",
                                                                                {
                                                                                    staticClass: "btn btn-danger mr-2",
                                                                                    on: {
                                                                                        click: function (e) {
                                                                                            return t.destroySeason();
                                                                                        },
                                                                                    },
                                                                                },
                                                                                [t._v("Delete Season")]
                                                                            ),
                                                                        ])
                                                                      : t._e(),
                                                              ],
                                                              1
                                                          ),
                                                          t._v(" "),
                                                          t.selectedSeason >= 0
                                                              ? [
                                                                    s(
                                                                        "div",
                                                                        { staticClass: "col-md-6" },
                                                                        [
                                                                            s("div", { staticClass: "input-group" }, [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.addepisode, expression: "addepisode" }],
                                                                                    staticClass: "form-control input",
                                                                                    attrs: { type: "text", placeholder: "Episode number" },
                                                                                    domProps: { value: t.addepisode },
                                                                                    on: {
                                                                                        input: function (e) {
                                                                                            e.target.composing || (t.addepisode = e.target.value);
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("div", { staticClass: "input-group-btn" }, [
                                                                                    s(
                                                                                        "button",
                                                                                        {
                                                                                            staticClass: "btn btn-primary ml-2",
                                                                                            attrs: { type: "submit" },
                                                                                            on: {
                                                                                                click: function (e) {
                                                                                                    return e.preventDefault(), t.getEpisode.apply(null, arguments);
                                                                                                },
                                                                                            },
                                                                                        },
                                                                                        [t._v("Add from TMDB")]
                                                                                    ),
                                                                                    t._v(" "),
                                                                                    s(
                                                                                        "button",
                                                                                        {
                                                                                            staticClass: "btn btn-primary ml-2",
                                                                                            attrs: { type: "submit" },
                                                                                            on: {
                                                                                                click: function (e) {
                                                                                                    t.showModal = !0;
                                                                                                },
                                                                                            },
                                                                                        },
                                                                                        [t._v("Add Custom Episode")]
                                                                                    ),
                                                                                ]),
                                                                            ]),
                                                                            t._v(" "),
                                                                            s(
                                                                                "Modal",
                                                                                {
                                                                                    attrs: { title: "Add New Episode" },
                                                                                    model: {
                                                                                        value: t.showModal,
                                                                                        callback: function (e) {
                                                                                            t.showModal = e;
                                                                                        },
                                                                                        expression: "showModal",
                                                                                    },
                                                                                },
                                                                                [
                                                                                    s("label", { attrs: { for: "episode_number" } }, [t._v("Episode Number")]),
                                                                                    t._v(" "),
                                                                                    s("textarea", {
                                                                                        directives: [{ name: "model", rawName: "v-model", value: t.customEpisodes.episode_number, expression: "customEpisodes.episode_number" }],
                                                                                        staticClass: "form-control",
                                                                                        attrs: { id: "episode_number", required: "" },
                                                                                        domProps: { value: t.customEpisodes.episode_number },
                                                                                        on: {
                                                                                            input: function (e) {
                                                                                                e.target.composing || t.$set(t.customEpisodes, "episode_number", e.target.value);
                                                                                            },
                                                                                        },
                                                                                    }),
                                                                                    t._v(" "),
                                                                                    s("label", { attrs: { for: "episode_number" } }, [t._v("Episode Name")]),
                                                                                    t._v(" "),
                                                                                    s("textarea", {
                                                                                        directives: [{ name: "model", rawName: "v-model", value: t.customEpisodes.name, expression: "customEpisodes.name" }],
                                                                                        staticClass: "form-control",
                                                                                        attrs: { id: "name", required: "" },
                                                                                        domProps: { value: t.customEpisodes.name },
                                                                                        on: {
                                                                                            input: function (e) {
                                                                                                e.target.composing || t.$set(t.customEpisodes, "name", e.target.value);
                                                                                            },
                                                                                        },
                                                                                    }),
                                                                                    t._v(" "),
                                                                                    s("label", { attrs: { for: "seasonoverview" } }, [t._v("Episode Overview")]),
                                                                                    t._v(" "),
                                                                                    s("textarea", {
                                                                                        directives: [{ name: "model", rawName: "v-model", value: t.customEpisodes.overview, expression: "customEpisodes.overview" }],
                                                                                        staticClass: "form-control",
                                                                                        attrs: { id: "seasonoverview", required: "" },
                                                                                        domProps: { value: t.customEpisodes.overview },
                                                                                        on: {
                                                                                            input: function (e) {
                                                                                                e.target.composing || t.$set(t.customEpisodes, "overview", e.target.value);
                                                                                            },
                                                                                        },
                                                                                    }),
                                                                                    t._v(" "),
                                                                                    s("div", { staticClass: "input-group" }, [
                                                                                        s("div", { staticClass: "input-group-btn" }, [
                                                                                            s(
                                                                                                "button",
                                                                                                {
                                                                                                    staticClass: "btn btn-primary ml-2",
                                                                                                    attrs: { type: "submit" },
                                                                                                    on: {
                                                                                                        click: function (e) {
                                                                                                            return e.preventDefault(), t.addNewEpisode();
                                                                                                        },
                                                                                                    },
                                                                                                },
                                                                                                [t._v("Save")]
                                                                                            ),
                                                                                        ]),
                                                                                    ]),
                                                                                ]
                                                                            ),
                                                                            t._v(" "),
                                                                            t.selectedSeason >= 0
                                                                                ? s(
                                                                                      "div",
                                                                                      { staticClass: "form-group" },
                                                                                      [
                                                                                          s("label", { attrs: { for: "episode" } }, [t._v("Episode")]),
                                                                                          t._v(" "),
                                                                                          s("multiselect", {
                                                                                              attrs: {
                                                                                                  "deselect-label": "Can't remove this value",
                                                                                                  "track-by": "episode_number",
                                                                                                  label: "episode_number",
                                                                                                  placeholder: "Select episode",
                                                                                                  options: t.form.anime.seasons[t.selectedSeason].episodes,
                                                                                                  searchable: !0,
                                                                                                  "allow-empty": !1,
                                                                                              },
                                                                                              on: { select: t.selectEpisode },
                                                                                              scopedSlots: t._u(
                                                                                                  [
                                                                                                      {
                                                                                                          key: "singleLabel",
                                                                                                          fn: function (e) {
                                                                                                              var a = e.option;
                                                                                                              return [
                                                                                                                  s("img", { staticClass: "option__image", attrs: { src: a.still_path, alt: a.episode_number, height: "90" } }),
                                                                                                                  t._v(" "),
                                                                                                                  s("strong", [t._v(t._s(a.episode_number))]),
                                                                                                                  t._v(":\n                              "),
                                                                                                                  s("strong", [t._v(t._s(a.name))]),
                                                                                                              ];
                                                                                                          },
                                                                                                      },
                                                                                                  ],
                                                                                                  null,
                                                                                                  !1,
                                                                                                  1029030856
                                                                                              ),
                                                                                              model: {
                                                                                                  value: t.episode,
                                                                                                  callback: function (e) {
                                                                                                      t.episode = e;
                                                                                                  },
                                                                                                  expression: "episode",
                                                                                              },
                                                                                          }),
                                                                                      ],
                                                                                      1
                                                                                  )
                                                                                : t._e(),
                                                                            t._v(" "),
                                                                            t.selectedEpisode >= 0 && t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode]
                                                                                ? s("div", { staticClass: "form-group" }, [
                                                                                      s("div", { staticClass: "col-md-6" }, [
                                                                                          s("div", { staticClass: "form-group" }, [
                                                                                              s(
                                                                                                  "button",
                                                                                                  {
                                                                                                      staticClass: "btn btn-primary ml-2",
                                                                                                      on: {
                                                                                                          click: function (e) {
                                                                                                              return t.sendEpisode(t.episode);
                                                                                                          },
                                                                                                      },
                                                                                                  },
                                                                                                  [t._v("Send Notification")]
                                                                                              ),
                                                                                          ]),
                                                                                      ]),
                                                                                      t._v(" "),
                                                                                      s("div", { staticClass: "col-md-6" }, [
                                                                                          s("div", { staticClass: "form-group" }, [
                                                                                              s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                                  s("input", {
                                                                                                      directives: [
                                                                                                          {
                                                                                                              name: "model",
                                                                                                              rawName: "v-model",
                                                                                                              value: t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].hasrecap,
                                                                                                              expression: "form.anime.seasons[selectedSeason].episodes[selectedEpisode].hasrecap",
                                                                                                          },
                                                                                                      ],
                                                                                                      staticClass: "custom-control-input",
                                                                                                      attrs: { id: "hasrecap", type: "checkbox" },
                                                                                                      domProps: {
                                                                                                          checked: Array.isArray(t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].hasrecap)
                                                                                                              ? t._i(t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].hasrecap, null) > -1
                                                                                                              : t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].hasrecap,
                                                                                                      },
                                                                                                      on: {
                                                                                                          change: function (e) {
                                                                                                              var s = t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].hasrecap,
                                                                                                                  a = e.target,
                                                                                                                  i = !!a.checked;
                                                                                                              if (Array.isArray(s)) {
                                                                                                                  var r = t._i(s, null);
                                                                                                                  a.checked
                                                                                                                      ? r < 0 && t.$set(t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode], "hasrecap", s.concat([null]))
                                                                                                                      : r > -1 &&
                                                                                                                        t.$set(
                                                                                                                            t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode],
                                                                                                                            "hasrecap",
                                                                                                                            s.slice(0, r).concat(s.slice(r + 1))
                                                                                                                        );
                                                                                                              } else t.$set(t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode], "hasrecap", i);
                                                                                                          },
                                                                                                      },
                                                                                                  }),
                                                                                                  t._v(" "),
                                                                                                  s("label", { staticClass: "custom-control-label", attrs: { for: "hasrecap" } }, [t._v("Episode has Skip Recap ?")]),
                                                                                              ]),
                                                                                          ]),
                                                                                      ]),
                                                                                      t._v(" "),
                                                                                      s("div", { staticClass: "col-md-6" }, [
                                                                                          s("div", { staticClass: "form-group" }, [
                                                                                              s("label", { attrs: { for: "skiprecap_start_in" } }, [t._v("Episode Start in (Exprime in sec !)")]),
                                                                                              t._v(" "),
                                                                                              s("input", {
                                                                                                  directives: [
                                                                                                      {
                                                                                                          name: "model",
                                                                                                          rawName: "v-model",
                                                                                                          value: t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].skiprecap_start_in,
                                                                                                          expression: "form.anime.seasons[selectedSeason].episodes[selectedEpisode].skiprecap_start_in",
                                                                                                      },
                                                                                                  ],
                                                                                                  staticClass: "form-control",
                                                                                                  attrs: { id: "poster_path", name: "skiprecap_start_in", type: "text" },
                                                                                                  domProps: { value: t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].skiprecap_start_in },
                                                                                                  on: {
                                                                                                      input: function (e) {
                                                                                                          e.target.composing ||
                                                                                                              t.$set(t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode], "skiprecap_start_in", e.target.value);
                                                                                                      },
                                                                                                  },
                                                                                              }),
                                                                                          ]),
                                                                                      ]),
                                                                                      t._v(" "),
                                                                                      s("label", { attrs: { for: "episode_number" } }, [t._v("Episode ID")]),
                                                                                      t._v(" "),
                                                                                      s("textarea", {
                                                                                          directives: [
                                                                                              {
                                                                                                  name: "model",
                                                                                                  rawName: "v-model",
                                                                                                  value: t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].id,
                                                                                                  expression: "form.anime.seasons[selectedSeason].episodes[selectedEpisode].id",
                                                                                              },
                                                                                          ],
                                                                                          staticClass: "form-control",
                                                                                          attrs: { id: "episode_number", required: "" },
                                                                                          domProps: { value: t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].id },
                                                                                          on: {
                                                                                              input: function (e) {
                                                                                                  e.target.composing || t.$set(t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode], "id", e.target.value);
                                                                                              },
                                                                                          },
                                                                                      }),
                                                                                      t._v(" "),
                                                                                      s("label", { attrs: { for: "episode_number" } }, [t._v("Episode Number")]),
                                                                                      t._v(" "),
                                                                                      s("textarea", {
                                                                                          directives: [
                                                                                              {
                                                                                                  name: "model",
                                                                                                  rawName: "v-model",
                                                                                                  value: t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].episode_number,
                                                                                                  expression: "form.anime.seasons[selectedSeason].episodes[selectedEpisode].episode_number",
                                                                                              },
                                                                                          ],
                                                                                          staticClass: "form-control",
                                                                                          attrs: { id: "episode_number", required: "" },
                                                                                          domProps: { value: t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].episode_number },
                                                                                          on: {
                                                                                              input: function (e) {
                                                                                                  e.target.composing || t.$set(t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode], "episode_number", e.target.value);
                                                                                              },
                                                                                          },
                                                                                      }),
                                                                                      t._v(" "),
                                                                                      s("label", { attrs: { for: "episode_number" } }, [t._v("Episode Name")]),
                                                                                      t._v(" "),
                                                                                      s("textarea", {
                                                                                          directives: [
                                                                                              {
                                                                                                  name: "model",
                                                                                                  rawName: "v-model",
                                                                                                  value: t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].name,
                                                                                                  expression: "form.anime.seasons[selectedSeason].episodes[selectedEpisode].name",
                                                                                              },
                                                                                          ],
                                                                                          staticClass: "form-control",
                                                                                          attrs: { id: "name", required: "" },
                                                                                          domProps: { value: t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].name },
                                                                                          on: {
                                                                                              input: function (e) {
                                                                                                  e.target.composing || t.$set(t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode], "name", e.target.value);
                                                                                              },
                                                                                          },
                                                                                      }),
                                                                                      t._v(" "),
                                                                                      s("label", { attrs: { for: "seasonoverview" } }, [t._v("Episode Overview")]),
                                                                                      t._v(" "),
                                                                                      s("textarea", {
                                                                                          directives: [
                                                                                              {
                                                                                                  name: "model",
                                                                                                  rawName: "v-model",
                                                                                                  value: t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].overview,
                                                                                                  expression: "form.anime.seasons[selectedSeason].episodes[selectedEpisode].overview",
                                                                                              },
                                                                                          ],
                                                                                          staticClass: "form-control",
                                                                                          attrs: { id: "seasonoverview", required: "" },
                                                                                          domProps: { value: t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].overview },
                                                                                          on: {
                                                                                              input: function (e) {
                                                                                                  e.target.composing || t.$set(t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode], "overview", e.target.value);
                                                                                              },
                                                                                          },
                                                                                      }),
                                                                                      t._v(" "),
                                                                                      s("label", { attrs: { for: "still_path" } }, [t._v("Episode Cover")]),
                                                                                      t._v(" "),
                                                                                      s("input", {
                                                                                          directives: [
                                                                                              {
                                                                                                  name: "model",
                                                                                                  rawName: "v-model",
                                                                                                  value: t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].still_path,
                                                                                                  expression: "form.anime.seasons[selectedSeason].episodes[selectedEpisode].still_path",
                                                                                              },
                                                                                          ],
                                                                                          staticClass: "form-control",
                                                                                          attrs: { id: "still_path", required: "" },
                                                                                          domProps: { value: t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].still_path },
                                                                                          on: {
                                                                                              input: function (e) {
                                                                                                  e.target.composing || t.$set(t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode], "still_path", e.target.value);
                                                                                              },
                                                                                          },
                                                                                      }),
                                                                                      t._v(" "),
                                                                                      s("label", { attrs: { for: "vote_average" } }, [t._v("Episode Vote Average")]),
                                                                                      t._v(" "),
                                                                                      s("input", {
                                                                                          directives: [
                                                                                              {
                                                                                                  name: "model",
                                                                                                  rawName: "v-model",
                                                                                                  value: t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].vote_average,
                                                                                                  expression: "form.anime.seasons[selectedSeason].episodes[selectedEpisode].vote_average",
                                                                                              },
                                                                                          ],
                                                                                          staticClass: "form-control",
                                                                                          attrs: { id: "vote_average", required: "" },
                                                                                          domProps: { value: t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].vote_average },
                                                                                          on: {
                                                                                              input: function (e) {
                                                                                                  e.target.composing || t.$set(t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode], "vote_average", e.target.value);
                                                                                              },
                                                                                          },
                                                                                      }),
                                                                                      t._v(" "),
                                                                                      s("label", { attrs: { for: "air_date" } }, [t._v("Episode Air Date")]),
                                                                                      t._v(" "),
                                                                                      s("input", {
                                                                                          directives: [
                                                                                              {
                                                                                                  name: "model",
                                                                                                  rawName: "v-model",
                                                                                                  value: t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].air_date,
                                                                                                  expression: "form.anime.seasons[selectedSeason].episodes[selectedEpisode].air_date",
                                                                                              },
                                                                                          ],
                                                                                          staticClass: "form-control",
                                                                                          attrs: { id: "air_date", required: "" },
                                                                                          domProps: { value: t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].air_date },
                                                                                          on: {
                                                                                              input: function (e) {
                                                                                                  e.target.composing || t.$set(t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode], "air_date", e.target.value);
                                                                                              },
                                                                                          },
                                                                                      }),
                                                                                  ])
                                                                                : t._e(),
                                                                            t._v(" "),
                                                                            t.selectedEpisode >= 0
                                                                                ? s("div", { staticClass: "input-group" }, [
                                                                                      t._m(10),
                                                                                      t._v(" "),
                                                                                      s("div", { staticClass: "custom-file" }, [
                                                                                          s("input", { staticClass: "custom-file-input", attrs: { type: "file", id: "stillEpisode" }, on: { change: t.storeStillEpisode } }),
                                                                                          t._v(" "),
                                                                                          s("label", { staticClass: "custom-file-label", attrs: { for: "stillEpisode" } }, [
                                                                                              t._v(t._s(t.stillEpisode.length ? t.stillEpisode.name : "Choose still episode")),
                                                                                          ]),
                                                                                      ]),
                                                                                  ])
                                                                                : t._e(),
                                                                            t._v(" "),
                                                                            t.selectedEpisode >= 0
                                                                                ? s("div", { staticClass: "float-right my-2" }, [
                                                                                      s(
                                                                                          "button",
                                                                                          {
                                                                                              staticClass: "btn btn-danger ml-2",
                                                                                              attrs: { type: "button" },
                                                                                              on: {
                                                                                                  click: function (e) {
                                                                                                      return t.destroyEpisode();
                                                                                                  },
                                                                                              },
                                                                                          },
                                                                                          [s("em", { staticClass: "far fa-trash-alt" })]
                                                                                      ),
                                                                                  ])
                                                                                : t._e(),
                                                                        ],
                                                                        1
                                                                    ),
                                                                ]
                                                              : t._e(),
                                                      ],
                                                      2
                                                  ),
                                                  t._v(" "),
                                                  t.selectedEpisode >= 0
                                                      ? s("section", [
                                                            s("div", { staticClass: "form-group" }, [
                                                                t._m(11),
                                                                t._v(" "),
                                                                s("div", { staticClass: "row" }, [
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [
                                                                                s("label", { attrs: { for: "server" } }, [t._v("Server")]),
                                                                                t._v(" "),
                                                                                s("multiselect", {
                                                                                    attrs: { options: t.servers, id: "server", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                    model: {
                                                                                        value: t.server,
                                                                                        callback: function (e) {
                                                                                            t.server = e;
                                                                                        },
                                                                                        expression: "server",
                                                                                    },
                                                                                }),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [
                                                                                s("label", { attrs: { for: "lang" } }, [t._v("Language")]),
                                                                                t._v(" "),
                                                                                s("multiselect", {
                                                                                    attrs: { options: t.langs, id: "lang", label: "english_name", placeholder: "Select one (default ov)", "track-by": "iso_639_1" },
                                                                                    model: {
                                                                                        value: t.lang,
                                                                                        callback: function (e) {
                                                                                            t.lang = e;
                                                                                        },
                                                                                        expression: "lang",
                                                                                    },
                                                                                }),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [
                                                                                s("label", { attrs: { for: "header" } }, [t._v("Headers")]),
                                                                                t._v(" "),
                                                                                s("multiselect", {
                                                                                    attrs: { options: t.headers, id: "header", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                    model: {
                                                                                        value: t.header,
                                                                                        callback: function (e) {
                                                                                            t.header = e;
                                                                                        },
                                                                                        expression: "header",
                                                                                    },
                                                                                }),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [
                                                                                s("label", { attrs: { for: "useragent" } }, [t._v("User Agent")]),
                                                                                t._v(" "),
                                                                                s("multiselect", {
                                                                                    attrs: { options: t.useragents, id: "useragent", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                    model: {
                                                                                        value: t.useragent,
                                                                                        callback: function (e) {
                                                                                            t.useragent = e;
                                                                                        },
                                                                                        expression: "useragent",
                                                                                    },
                                                                                }),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [
                                                                                s("label", { attrs: { for: "useragent" } }, [t._v("DRM UUID")]),
                                                                                t._v(" "),
                                                                                s("multiselect", {
                                                                                    attrs: { options: t.drmuui, id: "drmuui", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                    model: {
                                                                                        value: t.drmuuiselected,
                                                                                        callback: function (e) {
                                                                                            t.drmuuiselected = e;
                                                                                        },
                                                                                        expression: "drmuuiselected",
                                                                                    },
                                                                                }),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-6" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [
                                                                                s("label", { attrs: { for: "useragent" } }, [t._v("DRM License Uri")]),
                                                                                t._v(" "),
                                                                                s("multiselect", {
                                                                                    attrs: { options: t.serversdrm, id: "serversdrm", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                    model: {
                                                                                        value: t.drmlicenceuriselected,
                                                                                        callback: function (e) {
                                                                                            t.drmlicenceuriselected = e;
                                                                                        },
                                                                                        expression: "drmlicenceuriselected",
                                                                                    },
                                                                                }),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-6" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.supported_hosts, expression: "supported_hosts" }],
                                                                                    staticClass: "custom-control-input",
                                                                                    attrs: { id: "supported_hosts", type: "checkbox" },
                                                                                    domProps: { checked: Array.isArray(t.supported_hosts) ? t._i(t.supported_hosts, null) > -1 : t.supported_hosts },
                                                                                    on: {
                                                                                        change: function (e) {
                                                                                            var s = t.supported_hosts,
                                                                                                a = e.target,
                                                                                                i = !!a.checked;
                                                                                            if (Array.isArray(s)) {
                                                                                                var r = t._i(s, null);
                                                                                                a.checked ? r < 0 && (t.supported_hosts = s.concat([null])) : r > -1 && (t.supported_hosts = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                            } else t.supported_hosts = i;
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("label", { staticClass: "custom-control-label", attrs: { for: "supported_hosts" } }, [t._v("Supported Hosts")]),
                                                                            ]),
                                                                        ]),
                                                                        t._v(" "),
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.drm, expression: "drm" }],
                                                                                    staticClass: "custom-control-input",
                                                                                    attrs: { id: "drm", type: "checkbox" },
                                                                                    domProps: { checked: Array.isArray(t.drm) ? t._i(t.drm, null) > -1 : t.drm },
                                                                                    on: {
                                                                                        change: function (e) {
                                                                                            var s = t.drm,
                                                                                                a = e.target,
                                                                                                i = !!a.checked;
                                                                                            if (Array.isArray(s)) {
                                                                                                var r = t._i(s, null);
                                                                                                a.checked ? r < 0 && (t.drm = s.concat([null])) : r > -1 && (t.drm = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                            } else t.drm = i;
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("label", { staticClass: "custom-control-label", attrs: { for: "drm" } }, [t._v("DRM")]),
                                                                            ]),
                                                                        ]),
                                                                        t._v(" "),
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.embed, expression: "embed" }],
                                                                                    staticClass: "custom-control-input",
                                                                                    attrs: { id: "embed", type: "checkbox" },
                                                                                    domProps: { checked: Array.isArray(t.embed) ? t._i(t.embed, null) > -1 : t.embed },
                                                                                    on: {
                                                                                        change: function (e) {
                                                                                            var s = t.embed,
                                                                                                a = e.target,
                                                                                                i = !!a.checked;
                                                                                            if (Array.isArray(s)) {
                                                                                                var r = t._i(s, null);
                                                                                                a.checked ? r < 0 && (t.embed = s.concat([null])) : r > -1 && (t.embed = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                            } else t.embed = i;
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("label", { staticClass: "custom-control-label", attrs: { for: "embed" } }, [t._v("Embed")]),
                                                                            ]),
                                                                        ]),
                                                                        t._v(" "),
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.hls, expression: "hls" }],
                                                                                    staticClass: "custom-control-input",
                                                                                    attrs: { id: "hls", type: "checkbox" },
                                                                                    domProps: { checked: Array.isArray(t.hls) ? t._i(t.hls, null) > -1 : t.hls },
                                                                                    on: {
                                                                                        change: function (e) {
                                                                                            var s = t.hls,
                                                                                                a = e.target,
                                                                                                i = !!a.checked;
                                                                                            if (Array.isArray(s)) {
                                                                                                var r = t._i(s, null);
                                                                                                a.checked ? r < 0 && (t.hls = s.concat([null])) : r > -1 && (t.hls = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                            } else t.hls = i;
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("label", { staticClass: "custom-control-label", attrs: { for: "hls" } }, [t._v("HlS Link (PHP FORMAT)")]),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "row" }, [
                                                                    s("div", { staticClass: "col-md-4" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("label", { attrs: { for: "link" } }, [t._v("Link")]),
                                                                            t._v(" "),
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.link, expression: "link" }],
                                                                                staticClass: "form-control",
                                                                                attrs: { id: "link", placeholder: "Upload or Insert Direct  Link", type: "text" },
                                                                                domProps: { value: t.link },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || (t.link = e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                        ]),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-4" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("label", [t._v("Upload Stream")]),
                                                                            t._v(" "),
                                                                            s("input", { staticClass: "file-upload-default" }),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "input-group col-xs-12" }, [
                                                                                s("input", { staticClass: "form-control file-upload-info", attrs: { id: "video", placeholder: "Upload Image", type: "file" }, on: { change: t.storeVideo } }),
                                                                                t._v(" "),
                                                                                t._m(12),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-2" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [t.isuploading ? s("vue-ellipse-progress", { attrs: { gap: 5, thickness: 5, animation: "default 1000", progress: t.percent, size: 60 } }) : t._e()],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-1 my-auto" }, [
                                                                        s(
                                                                            "button",
                                                                            {
                                                                                staticClass: "btn btn-primary mr-2",
                                                                                on: {
                                                                                    click: function (e) {
                                                                                        return e.preventDefault(), t.addLink();
                                                                                    },
                                                                                },
                                                                            },
                                                                            [t._v("Add")]
                                                                        ),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("table", { staticClass: "table table-striped table-links", attrs: { "aria-describedby": "video links" } }, [
                                                                    t._m(13),
                                                                    t._v(" "),
                                                                    s(
                                                                        "tbody",
                                                                        { attrs: { name: "links" } },
                                                                        t._l(t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].videos, function (e, a) {
                                                                            return s("tr", { key: a }, [
                                                                                s("td", { staticClass: "text-center" }, [
                                                                                    s("div", { staticClass: "list-icons" }, [
                                                                                        s(
                                                                                            "a",
                                                                                            {
                                                                                                staticClass: "list-icons-item text-warning",
                                                                                                attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                                on: {
                                                                                                    click: function (s) {
                                                                                                        return s.preventDefault(), t.deleteLink(e, a);
                                                                                                    },
                                                                                                },
                                                                                            },
                                                                                            [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                                        ),
                                                                                    ]),
                                                                                ]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.lang))]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.server))]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.header))]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.useragent))]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.link))]),
                                                                                t._v(" "),
                                                                                (1 === e.supported_hosts) | (!0 === e.supported_hosts)
                                                                                    ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                                    : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                                t._v(" "),
                                                                                (1 === e.hls) | (!0 === e.hls)
                                                                                    ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                                    : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                                t._v(" "),
                                                                                (1 === e.embed) | (!0 === e.embed)
                                                                                    ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                                    : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                                t._v(" "),
                                                                                (1 === e.drm) | (!0 === e.drm)
                                                                                    ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                                    : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.drmuuid))]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.drmlicenceuri))]),
                                                                            ]);
                                                                        }),
                                                                        0
                                                                    ),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            1 === this.settings.separate_download
                                                                ? s("div", { staticClass: "form-group" }, [
                                                                      t._m(14),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "row" }, [
                                                                          s("div", { staticClass: "col-md-3" }, [
                                                                              s(
                                                                                  "div",
                                                                                  { staticClass: "form-group" },
                                                                                  [
                                                                                      s("label", { attrs: { for: "server" } }, [t._v("Server")]),
                                                                                      t._v(" "),
                                                                                      s("multiselect", {
                                                                                          attrs: { options: t.servers, id: "server", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                          model: {
                                                                                              value: t.serverdownload,
                                                                                              callback: function (e) {
                                                                                                  t.serverdownload = e;
                                                                                              },
                                                                                              expression: "serverdownload",
                                                                                          },
                                                                                      }),
                                                                                  ],
                                                                                  1
                                                                              ),
                                                                          ]),
                                                                          t._v(" "),
                                                                          s("div", { staticClass: "col-md-3" }, [
                                                                              s(
                                                                                  "div",
                                                                                  { staticClass: "form-group" },
                                                                                  [
                                                                                      s("label", { attrs: { for: "langdownload" } }, [t._v("Language")]),
                                                                                      t._v(" "),
                                                                                      s("multiselect", {
                                                                                          attrs: { options: t.langs, id: "langdownload", label: "english_name", placeholder: "Select one (default EN)", "track-by": "iso_639_1" },
                                                                                          model: {
                                                                                              value: t.langdownload,
                                                                                              callback: function (e) {
                                                                                                  t.langdownload = e;
                                                                                              },
                                                                                              expression: "langdownload",
                                                                                          },
                                                                                      }),
                                                                                  ],
                                                                                  1
                                                                              ),
                                                                          ]),
                                                                          t._v(" "),
                                                                          s("div", { staticClass: "col-md-3" }, [
                                                                              s(
                                                                                  "div",
                                                                                  { staticClass: "form-group" },
                                                                                  [
                                                                                      s("label", { attrs: { for: "headerdownload" } }, [t._v("Headers")]),
                                                                                      t._v(" "),
                                                                                      s("multiselect", {
                                                                                          attrs: { options: t.headers, id: "headerdownload", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                          model: {
                                                                                              value: t.headerdownload,
                                                                                              callback: function (e) {
                                                                                                  t.headerdownload = e;
                                                                                              },
                                                                                              expression: "headerdownload",
                                                                                          },
                                                                                      }),
                                                                                  ],
                                                                                  1
                                                                              ),
                                                                          ]),
                                                                          t._v(" "),
                                                                          s("div", { staticClass: "col-md-3" }, [
                                                                              s(
                                                                                  "div",
                                                                                  { staticClass: "form-group" },
                                                                                  [
                                                                                      s("label", { attrs: { for: "useragentdownload" } }, [t._v("User Agent")]),
                                                                                      t._v(" "),
                                                                                      s("multiselect", {
                                                                                          attrs: { options: t.useragents, id: "useragentdownload", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                          model: {
                                                                                              value: t.useragentdownload,
                                                                                              callback: function (e) {
                                                                                                  t.useragentdownload = e;
                                                                                              },
                                                                                              expression: "useragentdownload",
                                                                                          },
                                                                                      }),
                                                                                  ],
                                                                                  1
                                                                              ),
                                                                          ]),
                                                                          t._v(" "),
                                                                          s("div", { staticClass: "col-md-6" }, [
                                                                              s("div", { staticClass: "form-group" }, [
                                                                                  s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                      s("input", {
                                                                                          directives: [{ name: "model", rawName: "v-model", value: t.supported_hosts_download, expression: "supported_hosts_download" }],
                                                                                          staticClass: "custom-control-input",
                                                                                          attrs: { id: "supported_hosts_download", type: "checkbox" },
                                                                                          domProps: { checked: Array.isArray(t.supported_hosts_download) ? t._i(t.supported_hosts_download, null) > -1 : t.supported_hosts_download },
                                                                                          on: {
                                                                                              change: function (e) {
                                                                                                  var s = t.supported_hosts_download,
                                                                                                      a = e.target,
                                                                                                      i = !!a.checked;
                                                                                                  if (Array.isArray(s)) {
                                                                                                      var r = t._i(s, null);
                                                                                                      a.checked
                                                                                                          ? r < 0 && (t.supported_hosts_download = s.concat([null]))
                                                                                                          : r > -1 && (t.supported_hosts_download = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                                  } else t.supported_hosts_download = i;
                                                                                              },
                                                                                          },
                                                                                      }),
                                                                                      t._v(" "),
                                                                                      s("label", { staticClass: "custom-control-label", attrs: { for: "supported_hosts_download" } }, [t._v("Supported Hosts")]),
                                                                                  ]),
                                                                              ]),
                                                                              t._v(" "),
                                                                              s("div", { staticClass: "form-group" }, [
                                                                                  s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                      s("input", {
                                                                                          directives: [{ name: "model", rawName: "v-model", value: t.external_download, expression: "external_download" }],
                                                                                          staticClass: "custom-control-input",
                                                                                          attrs: { id: "external_download", type: "checkbox" },
                                                                                          domProps: { checked: Array.isArray(t.external_download) ? t._i(t.external_download, null) > -1 : t.external_download },
                                                                                          on: {
                                                                                              change: function (e) {
                                                                                                  var s = t.external_download,
                                                                                                      a = e.target,
                                                                                                      i = !!a.checked;
                                                                                                  if (Array.isArray(s)) {
                                                                                                      var r = t._i(s, null);
                                                                                                      a.checked ? r < 0 && (t.external_download = s.concat([null])) : r > -1 && (t.external_download = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                                  } else t.external_download = i;
                                                                                              },
                                                                                          },
                                                                                      }),
                                                                                      t._v(" "),
                                                                                      s("label", { staticClass: "custom-control-label", attrs: { for: "external_download" } }, [t._v("External Link ( Via Phone Browser )")]),
                                                                                  ]),
                                                                              ]),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "row" }, [
                                                                          s("div", { staticClass: "col-md-6" }, [
                                                                              s("div", { staticClass: "form-group" }, [
                                                                                  s("label", { attrs: { for: "linkDownload" } }, [t._v("Link")]),
                                                                                  t._v(" "),
                                                                                  s("input", {
                                                                                      directives: [{ name: "model", rawName: "v-model", value: t.linkDownload, expression: "linkDownload" }],
                                                                                      staticClass: "form-control",
                                                                                      attrs: { id: "linkDownload", placeholder: "Insert a download Link", type: "text" },
                                                                                      domProps: { value: t.linkDownload },
                                                                                      on: {
                                                                                          input: function (e) {
                                                                                              e.target.composing || (t.linkDownload = e.target.value);
                                                                                          },
                                                                                      },
                                                                                  }),
                                                                              ]),
                                                                          ]),
                                                                          t._v(" "),
                                                                          s("div", { staticClass: "col-md-1 my-auto" }, [
                                                                              s(
                                                                                  "button",
                                                                                  {
                                                                                      staticClass: "btn btn-primary mr-2",
                                                                                      on: {
                                                                                          click: function (e) {
                                                                                              return e.preventDefault(), t.addLinkDownload();
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [t._v("Add")]
                                                                              ),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("table", { staticClass: "table table-striped table-links", attrs: { "aria-describedby": "video links" } }, [
                                                                          t._m(15),
                                                                          t._v(" "),
                                                                          s(
                                                                              "tbody",
                                                                              { attrs: { name: "links" } },
                                                                              t._l(t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].downloads, function (e, a) {
                                                                                  return s("tr", { key: a }, [
                                                                                      s("td", { staticClass: "text-center" }, [
                                                                                          s("div", { staticClass: "list-icons" }, [
                                                                                              s(
                                                                                                  "a",
                                                                                                  {
                                                                                                      staticClass: "list-icons-item text-warning",
                                                                                                      attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                                      on: {
                                                                                                          click: function (s) {
                                                                                                              return s.preventDefault(), t.deleteLinkDownload(e, a);
                                                                                                          },
                                                                                                      },
                                                                                                  },
                                                                                                  [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                                              ),
                                                                                          ]),
                                                                                      ]),
                                                                                      t._v(" "),
                                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.lang))]),
                                                                                      t._v(" "),
                                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.server))]),
                                                                                      t._v(" "),
                                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.header))]),
                                                                                      t._v(" "),
                                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.useragent))]),
                                                                                      t._v(" "),
                                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.link))]),
                                                                                      t._v(" "),
                                                                                      (1 === e.supported_hosts) | (!0 === e.supported_hosts)
                                                                                          ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                                          : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                                      t._v(" "),
                                                                                      (1 === e.external) | (!0 === e.external)
                                                                                          ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                                          : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                                  ]);
                                                                              }),
                                                                              0
                                                                          ),
                                                                      ]),
                                                                  ])
                                                                : t._e(),
                                                            t._v(" "),
                                                            s("div", { staticClass: "form-group" }, [
                                                                t._m(16),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-6" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", [t._v("Upload Substitle ( Zip Format only ! )")]),
                                                                        t._v(" "),
                                                                        s("input", { staticClass: "file-upload-default" }),
                                                                        t._v(" "),
                                                                        s("div", { staticClass: "input-group col-xs-12" }, [
                                                                            s("input", {
                                                                                staticClass: "form-control file-upload-info",
                                                                                attrs: { id: "video", placeholder: "Upload Substitle as zip format", type: "file" },
                                                                                on: { change: t.storeSubstitle },
                                                                            }),
                                                                            t._v(" "),
                                                                            t._m(17),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-6" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "custom-control custom-checkbox" },
                                                                            [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.zip, expression: "zip" }],
                                                                                    staticClass: "custom-control-input",
                                                                                    attrs: { id: "zip", type: "checkbox" },
                                                                                    domProps: { checked: Array.isArray(t.zip) ? t._i(t.zip, null) > -1 : t.zip },
                                                                                    on: {
                                                                                        change: function (e) {
                                                                                            var s = t.zip,
                                                                                                a = e.target,
                                                                                                i = !!a.checked;
                                                                                            if (Array.isArray(s)) {
                                                                                                var r = t._i(s, null);
                                                                                                a.checked ? r < 0 && (t.zip = s.concat([null])) : r > -1 && (t.zip = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                            } else t.zip = i;
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("label", { staticClass: "custom-control-label", attrs: { for: "zip" } }, [t._v("Substitle Zip Format ?")]),
                                                                                t._v(" "),
                                                                                s("b-tooltip", { attrs: { target: "zip", triggers: "hover" } }, [
                                                                                    t._v("\n                      I am tooltip "),
                                                                                    s("b", [t._v("component")]),
                                                                                    t._v(" content!\n                "),
                                                                                ]),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "row" }, [
                                                                    s("div", { staticClass: "col-md-4" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("label", { attrs: { for: "linksubstitle" } }, [t._v("Substitle Path")]),
                                                                            t._v(" "),
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.linksubstitle, expression: "linksubstitle" }],
                                                                                staticClass: "form-control",
                                                                                attrs: { id: "linksubstitle", placeholder: "Upload or Insert Direct  Link", type: "text" },
                                                                                domProps: { value: t.linksubstitle },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || (t.linksubstitle = e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                        ]),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-4" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [
                                                                                s("label", { attrs: { for: "lang" } }, [t._v("Language")]),
                                                                                t._v(" "),
                                                                                s("multiselect", {
                                                                                    attrs: { options: t.langsubs, id: "langsub", label: "english_name", placeholder: "Select one (default EN)", "track-by": "iso_639_1" },
                                                                                    model: {
                                                                                        value: t.langsub,
                                                                                        callback: function (e) {
                                                                                            t.langsub = e;
                                                                                        },
                                                                                        expression: "langsub",
                                                                                    },
                                                                                }),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [
                                                                                s("label", { attrs: { for: "lang" } }, [t._v("Substitle Type")]),
                                                                                t._v(" "),
                                                                                s("multiselect", {
                                                                                    attrs: { id: "typesub", options: t.substypes, type: "text" },
                                                                                    model: {
                                                                                        value: t.typesubstitle,
                                                                                        callback: function (e) {
                                                                                            t.typesubstitle = e;
                                                                                        },
                                                                                        expression: "typesubstitle",
                                                                                    },
                                                                                }),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-1 my-auto" }, [
                                                                        s(
                                                                            "button",
                                                                            {
                                                                                staticClass: "btn btn-primary mr-2",
                                                                                on: {
                                                                                    click: function (e) {
                                                                                        return e.preventDefault(), t.addSubs();
                                                                                    },
                                                                                },
                                                                            },
                                                                            [t._v("Add")]
                                                                        ),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "table-responsive" }, [
                                                                    s("table", { staticClass: "table", attrs: { "aria-describedby": "Substitle Table" } }, [
                                                                        t._m(18),
                                                                        t._v(" "),
                                                                        s(
                                                                            "tbody",
                                                                            { attrs: { name: "linksubtitles" } },
                                                                            t._l(t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].substitles, function (e, a) {
                                                                                return s("tr", { key: a }, [
                                                                                    s("td", { staticClass: "text-center" }, [
                                                                                        s("div", { staticClass: "list-icons" }, [
                                                                                            s(
                                                                                                "a",
                                                                                                {
                                                                                                    staticClass: "list-icons-item text-warning",
                                                                                                    attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                                    on: {
                                                                                                        click: function (s) {
                                                                                                            return s.preventDefault(), t.destroySubs(e, a);
                                                                                                        },
                                                                                                    },
                                                                                                },
                                                                                                [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                                            ),
                                                                                        ]),
                                                                                    ]),
                                                                                    t._v(" "),
                                                                                    s("td", { staticClass: "text-center" }, [t._v(t._s(e.lang))]),
                                                                                    t._v(" "),
                                                                                    s("td", { staticClass: "text-center" }, [t._v(" " + t._s(e.type))]),
                                                                                    t._v(" "),
                                                                                    (1 === e.zip) | (!0 === e.zip)
                                                                                        ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                                        : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                                    t._v(" "),
                                                                                    s("td", { staticClass: "text-center" }, [t._v(t._s(e.link))]),
                                                                                ]);
                                                                            }),
                                                                            0
                                                                        ),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ])
                                                      : t._e(),
                                                  t._v(" "),
                                                  s("div", { staticClass: "d-flex justify-content-between align-items-end flex-wrap" }, [
                                                      t.add
                                                          ? s(
                                                                "button",
                                                                {
                                                                    staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                                    attrs: { type: "submit" },
                                                                    on: {
                                                                        click: function (e) {
                                                                            return e.preventDefault(), t.store();
                                                                        },
                                                                    },
                                                                },
                                                                [t._v("Save")]
                                                            )
                                                          : t._e(),
                                                      t._v(" "),
                                                      t.edit
                                                          ? s(
                                                                "button",
                                                                {
                                                                    staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                                    attrs: { type: "submit" },
                                                                    on: {
                                                                        click: function (e) {
                                                                            return e.preventDefault(), t.update();
                                                                        },
                                                                    },
                                                                },
                                                                [t._v("Update")]
                                                            )
                                                          : t._e(),
                                                  ]),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "d-flex align-items-end flex-wrap" }, [e("div", { staticClass: "d-flex" })]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "input-group-prepend" }, [e("span", { staticClass: "input-group-text", attrs: { id: "search" } }, [e("i", { staticClass: "mdi mdi-magnify" })])]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { staticClass: "text-center", attrs: { id: "cover" } }, [t._v("Cover")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "id" } }, [t._v("Anime ID")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "imdb" } }, [t._v("Anime IMDB")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "name" } }, [t._v("Name")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "vote" } }, [t._v("Vote")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "status" } }, [t._v("Status")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "options" } }, [t._v("Options")]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("Upload")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("Upload")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("em", { staticClass: "mdi mdi-access-point menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("Networks")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("i", { staticClass: "mdi mdi-message-video menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("Trailers")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                          Upload\n                        ")]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("i", { staticClass: "mdi mdi-account-multiple menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("Casters")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "input-group-prepend" }, [e("span", { staticClass: "input-group-text" }, [this._v("Upload")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "input-group-prepend" }, [e("span", { staticClass: "input-group-text" }, [this._v("Upload")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("em", { staticClass: "mdi mdi-video menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("VIDEOS")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("Upload")])]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { staticClass: "text-center", attrs: { id: "actions" } }, [t._v("Actions")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "langs" } }, [t._v("Lang")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("Server")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("Header")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("UserAgent")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("Link")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "langs" } }, [t._v("Supported Hosts")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "hls" } }, [t._v("Hls Link (PHP FORMAT)")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("Embed")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("DRM")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("DRM UUID")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("DRM Licence")]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("i", { staticClass: "mdi mdi-cloud-download menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("DOWNLOADS")])]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { staticClass: "text-center", attrs: { id: "actions" } }, [t._v("Actions")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "langs" } }, [t._v("Lang")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("Server")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("Header")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("UserAgent")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("Link")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "langs" } }, [t._v("Supported Hosts")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "hls" } }, [t._v("External")]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("em", { staticClass: "mdi mdi-closed-caption menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("Substitles")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                          Upload\n                        ")]),
                            ]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { staticClass: "text-center", attrs: { id: "actions" } }, [t._v("Actions")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "langs" } }, [t._v("Lang")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "type" } }, [t._v("Type")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "type" } }, [t._v("Zip Format")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("Link")]),
                                ]),
                            ]);
                        },
                    ],
                    !1,
                    null,
                    "d52c4778",
                    null
                );
            e.default = f.exports;
        },
        351: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a),
                r = s(3),
                n = s(6);
            function o(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            var l = {
                    data: function () {
                        return { index: !0, id: "", episode_id: "", server: "", animevideos: [], loading: !1, paginate: ["filteredanimesVideos"] };
                    },
                    mounted: function () {
                        var t,
                            e = this;
                        return ((t = i.a.mark(function t() {
                            var s;
                            return i.a.wrap(function (t) {
                                for (;;)
                                    switch ((t.prev = t.next)) {
                                        case 0:
                                            return (t.next = 2), axios.get(url + "/admin/video/animes/allvideos");
                                        case 2:
                                            (s = t.sent), (e.allvideosanimes = s.data);
                                        case 4:
                                        case "end":
                                            return t.stop();
                                    }
                            }, t);
                        })),
                        function () {
                            var e = this,
                                s = arguments;
                            return new Promise(function (a, i) {
                                var r = t.apply(e, s);
                                function n(t) {
                                    o(r, a, i, n, l, "next", t);
                                }
                                function l(t) {
                                    o(r, a, i, n, l, "throw", t);
                                }
                                n(void 0);
                            });
                        })();
                    },
                    methods: {},
                    computed: {
                        filteredanimesVideos: function () {
                            var t = this;
                            return this.animevideos.filter(function (e) {
                                return e.server.toLowerCase().match(t.search.toLowerCase());
                            });
                        },
                    },
                    mixins: [r.a, n.a],
                },
                c = s(4),
                d = Object(c.a)(
                    l,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "main-content" }, [
                            s("div", { staticClass: "section__content section__content--p30" }, [
                                s("div", { staticClass: "container-fluid" }, [
                                    s("div", { staticClass: "row" }, [
                                        s("div", { staticClass: "col" }, [
                                            s("div", { staticClass: "au-card" }, [
                                                t._m(0),
                                                t._v(" "),
                                                s("div", { staticClass: "fc fc-unthemed fc-ltr", attrs: { id: "calendar" } }, [
                                                    s("div", { staticClass: "fc-toolbar fc-header-toolbar" }, [
                                                        s("div", { staticClass: "fc-left" }, [
                                                            s("div", { staticClass: "fc-button-group" }, [
                                                                s("div", { staticClass: "row m-t-30" }, [
                                                                    s("div", { staticClass: "col-md-12" }, [
                                                                        s("div", { staticClass: "table-responsive m-b-40" }, [
                                                                            t.index
                                                                                ? s(
                                                                                      "table",
                                                                                      { staticClass: "table table-borderless table-data3", attrs: { "aria-describedby": "Episodes Links Table" } },
                                                                                      [
                                                                                          t._m(1),
                                                                                          t._v(" "),
                                                                                          t.filteredanimesVideos.length
                                                                                              ? s(
                                                                                                    "paginate",
                                                                                                    { attrs: { list: t.filteredanimesVideos, per: 5, name: "filteredanimesVideos", tag: "tbody" } },
                                                                                                    t._l(t.paginated("filteredanimesVideos"), function (e, a) {
                                                                                                        return s("tr", { key: a }, [
                                                                                                            s("td", [t._v(t._s(e.id))]),
                                                                                                            t._v(" "),
                                                                                                            s("td", [t._v(t._s(e.episode_id))]),
                                                                                                            t._v(" "),
                                                                                                            s("td", [t._v(t._s(e.server))]),
                                                                                                            t._v(" "),
                                                                                                            s("td", [s("span", { staticClass: "role admin" }, [t._v("tttt")])]),
                                                                                                            t._v(" "),
                                                                                                            s("td", [
                                                                                                                s(
                                                                                                                    "button",
                                                                                                                    {
                                                                                                                        staticClass: "btn btn-danger",
                                                                                                                        attrs: { type: "button" },
                                                                                                                        on: {
                                                                                                                            click: function (s) {
                                                                                                                                return t.destroy(e.id, a);
                                                                                                                            },
                                                                                                                        },
                                                                                                                    },
                                                                                                                    [t._v("Delete")]
                                                                                                                ),
                                                                                                            ]),
                                                                                                        ]);
                                                                                                    }),
                                                                                                    0
                                                                                                )
                                                                                              : t._e(),
                                                                                          t._v(" "),
                                                                                          t.filteredanimesVideos.length
                                                                                              ? s("paginate-links", {
                                                                                                    staticClass: "float-right",
                                                                                                    attrs: {
                                                                                                        async: !0,
                                                                                                        classes: { ul: "pagination", li: "page-item", a: "page-link", ".next > a": "next-link", ".prev > a": "prev-link" },
                                                                                                        "hide-single-page": !0,
                                                                                                        limit: 5,
                                                                                                        "show-step-links": !0,
                                                                                                        for: "filteredanimesVideos",
                                                                                                    },
                                                                                                })
                                                                                              : t._e(),
                                                                                      ],
                                                                                      1
                                                                                  )
                                                                                : t._e(),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                    ]),
                                                ]),
                                            ]),
                                        ]),
                                    ]),
                                ]),
                            ]),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "fc-center" }, [e("h2", [this._v("Users")])]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { attrs: { id: "id" } }, [t._v("ID")]),
                                    t._v(" "),
                                    s("th", { attrs: { id: "ep_id" } }, [t._v("Ep isode ID")]),
                                    t._v(" "),
                                    s("th", { attrs: { id: "anime" } }, [t._v("anime")]),
                                    t._v(" "),
                                    s("th", { attrs: { id: "type" } }, [t._v("Type")]),
                                    t._v(" "),
                                    s("th", { attrs: { id: "actions" } }, [t._v("Actions")]),
                                ]),
                            ]);
                        },
                    ],
                    !1,
                    null,
                    null,
                    null
                );
            e.default = d.exports;
        },
        352: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a);
            function r(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function n(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var n = t.apply(e, s);
                        function o(t) {
                            r(n, a, i, o, l, "next", t);
                        }
                        function l(t) {
                            r(n, a, i, o, l, "throw", t);
                        }
                        o(void 0);
                    });
                };
            }
            var o = {
                    data: function () {
                        return { index: !0, add: !1, edit: !1, search: "", form: { ads: { title: "", link: "", clickThroughUrl: "" } }, allads: [], paginate: ["filteredAllads"] };
                    },
                    mounted: function () {
                        var t = this;
                        return n(
                            i.a.mark(function e() {
                                var s;
                                return i.a.wrap(function (e) {
                                    for (;;)
                                        switch ((e.prev = e.next)) {
                                            case 0:
                                                return (e.next = 2), axios.get(url + "/admin/ads/data");
                                            case 2:
                                                (s = e.sent), (t.allads = s.data);
                                            case 4:
                                            case "end":
                                                return e.stop();
                                        }
                                }, e);
                            })
                        )();
                    },
                    methods: {
                        create: function () {
                            (this.index = !1), (this.edit = !1), (this.add = !0);
                        },
                        editing: function (t) {
                            (this.index = !1), (this.edit = !0), (this.form.ads = t), (this.form.allads = "");
                        },
                        back: function () {
                            (this.form.ads = ""), (this.add = !1), (this.edit = !1), (this.index = !0);
                        },
                        store: function () {
                            var t = this;
                            axios
                                .post(url + "/admin/ads/store", this.form)
                                .then(function (e) {
                                    (t.add = !1), (t.edit = !1), (t.index = !0), (t.form.ads = {}), t.allads.unshift(e.data.body), t.showSuccess(e.data.message);
                                })
                                .catch(function (e) {
                                    t.showError(e.response);
                                });
                        },
                        update: function () {
                            var t = this;
                            axios
                                .put(url + "/admin/ads/update/" + this.form.ads.id, this.form)
                                .then(function (e) {
                                    (t.edit = !1), (t.index = !0), (t.form.allads = []), t.showSuccess(e.data.message);
                                })
                                .catch(function (e) {
                                    t.showError(e.response);
                                });
                        },
                        destroy: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                n(
                                    i.a.mark(function a() {
                                        var r, n;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            return (a.prev = 0), (a.next = 3), axios.delete(url + "/admin/ads/destroy/" + t);
                                                        case 3:
                                                            (r = a.sent),
                                                                (n = s.allads.findIndex(function (e) {
                                                                    return e.id === t;
                                                                })),
                                                                s.allads.splice(n, 1),
                                                                s.paginate.filteredAllads.list.splice(e, 1),
                                                                s.showSuccess(r.data.message),
                                                                (a.next = 13);
                                                            break;
                                                        case 10:
                                                            (a.prev = 10), (a.t0 = a.catch(0)), s.showError();
                                                        case 13:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 10]]
                                        );
                                    })
                                )
                            );
                        },
                    },
                    computed: {
                        filteredAllads: function () {
                            var t = this;
                            return this.allads.filter(function (e) {
                                return e.title.toLowerCase().match(t.search.toLowerCase());
                            });
                        },
                    },
                    mixins: [s(3).a],
                },
                l = s(4),
                c = Object(l.a)(
                    o,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-md-12 grid-margin" }, [
                                s("div", { staticClass: "d-flex justify-content-between flex-wrap" }, [
                                    t._m(0),
                                    t._v(" "),
                                    s("div", { staticClass: "d-flex justify-content-between align-items-end flex-wrap" }, [
                                        t.index
                                            ? s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.create();
                                                          },
                                                      },
                                                  },
                                                  [t._v("Add Ads")]
                                              )
                                            : t._e(),
                                        t._v(" "),
                                        t.index
                                            ? t._e()
                                            : s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.back();
                                                          },
                                                      },
                                                  },
                                                  [t._v("Back")]
                                              ),
                                    ]),
                                ]),
                            ]),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s("div", { staticClass: "table-responsive" }, [
                                                  s(
                                                      "table",
                                                      { staticClass: "table", attrs: { "aria-describedby": "Ads Table" } },
                                                      [
                                                          t._m(1),
                                                          t._v(" "),
                                                          s(
                                                              "tbody",
                                                              t._l(t.paginated("filteredAllads"), function (e, a) {
                                                                  return s("tr", { key: a }, [
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.id))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.title))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.clickThroughUrl))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [
                                                                          s("div", { staticClass: "list-icons" }, [
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item mr-2",
                                                                                      attrs: { "data-original-title": "Edit", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.editing(e);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-pencil fa-lg", staticStyle: { color: "#4d83ff" } })]
                                                                              ),
                                                                              t._v(" "),
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item text-warning",
                                                                                      attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.destroy(e.id, a);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                              ),
                                                                          ]),
                                                                      ]),
                                                                  ]);
                                                              }),
                                                              0
                                                          ),
                                                          t._v(" "),
                                                          t.filteredAllads.length ? s("paginate", { attrs: { list: t.filteredAllads, per: 5, name: "filteredAllads", tag: "tbody" } }) : t._e(),
                                                          t._v(" "),
                                                          t.filteredAllads.length
                                                              ? s("paginate-links", {
                                                                    staticClass: "float-right",
                                                                    attrs: {
                                                                        async: !0,
                                                                        classes: { ul: "pagination", li: "page-item", a: "page-link", ".next > a": "next-link", ".prev > a": "prev-link" },
                                                                        "hide-single-page": !0,
                                                                        limit: 5,
                                                                        "show-step-links": !0,
                                                                        for: "filteredAllads",
                                                                    },
                                                                })
                                                              : t._e(),
                                                      ],
                                                      1
                                                  ),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.add || t.edit
                                ? s("div", { staticClass: "col-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s("form", { staticClass: "forms-sample" }, [
                                                  s("div", { staticClass: "form-group" }, [
                                                      s("label", { attrs: { for: "name" } }, [t._v("Title")]),
                                                      t._v(" "),
                                                      s("input", {
                                                          directives: [{ name: "model", rawName: "v-model", value: t.form.ads.title, expression: "form.ads.title" }],
                                                          staticClass: "form-control",
                                                          attrs: { id: "title", placeholder: "Title", type: "text" },
                                                          domProps: { value: t.form.ads.title },
                                                          on: {
                                                              input: function (e) {
                                                                  e.target.composing || t.$set(t.form.ads, "title", e.target.value);
                                                              },
                                                          },
                                                      }),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      s("label", { attrs: { for: "name" } }, [t._v("Link")]),
                                                      t._v(" "),
                                                      s("input", {
                                                          directives: [{ name: "model", rawName: "v-model", value: t.form.ads.link, expression: "form.ads.link" }],
                                                          staticClass: "form-control",
                                                          attrs: { id: "link", placeholder: "Google Ad Manager, the Google AdSense network, or any VAST-compliant ad server.", type: "text" },
                                                          domProps: { value: t.form.ads.link },
                                                          on: {
                                                              input: function (e) {
                                                                  e.target.composing || t.$set(t.form.ads, "link", e.target.value);
                                                              },
                                                          },
                                                      }),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      s("label", { attrs: { for: "name" } }, [t._v("clickThroughUrl")]),
                                                      t._v(" "),
                                                      s("input", {
                                                          directives: [{ name: "model", rawName: "v-model", value: t.form.ads.clickThroughUrl, expression: "form.ads.clickThroughUrl" }],
                                                          staticClass: "form-control",
                                                          attrs: { id: "clickThroughUrl", placeholder: "clickThroughUrl", type: "text" },
                                                          domProps: { value: t.form.ads.clickThroughUrl },
                                                          on: {
                                                              input: function (e) {
                                                                  e.target.composing || t.$set(t.form.ads, "clickThroughUrl", e.target.value);
                                                              },
                                                          },
                                                      }),
                                                  ]),
                                                  t._v(" "),
                                                  t.add
                                                      ? s(
                                                            "button",
                                                            {
                                                                staticClass: "btn btn-primary mr-2",
                                                                attrs: { type: "submit" },
                                                                on: {
                                                                    click: function (e) {
                                                                        return e.preventDefault(), t.store();
                                                                    },
                                                                },
                                                            },
                                                            [t._v("Save")]
                                                        )
                                                      : t._e(),
                                                  t._v(" "),
                                                  t.edit
                                                      ? s(
                                                            "button",
                                                            {
                                                                staticClass: "btn btn-primary mr-2",
                                                                attrs: { type: "submit" },
                                                                on: {
                                                                    click: function (e) {
                                                                        return e.preventDefault(), t.update();
                                                                    },
                                                                },
                                                            },
                                                            [t._v("Update")]
                                                        )
                                                      : t._e(),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "d-flex align-items-end flex-wrap" }, [e("div", { staticClass: "d-flex" })]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("thead", [
                                e("tr", [
                                    e("th", { staticClass: "text-center", attrs: { id: "id" } }, [this._v("ID")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "title" } }, [this._v("Title")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "ads link" } }, [this._v("Ads Url")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "options" } }, [this._v("Options")]),
                                ]),
                            ]);
                        },
                    ],
                    !1,
                    null,
                    null,
                    null
                );
            e.default = c.exports;
        },
        353: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a),
                r = s(3),
                n = s(6);
            function o(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function l(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var r = t.apply(e, s);
                        function n(t) {
                            o(r, a, i, n, l, "next", t);
                        }
                        function l(t) {
                            o(r, a, i, n, l, "throw", t);
                        }
                        n(void 0);
                    });
                };
            }
            var c = {
                    data: function () {
                        return {
                            index: !0,
                            add: !1,
                            edit: !1,
                            tmdb: null,
                            upcomings: [],
                            paginate: ["upcomings", "filteredUpcomings"],
                            form: { upcoming: { name: "", overview: "", link: "", backdrop_path: "", poster_path: "" }, notification: !1 },
                            poster: null,
                            backdrop: null,
                            search: "",
                        };
                    },
                    mounted: function () {
                        var t = this;
                        return l(
                            i.a.mark(function e() {
                                var s;
                                return i.a.wrap(function (e) {
                                    for (;;)
                                        switch ((e.prev = e.next)) {
                                            case 0:
                                                return (e.next = 2), axios.get(url + "/admin/upcoming/data");
                                            case 2:
                                                (s = e.sent), (t.upcomings = s.data);
                                            case 4:
                                            case "end":
                                                return e.stop();
                                        }
                                }, e);
                            })
                        )();
                    },
                    methods: {
                        create: function () {
                            (this.index = !1), (this.edit = !1), (this.add = !0), (this.tmdb = null);
                        },
                        back: function () {
                            (this.form.upcoming = ""), (this.tmdb = null), (this.add = !1), (this.edit = !1), (this.index = !0);
                        },
                        editing: function (t) {
                            (this.index = !1), (this.add = !1), (this.edit = !0), (this.form.upcoming = t), (this.tmdb = t.tmdb_id);
                        },
                        getSearchByName: function (t) {
                            var e = this.settings.tmdb_api_key,
                                s = this.settings.tmdb_lang.iso_639_1,
                                a = "".concat("https://api.themoviedb.org/3/search/multi?api_key=").concat(e, "&language=").concat(s, "&query=").concat(encodeURI(t), "&include_adult=false=");
                            return new Promise(function (e) {
                                if (t.length < 1) return e([]);
                                fetch(a)
                                    .then(function (t) {
                                        return t.json();
                                    })
                                    .then(function (t) {
                                        e(t.results);
                                    });
                            });
                        },
                        getResultValue: function (t) {
                            return "movie" === t.media_type ? t.title + "  :   Movie " : t.name + "  :   TV SHOWS";
                        },
                        onSubmit: function (t) {
                            (this.tmdb = t.id), "movie" === t.media_type ? this.getMovie() : this.getEpisode();
                        },
                        getEpisode: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    var s, a;
                                    return i.a.wrap(function (e) {
                                        for (;;)
                                            switch ((e.prev = e.next)) {
                                                case 0:
                                                    return (
                                                        (e.next = 2),
                                                        http.get("https://api.themoviedb.org/3/tv/" + t.tmdb + "?api_key=" + t.settings.tmdb_api_key + "&language=" + t.settings.tmdb_lang.iso_639_1 + "&append_to_response=videos")
                                                    );
                                                case 2:
                                                    if (
                                                        ((s = e.sent),
                                                        ((a = _.mapKeys(s.data, function (t, e) {
                                                            return "id" === e ? "tmdb_id" : e;
                                                        })).id = t.form.upcoming.id),
                                                        void 0 === a.videos.results[0])
                                                    ) {
                                                        e.next = 9;
                                                        break;
                                                    }
                                                    (a.trailer_id = a.videos.results[0].key), (e.next = 17);
                                                    break;
                                                case 9:
                                                    if (!t.edit || !t.form.upcoming.trailer_id) {
                                                        e.next = 13;
                                                        break;
                                                    }
                                                    (a.trailer_id = t.form.upcoming.trailer_id), (e.next = 17);
                                                    break;
                                                case 13:
                                                    return (e.next = 15), http.get("https://api.themoviedb.org/3/tv/" + t.tmdb + "/videos?api_key=" + t.settings.tmdb_api_key);
                                                case 15:
                                                    (s = e.sent).data.results[0] && (a.trailer_id = s.data.results[0].key);
                                                case 17:
                                                    "undefined" !== a.genres[0] && (a.genre = a.genres[0].name),
                                                        a.poster_path && (a.poster_path = t.settings.imdb_cover_path + a.poster_path),
                                                        a.backdrop_path && (a.backdrop_path = t.settings.imdb_cover_path + a.backdrop_path),
                                                        a.name && (a.title = a.name),
                                                        a.first_air_date && (a.release_date = a.first_air_date),
                                                        (t.form.upcoming = a);
                                                case 23:
                                                case "end":
                                                    return e.stop();
                                            }
                                    }, e);
                                })
                            )();
                        },
                        getMovie: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    var s, a;
                                    return i.a.wrap(function (e) {
                                        for (;;)
                                            switch ((e.prev = e.next)) {
                                                case 0:
                                                    return (
                                                        (e.next = 2),
                                                        http.get("https://api.themoviedb.org/3/movie/" + t.tmdb + "?api_key=" + t.settings.tmdb_api_key + "&language=" + t.settings.tmdb_lang.iso_639_1 + "&append_to_response=videos")
                                                    );
                                                case 2:
                                                    if (
                                                        ((s = e.sent),
                                                        ((a = _.mapKeys(s.data, function (t, e) {
                                                            return "id" === e ? "tmdb_id" : e;
                                                        })).id = t.form.upcoming.id),
                                                        void 0 === a.videos.results[0])
                                                    ) {
                                                        e.next = 9;
                                                        break;
                                                    }
                                                    (a.trailer_id = a.videos.results[0].key), (e.next = 17);
                                                    break;
                                                case 9:
                                                    if (!t.edit || !t.form.upcoming.trailer_id) {
                                                        e.next = 13;
                                                        break;
                                                    }
                                                    (a.trailer_id = t.form.upcoming.trailer_id), (e.next = 17);
                                                    break;
                                                case 13:
                                                    return (e.next = 15), http.get("https://api.themoviedb.org/3/movie/" + t.tmdb + "/videos?api_key=" + t.settings.tmdb_api_key);
                                                case 15:
                                                    (s = e.sent).data.results[0] && (a.trailer_id = s.data.results[0].key);
                                                case 17:
                                                    "undefined" !== a.genres[0] && (a.genre = a.genres[0].name),
                                                        a.poster_path && (a.poster_path = t.settings.imdb_cover_path + a.poster_path),
                                                        a.backdrop_path && (a.backdrop_path = t.settings.imdb_cover_path + a.backdrop_path),
                                                        (t.form.upcoming = a);
                                                case 21:
                                                case "end":
                                                    return e.stop();
                                            }
                                    }, e);
                                })
                            )();
                        },
                        store: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.post(url + "/admin/upcoming/store", t.form);
                                                    case 3:
                                                        (s = e.sent),
                                                            (t.add = !1),
                                                            (t.edit = !1),
                                                            (t.index = !0),
                                                            (t.form.upcoming = { name: "", overview: "", link: "", backdrop_path: "", poster_path: "" }),
                                                            (t.poster = null),
                                                            (t.backdrop = null),
                                                            t.upcomings.unshift(s.data.body),
                                                            t.showSuccess(s.data.message),
                                                            (e.next = 17);
                                                        break;
                                                    case 14:
                                                        (e.prev = 14), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 17:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 14]]
                                    );
                                })
                            )();
                        },
                        update: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.put(url + "/admin/upcoming/update/" + t.form.upcoming.id, t.form);
                                                    case 3:
                                                        (s = e.sent),
                                                            (t.add = !1),
                                                            (t.edit = !1),
                                                            (t.index = !0),
                                                            (t.form.upcoming = { name: "", overview: "", link: "", backdrop_path: "", poster_path: "" }),
                                                            t.showSuccess(s.data.message),
                                                            (e.next = 14);
                                                        break;
                                                    case 11:
                                                        (e.prev = 11), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 14:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 11]]
                                    );
                                })
                            )();
                        },
                        destroy: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                l(
                                    i.a.mark(function a() {
                                        var r, n;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            return (a.prev = 0), (a.next = 3), axios.delete(url + "/admin/upcoming/destroy/" + t);
                                                        case 3:
                                                            (r = a.sent),
                                                                (n = s.upcomings.findIndex(function (e) {
                                                                    return e.id === t;
                                                                })),
                                                                s.upcomings.splice(n, 1),
                                                                s.paginate.filteredUpcomings.list.splice(e, 1),
                                                                s.showSuccess(r.data.message),
                                                                (a.next = 13);
                                                            break;
                                                        case 10:
                                                            (a.prev = 10), (a.t0 = a.catch(0)), s.showError();
                                                        case 13:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 10]]
                                        );
                                    })
                                )
                            );
                        },
                        storePoster: function (t) {
                            var e = this;
                            return l(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        if (void 0 === t.target.files[0]) {
                                                            s.next = 14;
                                                            break;
                                                        }
                                                        return (s.prev = 1), (e.poster = t.target.files[0]), (a = new FormData()).append("image", e.poster), (s.next = 7), axios.post(url + "/admin/upcoming/image/store", a);
                                                    case 7:
                                                        (r = s.sent), (e.form.upcoming.poster_path = r.data.image_path), (s.next = 14);
                                                        break;
                                                    case 11:
                                                        (s.prev = 11), (s.t0 = s.catch(1)), e.showError(s.t0.response);
                                                    case 14:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[1, 11]]
                                    );
                                })
                            )();
                        },
                        storeBackdrop: function (t) {
                            var e = this;
                            return l(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        if (void 0 === t.target.files[0]) {
                                                            s.next = 14;
                                                            break;
                                                        }
                                                        return (s.prev = 1), (e.backdrop = t.target.files[0]), (a = new FormData()).append("image", e.backdrop), (s.next = 7), axios.post(url + "/admin/upcoming/image/store", a);
                                                    case 7:
                                                        (r = s.sent), (e.form.upcoming.backdrop_path = r.data.image_path), (s.next = 14);
                                                        break;
                                                    case 11:
                                                        (s.prev = 11), (s.t0 = s.catch(1)), e.showError(s.t0.response);
                                                    case 14:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[1, 11]]
                                    );
                                })
                            )();
                        },
                    },
                    computed: {
                        filteredUpcomings: function () {
                            var t = this;
                            return this.upcomings.filter(function (e) {
                                return e.title.toLowerCase().match(t.search.toLowerCase());
                            });
                        },
                    },
                    mixins: [r.a, n.a],
                },
                d = s(4),
                u = Object(d.a)(
                    c,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-md-12 grid-margin" }, [
                                s("div", { staticClass: "d-flex justify-content-between flex-wrap" }, [
                                    t._m(0),
                                    t._v(" "),
                                    s("div", { staticClass: "d-flex justify-content-between align-items-end flex-wrap" }, [
                                        t.index
                                            ? s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.create();
                                                          },
                                                      },
                                                  },
                                                  [t._v("Add Upcoming")]
                                              )
                                            : t._e(),
                                        t._v(" "),
                                        t.index
                                            ? t._e()
                                            : s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.back();
                                                          },
                                                      },
                                                  },
                                                  [t._v("Back")]
                                              ),
                                    ]),
                                ]),
                            ]),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-md-6 grid-margin" }, [
                                      s("ul", { staticClass: "navbar-nav mr-lg-4 w-100" }, [
                                          s("li", { staticClass: "nav-item nav-search d-none d-lg-block w-100" }, [
                                              s("div", { staticClass: "input-group" }, [
                                                  t._m(1),
                                                  t._v(" "),
                                                  s("input", {
                                                      directives: [{ name: "model", rawName: "v-model", value: t.search, expression: "search" }],
                                                      staticClass: "form-control",
                                                      attrs: { type: "text", placeholder: "Search now", "aria-label": "search", "aria-describedby": "search" },
                                                      domProps: { value: t.search },
                                                      on: {
                                                          input: function (e) {
                                                              e.target.composing || (t.search = e.target.value);
                                                          },
                                                      },
                                                  }),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s(
                                                  "div",
                                                  { staticClass: "table-responsive" },
                                                  [
                                                      s(
                                                          "table",
                                                          { staticClass: "table", attrs: { "aria-describedby": "Upcoming Table" } },
                                                          [
                                                              t._m(2),
                                                              t._v(" "),
                                                              s(
                                                                  "tbody",
                                                                  t._l(t.paginated("filteredUpcomings"), function (e, a) {
                                                                      return s("tr", { key: a }, [
                                                                          s("td", [s("img", { attrs: { src: e.poster_path, alt: "poster path", height: "80", width: "80" } })]),
                                                                          t._v(" "),
                                                                          s("td", [t._v(t._s(e.id))]),
                                                                          t._v(" "),
                                                                          s("td", [t._v(t._s(e.title))]),
                                                                          t._v(" "),
                                                                          s("td", [
                                                                              s("div", { staticClass: "list-icons" }, [
                                                                                  s(
                                                                                      "a",
                                                                                      {
                                                                                          staticClass: "list-icons-item mr-2",
                                                                                          attrs: { "data-original-title": "Edit", rel: "tooltip", title: "" },
                                                                                          on: {
                                                                                              click: function (s) {
                                                                                                  return t.editing(e);
                                                                                              },
                                                                                          },
                                                                                      },
                                                                                      [s("em", { staticClass: "mdi mdi-pencil fa-lg", staticStyle: { color: "#4d83ff" } })]
                                                                                  ),
                                                                                  t._v(" "),
                                                                                  s(
                                                                                      "a",
                                                                                      {
                                                                                          staticClass: "list-icons-item text-warning",
                                                                                          attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                          on: {
                                                                                              click: function (s) {
                                                                                                  return t.destroy(e.id, a);
                                                                                              },
                                                                                          },
                                                                                      },
                                                                                      [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                                  ),
                                                                              ]),
                                                                          ]),
                                                                      ]);
                                                                  }),
                                                                  0
                                                              ),
                                                              t._v(" "),
                                                              t.filteredUpcomings.length ? s("paginate", { attrs: { list: t.filteredUpcomings, per: 5, name: "filteredUpcomings", tag: "tbody" } }) : t._e(),
                                                          ],
                                                          1
                                                      ),
                                                      t._v(" "),
                                                      t.filteredUpcomings.length
                                                          ? s("paginate-links", {
                                                                staticClass: "float-right",
                                                                attrs: {
                                                                    async: !0,
                                                                    classes: { ul: "pagination", li: "page-item", a: "page-link", ".next > a": "next-link", ".prev > a": "prev-link" },
                                                                    "hide-single-page": !0,
                                                                    limit: 5,
                                                                    "show-step-links": !0,
                                                                    for: "filteredUpcomings",
                                                                },
                                                            })
                                                          : t._e(),
                                                  ],
                                                  1
                                              ),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.add || t.edit
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s("section", [
                                                  s(
                                                      "div",
                                                      { staticClass: "form-group" },
                                                      [
                                                          s("autocomplete", {
                                                              attrs: {
                                                                  search: t.getSearchByName,
                                                                  placeholder: "Search Movie by Name",
                                                                  "aria-label": "Search Movie by Name",
                                                                  "data-loading": "true",
                                                                  "data-position": "above",
                                                                  "get-result-value": t.getResultValue,
                                                              },
                                                              on: { submit: t.onSubmit },
                                                          }),
                                                      ],
                                                      1
                                                  ),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      s("div", { staticClass: "input-group" }, [
                                                          s("input", {
                                                              directives: [{ name: "model", rawName: "v-model", value: t.tmdb, expression: "tmdb" }],
                                                              staticClass: "form-control",
                                                              attrs: { type: "text", placeholder: "Example : tt7286456", "aria-label": "Search Movie - Series - Animes" },
                                                              domProps: { value: t.tmdb },
                                                              on: {
                                                                  input: function (e) {
                                                                      e.target.composing || (t.tmdb = e.target.value);
                                                                  },
                                                              },
                                                          }),
                                                          t._v(" "),
                                                          s("div", { staticClass: "input-group-append" }, [
                                                              s(
                                                                  "button",
                                                                  {
                                                                      staticClass: "btn btn-sm btn-primary",
                                                                      attrs: { type: "type", disabled: !t.settings.tmdb_api_key },
                                                                      on: {
                                                                          click: function (e) {
                                                                              return t.getMovie();
                                                                          },
                                                                      },
                                                                  },
                                                                  [t._v("Search")]
                                                              ),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "title" } }, [t._v("Upcoming Title")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.upcoming.title, expression: "form.upcoming.title" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "title", type: "text" },
                                                                  domProps: { value: t.form.upcoming.title },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.upcoming, "title", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "title" } }, [t._v("Overview")]),
                                                              t._v(" "),
                                                              s("textarea", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.upcoming.overview, expression: "form.upcoming.overview" }],
                                                                  staticClass: "form-control pb-3",
                                                                  attrs: { id: "overview", required: "", rows: "8" },
                                                                  domProps: { value: t.form.upcoming.overview },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.upcoming, "overview", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              t.form.upcoming.poster_path
                                                                  ? s("img", { staticClass: "poster", attrs: { src: t.form.upcoming.poster_path, alt: "poster path", "data-loaded": "true", height: "316", width: "210" } })
                                                                  : t._e(),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.upcoming.poster_path, expression: "form.upcoming.poster_path" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "poster_path", name: "poster_path", placeholder: "Poster Image Link or Upload", required: "", type: "text" },
                                                                  domProps: { value: t.form.upcoming.poster_path },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.upcoming, "poster_path", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "col-md-4" }, [
                                                      s("div", { staticClass: "form-group" }, [
                                                          s("label", [t._v("Poster upload")]),
                                                          t._v(" "),
                                                          s("input", { staticClass: "file-upload-default" }),
                                                          t._v(" "),
                                                          s("div", { staticClass: "input-group col-xs-12" }, [
                                                              s("input", { staticClass: "form-control file-upload-info", attrs: { id: "poster", placeholder: "Upload Image", type: "file" }, on: { change: t.storePoster } }),
                                                              t._v(" "),
                                                              t._m(3),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "title" } }, [t._v("Backdrop Path")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.upcoming.backdrop_path, expression: "form.upcoming.backdrop_path" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "backdrop_path", name: "backdrop_path", placeholder: "Poster Image Link", required: "", type: "text" },
                                                                  domProps: { value: t.form.upcoming.backdrop_path },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.upcoming, "backdrop_path", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "title" } }, [t._v("Genre")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.upcoming.genre, expression: "form.upcoming.genre" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "link", placeholder: "Trailer ID", required: "", type: "text" },
                                                                  domProps: { value: t.form.upcoming.genre },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.upcoming, "genre", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "release_date" } }, [t._v("Release Date")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.upcoming.release_date, expression: "form.upcoming.release_date" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "release_date", placeholder: "Release Date", required: "", type: "Date" },
                                                                  domProps: { value: t.form.upcoming.release_date },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.upcoming, "release_date", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "title" } }, [t._v("Youtube Trailer ID")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.upcoming.trailer_id, expression: "form.upcoming.trailer_id" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "link", placeholder: "Trailer ID", required: "", type: "text" },
                                                                  domProps: { value: t.form.upcoming.trailer_id },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.upcoming, "trailer_id", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row justify-content-end" }, [
                                                      s("div", { staticClass: "col-auto" }, [
                                                          t.add
                                                              ? s(
                                                                    "button",
                                                                    {
                                                                        staticClass: "btn btn-primary mr-2",
                                                                        attrs: { type: "submit" },
                                                                        on: {
                                                                            click: function (e) {
                                                                                return e.preventDefault(), t.store();
                                                                            },
                                                                        },
                                                                    },
                                                                    [t._v("Save")]
                                                                )
                                                              : t._e(),
                                                          t._v(" "),
                                                          t.edit
                                                              ? s(
                                                                    "button",
                                                                    {
                                                                        staticClass: "btn btn-primary mr-2",
                                                                        attrs: { type: "submit" },
                                                                        on: {
                                                                            click: function (e) {
                                                                                return e.preventDefault(), t.update();
                                                                            },
                                                                        },
                                                                    },
                                                                    [t._v("Update")]
                                                                )
                                                              : t._e(),
                                                      ]),
                                                  ]),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "d-flex align-items-end flex-wrap" }, [e("div", { staticClass: "d-flex" })]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "input-group-prepend" }, [e("span", { staticClass: "input-group-text", attrs: { id: "search" } }, [e("i", { staticClass: "mdi mdi-magnify" })])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("thead", [
                                e("tr", [
                                    e("th", { attrs: { id: "cover" } }, [this._v("Cover")]),
                                    this._v(" "),
                                    e("th", { attrs: { id: "id" } }, [this._v("ID")]),
                                    this._v(" "),
                                    e("th", { attrs: { id: "name" } }, [this._v("Title")]),
                                    this._v(" "),
                                    e("th", { attrs: { id: "options" } }, [this._v("OPTIONS")]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                              Upload\n                            ")]),
                            ]);
                        },
                    ],
                    !1,
                    null,
                    null,
                    null
                );
            e.default = u.exports;
        },
        354: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a);
            function r(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function n(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var n = t.apply(e, s);
                        function o(t) {
                            r(n, a, i, o, l, "next", t);
                        }
                        function l(t) {
                            r(n, a, i, o, l, "throw", t);
                        }
                        o(void 0);
                    });
                };
            }
            var o = {
                    data: function () {
                        return {
                            index: !0,
                            add: !1,
                            edit: !1,
                            search: "",
                            form: { plan: { name: "", price: "", description: "", is_active: "", currency: "" } },
                            plans: [],
                            subscriptions: [],
                            paypal: [],
                            paginate: ["filteredPlans", "filteredSubscriptions", "filteredPaypal"],
                        };
                    },
                    mounted: function () {
                        var t = this;
                        return n(
                            i.a.mark(function e() {
                                var s;
                                return i.a.wrap(function (e) {
                                    for (;;)
                                        switch ((e.prev = e.next)) {
                                            case 0:
                                                return (e.next = 2), axios.get(url + "/admin/plans/data");
                                            case 2:
                                                return (s = e.sent), (t.plans = s.data), (e.next = 6), axios.get(url + "/admin/subscriptions/data");
                                            case 6:
                                                return (s = e.sent), (t.subscriptions = s.data), (e.next = 10), axios.get(url + "/admin/subscriptions/paypal");
                                            case 10:
                                                (s = e.sent), (t.paypal = s.data);
                                            case 12:
                                            case "end":
                                                return e.stop();
                                        }
                                }, e);
                            })
                        )();
                    },
                    methods: {
                        create: function () {
                            (this.index = !1), (this.edit = !1), (this.add = !0);
                        },
                        editing: function (t) {
                            (this.index = !1), (this.edit = !0), (this.form.plan = t), (this.form.plans = "");
                        },
                        back: function () {
                            (this.form.plan = ""), (this.add = !1), (this.edit = !1), (this.index = !0);
                        },
                        store: function () {
                            var t = this;
                            axios
                                .post(url + "/admin/plans/store", this.form)
                                .then(function (e) {
                                    (t.add = !1), (t.edit = !1), (t.index = !0), (t.form.plan = {}), t.plans.unshift(e.data.body), t.showSuccess(e.data.message);
                                })
                                .catch(function (e) {
                                    t.showError(e.response);
                                });
                        },
                        update: function () {
                            var t = this;
                            axios
                                .put(url + "/admin/plans/update/" + this.form.plan.id, this.form)
                                .then(function (e) {
                                    (t.edit = !1), (t.index = !0), (t.form.plans = []), t.showSuccess(e.data.message);
                                })
                                .catch(function (e) {
                                    t.showError(e.response);
                                });
                        },
                        destroy: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                n(
                                    i.a.mark(function a() {
                                        var r, n;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            return (a.prev = 0), (a.next = 3), axios.delete(url + "/admin/plans/destroy/" + t);
                                                        case 3:
                                                            (r = a.sent),
                                                                (n = s.plans.findIndex(function (e) {
                                                                    return e.id === t;
                                                                })),
                                                                s.plans.splice(n, 1),
                                                                s.paginate.filteredPlans.list.splice(e, 1),
                                                                s.showSuccess(r.data.message),
                                                                (a.next = 13);
                                                            break;
                                                        case 10:
                                                            (a.prev = 10), (a.t0 = a.catch(0)), s.showError();
                                                        case 13:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 10]]
                                        );
                                    })
                                )
                            );
                        },
                    },
                    computed: {
                        filteredPlans: function () {
                            var t = this;
                            return this.plans.filter(function (e) {
                                return e.name.toLowerCase().match(t.search.toLowerCase());
                            });
                        },
                        filteredSubscriptions: function () {
                            return _.orderBy(this.subscriptions, "created_at").reverse().splice(0, 10);
                        },
                        filteredPaypal: function () {
                            return _.orderBy(this.paypal, "created_at").reverse().splice(0, 10);
                        },
                    },
                    mixins: [s(3).a],
                },
                l = s(4),
                c = Object(l.a)(
                    o,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-md-12 grid-margin" }, [
                                s("div", { staticClass: "d-flex justify-content-between flex-wrap" }, [
                                    t._m(0),
                                    t._v(" "),
                                    s("div", { staticClass: "d-flex justify-content-between align-items-end flex-wrap" }, [
                                        t.index
                                            ? s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.create();
                                                          },
                                                      },
                                                  },
                                                  [t._v("Add Plan")]
                                              )
                                            : t._e(),
                                        t._v(" "),
                                        t.index
                                            ? t._e()
                                            : s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.back();
                                                          },
                                                      },
                                                  },
                                                  [t._v("Back")]
                                              ),
                                    ]),
                                ]),
                            ]),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s("div", { staticClass: "table-responsive" }, [
                                                  s(
                                                      "table",
                                                      { staticClass: "table", attrs: { "aria-describedby": "Ads Table" } },
                                                      [
                                                          t._m(1),
                                                          t._v(" "),
                                                          s(
                                                              "tbody",
                                                              t._l(t.paginated("filteredPlans"), function (e, a) {
                                                                  return s("tr", { key: a }, [
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.name))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.price))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.description))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [
                                                                          s("div", { staticClass: "list-icons" }, [
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item mr-2",
                                                                                      attrs: { "data-original-title": "Edit", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.editing(e);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-pencil fa-lg", staticStyle: { color: "#4d83ff" } })]
                                                                              ),
                                                                              t._v(" "),
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item text-warning",
                                                                                      attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.destroy(e.id, a);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                              ),
                                                                          ]),
                                                                      ]),
                                                                  ]);
                                                              }),
                                                              0
                                                          ),
                                                          t._v(" "),
                                                          t.filteredPlans.length ? s("paginate", { attrs: { list: t.filteredPlans, per: 5, name: "filteredPlans", tag: "tbody" } }) : t._e(),
                                                          t._v(" "),
                                                          t.filteredPlans.length
                                                              ? s("paginate-links", {
                                                                    staticClass: "float-right",
                                                                    attrs: {
                                                                        async: !0,
                                                                        classes: { ul: "pagination", li: "page-item", a: "page-link", ".next > a": "next-link", ".prev > a": "prev-link" },
                                                                        "hide-single-page": !0,
                                                                        limit: 5,
                                                                        "show-step-links": !0,
                                                                        for: "filteredPlans",
                                                                    },
                                                                })
                                                              : t._e(),
                                                      ],
                                                      1
                                                  ),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s("p", { staticClass: "card-title" }, [t._v("Stripe Active Subscriptions")]),
                                              t._v(" "),
                                              s("div", { staticClass: "table-responsive" }, [
                                                  s(
                                                      "table",
                                                      { staticClass: "table", attrs: { "aria-describedby": "Ads Table" } },
                                                      [
                                                          t._m(2),
                                                          t._v(" "),
                                                          s(
                                                              "tbody",
                                                              t._l(t.paginated("filteredSubscriptions"), function (e, a) {
                                                                  return s("tr", { key: a }, [
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.id))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.email))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.user_id))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.pack_name))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.stripe_status))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.stripe_plan))]),
                                                                  ]);
                                                              }),
                                                              0
                                                          ),
                                                          t._v(" "),
                                                          t.filteredSubscriptions.length ? s("paginate", { attrs: { list: t.filteredSubscriptions, per: 5, name: "filteredSubscriptions", tag: "tbody" } }) : t._e(),
                                                          t._v(" "),
                                                          t.filteredSubscriptions.length
                                                              ? s("paginate-links", {
                                                                    staticClass: "float-right",
                                                                    attrs: {
                                                                        async: !0,
                                                                        classes: { ul: "pagination", li: "page-item", a: "page-link", ".next > a": "next-link", ".prev > a": "prev-link" },
                                                                        "hide-single-page": !0,
                                                                        limit: 5,
                                                                        "show-step-links": !0,
                                                                        for: "filteredSubscriptions",
                                                                    },
                                                                })
                                                              : t._e(),
                                                      ],
                                                      1
                                                  ),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s("p", { staticClass: "card-title" }, [t._v("Paypal Subscriptions")]),
                                              t._v(" "),
                                              s("div", { staticClass: "table-responsive" }, [
                                                  s(
                                                      "table",
                                                      { staticClass: "table", attrs: { "aria-describedby": "Ads Table" } },
                                                      [
                                                          t._m(3),
                                                          t._v(" "),
                                                          s(
                                                              "tbody",
                                                              t._l(t.paginated("filteredPaypal"), function (e, a) {
                                                                  return s("tr", { key: a }, [
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.id))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.email))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.pack_name))]),
                                                                      t._v(" "),
                                                                      1 === e.premuim
                                                                          ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                          : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                  ]);
                                                              }),
                                                              0
                                                          ),
                                                          t._v(" "),
                                                          t.filteredPaypal.length ? s("paginate", { attrs: { list: t.filteredPaypal, per: 5, name: "filteredPaypal", tag: "tbody" } }) : t._e(),
                                                          t._v(" "),
                                                          t.filteredPaypal.length
                                                              ? s("paginate-links", {
                                                                    staticClass: "float-right",
                                                                    attrs: {
                                                                        async: !0,
                                                                        classes: { ul: "pagination", li: "page-item", a: "page-link", ".next > a": "next-link", ".prev > a": "prev-link" },
                                                                        "hide-single-page": !0,
                                                                        limit: 5,
                                                                        "show-step-links": !0,
                                                                        for: "filteredPaypal",
                                                                    },
                                                                })
                                                              : t._e(),
                                                      ],
                                                      1
                                                  ),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.add || t.edit
                                ? s("div", { staticClass: "col-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s("form", { staticClass: "forms-sample" }, [
                                                  s("div", { staticClass: "form-group" }, [
                                                      s("label", { attrs: { for: "name" } }, [t._v("Title")]),
                                                      t._v(" "),
                                                      s("input", {
                                                          directives: [{ name: "model", rawName: "v-model", value: t.form.plan.name, expression: "form.plan.name" }],
                                                          staticClass: "form-control",
                                                          attrs: { id: "name", placeholder: "Title", type: "text" },
                                                          domProps: { value: t.form.plan.name },
                                                          on: {
                                                              input: function (e) {
                                                                  e.target.composing || t.$set(t.form.plan, "name", e.target.value);
                                                              },
                                                          },
                                                      }),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      s("label", { attrs: { for: "Description" } }, [t._v("Description")]),
                                                      t._v(" "),
                                                      s("textarea", {
                                                          directives: [{ name: "model", rawName: "v-model", value: t.form.plan.description, expression: "form.plan.description" }],
                                                          staticClass: "form-control",
                                                          attrs: { id: "Description", placeholder: "Description", type: "text", rows: "4" },
                                                          domProps: { value: t.form.plan.description },
                                                          on: {
                                                              input: function (e) {
                                                                  e.target.composing || t.$set(t.form.plan, "description", e.target.value);
                                                              },
                                                          },
                                                      }),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      s("label", { attrs: { for: "price" } }, [t._v("Price")]),
                                                      t._v(" "),
                                                      s("input", {
                                                          directives: [{ name: "model", rawName: "v-model", value: t.form.plan.price, expression: "form.plan.price" }],
                                                          staticClass: "form-control",
                                                          attrs: { id: "price", placeholder: "price", type: "text" },
                                                          domProps: { value: t.form.plan.price },
                                                          on: {
                                                              input: function (e) {
                                                                  e.target.composing || t.$set(t.form.plan, "price", e.target.value);
                                                              },
                                                          },
                                                      }),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      s("label", { attrs: { for: "currency_plan_app" } }, [t._v("Currency (inside the app text only)")]),
                                                      t._v(" "),
                                                      s("input", {
                                                          directives: [{ name: "model", rawName: "v-model", value: t.form.plan.currency_plan_app, expression: "form.plan.currency_plan_app" }],
                                                          staticClass: "form-control",
                                                          attrs: { id: "currency_plan_app", placeholder: "currency_plan_app", type: "text" },
                                                          domProps: { value: t.form.plan.currency_plan_app },
                                                          on: {
                                                              input: function (e) {
                                                                  e.target.composing || t.$set(t.form.plan, "currency_plan_app", e.target.value);
                                                              },
                                                          },
                                                      }),
                                                  ]),
                                                  t._v(" "),
                                                  t._m(4),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      s("label", { attrs: { for: "stripe_plan_id" } }, [t._v("Stripe Product Id")]),
                                                      t._v(" "),
                                                      s("input", {
                                                          directives: [{ name: "model", rawName: "v-model", value: t.form.plan.stripe_plan_id, expression: "form.plan.stripe_plan_id" }],
                                                          staticClass: "form-control",
                                                          attrs: { id: "stripe_plan_id", placeholder: "stripe_plan_id", type: "text" },
                                                          domProps: { value: t.form.plan.stripe_plan_id },
                                                          on: {
                                                              input: function (e) {
                                                                  e.target.composing || t.$set(t.form.plan, "stripe_plan_id", e.target.value);
                                                              },
                                                          },
                                                      }),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      s("label", { attrs: { for: "stripe_price_id" } }, [t._v("Stripe Price Id")]),
                                                      t._v(" "),
                                                      s("input", {
                                                          directives: [{ name: "model", rawName: "v-model", value: t.form.plan.stripe_price_id, expression: "form.plan.stripe_price_id" }],
                                                          staticClass: "form-control",
                                                          attrs: { id: "stripe_price_id", placeholder: "stripe_price_id", type: "text" },
                                                          domProps: { value: t.form.plan.stripe_price_id },
                                                          on: {
                                                              input: function (e) {
                                                                  e.target.composing || t.$set(t.form.plan, "stripe_price_id", e.target.value);
                                                              },
                                                          },
                                                      }),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      s("label", { attrs: { for: "name" } }, [t._v("Pack Duration ( Billing period )")]),
                                                      t._v(" "),
                                                      s("input", {
                                                          directives: [{ name: "model", rawName: "v-model", value: t.form.plan.pack_duration, expression: "form.plan.pack_duration" }],
                                                          staticClass: "form-control",
                                                          attrs: { id: "pack_duration", placeholder: "pack_duration", type: "number" },
                                                          domProps: { value: t.form.plan.pack_duration },
                                                          on: {
                                                              input: function (e) {
                                                                  e.target.composing || t.$set(t.form.plan, "pack_duration", e.target.value);
                                                              },
                                                          },
                                                      }),
                                                  ]),
                                                  t._v(" "),
                                                  t.add
                                                      ? s(
                                                            "button",
                                                            {
                                                                staticClass: "btn btn-primary mr-2",
                                                                attrs: { type: "submit" },
                                                                on: {
                                                                    click: function (e) {
                                                                        return e.preventDefault(), t.store();
                                                                    },
                                                                },
                                                            },
                                                            [t._v("Save")]
                                                        )
                                                      : t._e(),
                                                  t._v(" "),
                                                  t.edit
                                                      ? s(
                                                            "button",
                                                            {
                                                                staticClass: "btn btn-primary mr-2",
                                                                attrs: { type: "submit" },
                                                                on: {
                                                                    click: function (e) {
                                                                        return e.preventDefault(), t.update();
                                                                    },
                                                                },
                                                            },
                                                            [t._v("Update")]
                                                        )
                                                      : t._e(),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "d-flex align-items-end flex-wrap" }, [e("div", { staticClass: "d-flex" })]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("thead", [
                                e("tr", [
                                    e("th", { staticClass: "text-center", attrs: { id: "title" } }, [this._v("Title")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "ads link" } }, [this._v("Price")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "options" } }, [this._v("Description")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "options" } }, [this._v("Options")]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { staticClass: "text-center", attrs: { id: "title" } }, [t._v("ID")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "ads link" } }, [t._v("User E-mail")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "ads link" } }, [t._v("User id")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "ads link" } }, [t._v("Pack Name")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "options" } }, [t._v("Stripe Status")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "options" } }, [t._v("Stripe Plan")]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("thead", [
                                e("tr", [
                                    e("th", { staticClass: "text-center", attrs: { id: "title" } }, [this._v("ID")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "ads link" } }, [this._v("E-Email")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "options" } }, [this._v("Package Name")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "premuim" } }, [this._v("Premuim Status")]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("em", { staticClass: "mdi mdi-video menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("STRIPE")])]);
                        },
                    ],
                    !1,
                    null,
                    null,
                    null
                );
            e.default = c.exports;
        },
        355: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a),
                r = s(3),
                n = s(6);
            function o(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function l(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var r = t.apply(e, s);
                        function n(t) {
                            o(r, a, i, n, l, "next", t);
                        }
                        function l(t) {
                            o(r, a, i, n, l, "throw", t);
                        }
                        n(void 0);
                    });
                };
            }
            var c = {
                    data: function () {
                        return { genres: [], genre: "", paginate: ["genres"], edit: !1, editing: {} };
                    },
                    mounted: function () {
                        var t = this;
                        return l(
                            i.a.mark(function e() {
                                var s;
                                return i.a.wrap(function (e) {
                                    for (;;)
                                        switch ((e.prev = e.next)) {
                                            case 0:
                                                return (e.next = 2), axios.get(url + "/admin/categories/data");
                                            case 2:
                                                (s = e.sent), (t.genres = s.data);
                                            case 4:
                                            case "end":
                                                return e.stop();
                                        }
                                }, e);
                            })
                        )();
                    },
                    methods: {
                        store: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.post(url + "/admin/categories/store", { name: t.genre });
                                                    case 3:
                                                        (s = e.sent), t.genres.unshift(s.data.body), (t.genre = ""), t.showSuccess(s.data.message), (e.next = 12);
                                                        break;
                                                    case 9:
                                                        (e.prev = 9), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 12:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 9]]
                                    );
                                })
                            )();
                        },
                        destroy: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                l(
                                    i.a.mark(function a() {
                                        var r, n;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            return (a.prev = 0), (a.next = 3), axios.delete(url + "/admin/categories/destroy/" + t);
                                                        case 3:
                                                            (r = a.sent),
                                                                (n = s.genres.findIndex(function (e) {
                                                                    return e.id === t;
                                                                })),
                                                                s.genres.splice(n, 1),
                                                                s.paginate.genres.list.splice(e, 1),
                                                                s.showSuccess(r.data.message),
                                                                (a.next = 13);
                                                            break;
                                                        case 10:
                                                            (a.prev = 10), (a.t0 = a.catch(0)), s.showError();
                                                        case 13:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 10]]
                                        );
                                    })
                                )
                            );
                        },
                        update: function (t, e) {
                            (this.edit = !0), (this.genre = t.name), (this.editing = t), (this.editing.index = e);
                        },
                        cancel: function () {
                            (this.edit = !1), (this.genre = ""), (this.editing = {});
                        },
                        updateSubmit: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.put(url + "/admin/categories/update/" + t.editing.id, { name: t.genre, id: t.editing.id });
                                                    case 3:
                                                        (s = e.sent),
                                                            (t.genres[t.editing.index] = s.data.body),
                                                            (t.paginate.genres.list[t.editing.index] = s.data.body),
                                                            (t.edit = !1),
                                                            (t.genre = ""),
                                                            (t.editing = {}),
                                                            t.showSuccess(s.data.message),
                                                            (e.next = 15);
                                                        break;
                                                    case 12:
                                                        (e.prev = 12), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 15:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 12]]
                                    );
                                })
                            )();
                        },
                    },
                    mixins: [r.a, n.a],
                },
                d = s(4),
                u = Object(d.a)(
                    c,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                s("div", { staticClass: "card" }, [
                                    s("div", { staticClass: "card-body" }, [
                                        s("div", { staticClass: "row" }, [
                                            s("div", { staticClass: "col-12" }, [
                                                s("div", { staticClass: "form-group" }, [
                                                    s("label", { attrs: { for: "genre" } }, [t._v("Genre")]),
                                                    t._v(" "),
                                                    s("input", {
                                                        directives: [{ name: "model", rawName: "v-model", value: t.genre, expression: "genre" }],
                                                        staticClass: "form-control",
                                                        attrs: { id: "genre", placeholder: "Genre name", type: "text" },
                                                        domProps: { value: t.genre },
                                                        on: {
                                                            input: function (e) {
                                                                e.target.composing || (t.genre = e.target.value);
                                                            },
                                                        },
                                                    }),
                                                ]),
                                                t._v(" "),
                                                t.edit
                                                    ? t._e()
                                                    : s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-info",
                                                              attrs: { disabled: !t.genre, type: "submit" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.store();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Add")]
                                                      ),
                                                t._v(" "),
                                                t.edit
                                                    ? s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-info",
                                                              attrs: { disabled: !t.genre, type: "button" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.updateSubmit();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Update")]
                                                      )
                                                    : t._e(),
                                                t._v(" "),
                                                t.edit
                                                    ? s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-light",
                                                              attrs: { disabled: !t.genre, type: "button" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.cancel();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Cancel")]
                                                      )
                                                    : t._e(),
                                            ]),
                                        ]),
                                        t._v(" "),
                                        s(
                                            "div",
                                            { staticClass: "table-responsive" },
                                            [
                                                s(
                                                    "table",
                                                    { staticClass: "table", attrs: { "aria-describedby": "Genres Table" } },
                                                    [
                                                        t._m(0),
                                                        t._v(" "),
                                                        s(
                                                            "tbody",
                                                            t._l(t.paginated("genres"), function (e, a) {
                                                                return s("tr", { key: a }, [
                                                                    s("td", [t._v(t._s(e.name))]),
                                                                    t._v(" "),
                                                                    s("td", [
                                                                        s("div", { staticClass: "list-icons" }, [
                                                                            s(
                                                                                "a",
                                                                                {
                                                                                    staticClass: "list-icons-item mr-2",
                                                                                    attrs: { "data-original-title": "Edit", rel: "tooltip", title: "" },
                                                                                    on: {
                                                                                        click: function (s) {
                                                                                            return t.update(e, a);
                                                                                        },
                                                                                    },
                                                                                },
                                                                                [s("em", { staticClass: "mdi mdi-pencil fa-lg", staticStyle: { color: "#4d83ff" } })]
                                                                            ),
                                                                            t._v(" "),
                                                                            s(
                                                                                "a",
                                                                                {
                                                                                    staticClass: "list-icons-item text-warning",
                                                                                    attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                    on: {
                                                                                        click: function (s) {
                                                                                            return t.destroy(e.id, a);
                                                                                        },
                                                                                    },
                                                                                },
                                                                                [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                            ),
                                                                        ]),
                                                                    ]),
                                                                ]);
                                                            }),
                                                            0
                                                        ),
                                                        t._v(" "),
                                                        t.genres && t.genres.length ? s("paginate", { attrs: { list: t.genres, per: 10, name: "genres", tag: "tbody" } }) : t._e(),
                                                    ],
                                                    1
                                                ),
                                                t._v(" "),
                                                s("paginate-links", {
                                                    staticClass: "float-right",
                                                    attrs: {
                                                        async: !0,
                                                        classes: { ul: "pagination", li: "page-item", a: "page-link", ".next > a": "next-link", ".prev > a": "prev-link" },
                                                        "hide-single-page": !0,
                                                        limit: 5,
                                                        "show-step-links": !0,
                                                        for: "genres",
                                                    },
                                                }),
                                            ],
                                            1
                                        ),
                                    ]),
                                ]),
                            ]),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("thead", [e("tr", [e("th", { attrs: { id: "name" } }, [this._v("Names")]), this._v(" "), e("th", { attrs: { id: "Action" } }, [this._v("Actions")])])]);
                        },
                    ],
                    !1,
                    null,
                    null,
                    null
                );
            e.default = u.exports;
        },
        356: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a),
                r = s(3),
                n = s(6);
            function o(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function l(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var r = t.apply(e, s);
                        function n(t) {
                            o(r, a, i, n, l, "next", t);
                        }
                        function l(t) {
                            o(r, a, i, n, l, "throw", t);
                        }
                        n(void 0);
                    });
                };
            }
            var c = {
                    data: function () {
                        return { index: !0, search: "", form: { suggestion: { name: "", message: "" }, notification: !1 }, suggestions: [], options: [], loading: !1, paginate: ["filteredSuggestions"] };
                    },
                    mounted: function () {
                        var t = this;
                        return l(
                            i.a.mark(function e() {
                                var s;
                                return i.a.wrap(function (e) {
                                    for (;;)
                                        switch ((e.prev = e.next)) {
                                            case 0:
                                                return (e.next = 2), axios.get(url + "/admin/suggestions/data");
                                            case 2:
                                                (s = e.sent), (t.suggestions = s.data);
                                            case 4:
                                            case "end":
                                                return e.stop();
                                        }
                                }, e);
                            })
                        )();
                    },
                    methods: {
                        back: function () {
                            (this.form.report = ""), (this.add = !1), (this.edit = !1), (this.index = !0);
                        },
                        destroy: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                l(
                                    i.a.mark(function a() {
                                        var r, n;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            return (a.prev = 0), (a.next = 3), axios.delete(url + "/admin/suggestions/destroy/" + t);
                                                        case 3:
                                                            (r = a.sent),
                                                                (n = s.suggestions.findIndex(function (e) {
                                                                    return e.id === t;
                                                                })),
                                                                s.suggestions.splice(n, 1),
                                                                s.paginate.filteredSuggestions.list.splice(e, 1),
                                                                s.showSuccess(r.data.message),
                                                                (a.next = 13);
                                                            break;
                                                        case 10:
                                                            (a.prev = 10), (a.t0 = a.catch(0)), s.showError();
                                                        case 13:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 10]]
                                        );
                                    })
                                )
                            );
                        },
                    },
                    computed: {
                        filteredSuggestions: function () {
                            var t = this;
                            return this.suggestions.filter(function (e) {
                                return e.title.toLowerCase().match(t.search.toLowerCase());
                            });
                        },
                    },
                    mixins: [r.a, n.a],
                },
                d = s(4),
                u = Object(d.a)(
                    c,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            t.index
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s("div", { staticClass: "table-responsive" }, [
                                                  s(
                                                      "table",
                                                      { staticClass: "table", attrs: { "aria-describedby": "Report Table" } },
                                                      [
                                                          t._m(0),
                                                          t._v(" "),
                                                          s(
                                                              "tbody",
                                                              t._l(t.paginated("filteredSuggestions"), function (e, a) {
                                                                  return s("tr", { key: a }, [
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.id))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.title))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.message))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [
                                                                          s(
                                                                              "button",
                                                                              {
                                                                                  staticClass: "btn btn-danger btn-sm",
                                                                                  attrs: { type: "button" },
                                                                                  on: {
                                                                                      click: function (s) {
                                                                                          return t.destroy(e.id, a);
                                                                                      },
                                                                                  },
                                                                              },
                                                                              [t._v("Dismiss")]
                                                                          ),
                                                                      ]),
                                                                  ]);
                                                              }),
                                                              0
                                                          ),
                                                          t._v(" "),
                                                          t.filteredSuggestions.length ? s("paginate", { attrs: { list: t.filteredSuggestions, per: 5, name: "filteredSuggestions", tag: "tbody" } }) : t._e(),
                                                          t._v(" "),
                                                          t.filteredSuggestions.length
                                                              ? s("paginate-links", {
                                                                    staticClass: "float-right",
                                                                    attrs: {
                                                                        async: !0,
                                                                        classes: { ul: "pagination", li: "page-item", a: "page-link", ".next > a": "next-link", ".prev > a": "prev-link" },
                                                                        "hide-single-page": !0,
                                                                        limit: 5,
                                                                        "show-step-links": !0,
                                                                        for: "filteredSuggestions",
                                                                    },
                                                                })
                                                              : t._e(),
                                                      ],
                                                      1
                                                  ),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("thead", [
                                e("tr", [
                                    e("th", { staticClass: "text-center", attrs: { id: "id" } }, [this._v("ID")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "movie_name" } }, [this._v("User Name")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "message" } }, [this._v("Message")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "actions" } }, [this._v("Actions")]),
                                ]),
                            ]);
                        },
                    ],
                    !1,
                    null,
                    null,
                    null
                );
            e.default = u.exports;
        },
        357: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a),
                r = s(3),
                n = s(6);
            function o(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function l(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var r = t.apply(e, s);
                        function n(t) {
                            o(r, a, i, n, l, "next", t);
                        }
                        function l(t) {
                            o(r, a, i, n, l, "throw", t);
                        }
                        n(void 0);
                    });
                };
            }
            var c = {
                    data: function () {
                        return { index: !0, casters: {}, edit: !1, add: !1, pageNum: null, size: "default", align: "right", search: "", form: { caster: { id: "", name: "", original_name: "", profile_path: "" } } };
                    },
                    mounted: function () {
                        var t = this;
                        return l(
                            i.a.mark(function e() {
                                var s;
                                return i.a.wrap(function (e) {
                                    for (;;)
                                        switch ((e.prev = e.next)) {
                                            case 0:
                                                return (e.next = 2), axios.get(url + "/admin/casters/datacasters");
                                            case 2:
                                                (s = e.sent), (t.casters = s.data);
                                            case 4:
                                            case "end":
                                                return e.stop();
                                        }
                                }, e);
                            })
                        )();
                    },
                    methods: {
                        create: function () {
                            (this.index = !1), (this.edit = !1), (this.add = !0);
                        },
                        getCastById: function (t) {
                            var e = this;
                            return l(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (s.prev = 0), (s.next = 3), http.get("https://api.themoviedb.org/3/person/" + t + "?api_key=" + e.settings.tmdb_api_key + "&language=" + e.settings.tmdb_lang.iso_639_1);
                                                    case 3:
                                                        (a = s.sent),
                                                            (r = _.mapKeys(a.data, function (t, e) {
                                                                return "id" === e ? "id" : e;
                                                            })).profile_path && (r.profile_path = e.settings.imdb_cover_path + r.profile_path),
                                                            (e.form.caster = r),
                                                            (s.next = 12);
                                                        break;
                                                    case 9:
                                                        (s.prev = 9), (s.t0 = s.catch(0)), e.showError("Error");
                                                    case 12:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 9]]
                                    );
                                })
                            )();
                        },
                        searchUnit: _.debounce(function () {
                            var t = this;
                            axios.get(url + "/admin/search_casts?q=" + this.search).then(function (e) {
                                t.casters.data = e.data.casts;
                            });
                        }),
                        getResults: function () {
                            var t = this,
                                e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
                            axios.get(url + "/admin/casters/datacasters?page=" + e).then(function (s) {
                                (t.casters = s.data), (t.pageNum = e);
                            });
                        },
                        back: function () {
                            (this.form.caster = ""), (this.add = !1), (this.edit = !1), (this.index = !0);
                        },
                        editing: function (t) {
                            (this.index = !1), (this.edit = !0), (this.form.caster = t);
                        },
                        store: function () {
                            var t = this;
                            axios
                                .post(url + "/admin/casts/store", {
                                    name: this.form.caster.name,
                                    original_name: this.form.caster.original_name,
                                    place_of_birth: this.form.caster.place_of_birth,
                                    profile_path: this.form.caster.profile_path,
                                    birthday: this.form.caster.birthday,
                                    biography: this.form.caster.biography,
                                })
                                .then(function (e) {
                                    (t.add = !1),
                                        (t.edit = !1),
                                        (t.index = !0),
                                        (t.form.caster.id = ""),
                                        (t.form.caster.name = ""),
                                        (t.form.caster.original_name = ""),
                                        (t.form.caster.place_of_birth = ""),
                                        (t.form.caster.profile_path = ""),
                                        (t.form.caster.birthday = ""),
                                        (t.form.caster.biography = ""),
                                        t.casters.data.unshift(e.data.body),
                                        t.showSuccess(e.data.message),
                                        axios.get(url + "/admin/casters/dataweb?page=" + t.pageNum).then(function (e) {
                                            t.casters = e.data;
                                        });
                                })
                                .catch(function (e) {
                                    t.showError(e.response);
                                });
                        },
                        destroy: function (t) {
                            var e = this;
                            this.showConfirm(
                                l(
                                    i.a.mark(function s() {
                                        var a, r;
                                        return i.a.wrap(
                                            function (s) {
                                                for (;;)
                                                    switch ((s.prev = s.next)) {
                                                        case 0:
                                                            return (s.prev = 0), (s.next = 3), axios.delete(url + "/admin/casts/destroy/" + t);
                                                        case 3:
                                                            (a = s.sent),
                                                                (r = e.casters.data.findIndex(function (e) {
                                                                    return e.id === t;
                                                                })),
                                                                e.casters.data.splice(r, 1),
                                                                e.showSuccess(a.data.message),
                                                                (s.next = 12);
                                                            break;
                                                        case 9:
                                                            (s.prev = 9), (s.t0 = s.catch(0)), e.showError();
                                                        case 12:
                                                        case "end":
                                                            return s.stop();
                                                    }
                                            },
                                            s,
                                            null,
                                            [[0, 9]]
                                        );
                                    })
                                )
                            );
                        },
                        fetch: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), http.get("https://api.themoviedb.org/3/genre/tv/list?api_key=" + t.settings.tmdb_api_key + "&language=" + t.settings.tmdb_lang.iso_639_1);
                                                    case 3:
                                                        return (
                                                            (s = e.sent),
                                                            (t.tmdb.series = s.data),
                                                            (e.next = 7),
                                                            http.get("https://api.themoviedb.org/3/genre/movie/list?api_key=" + t.settings.tmdb_api_key + "&language=" + t.settings.tmdb_lang.iso_639_1)
                                                        );
                                                    case 7:
                                                        return (s = e.sent), (t.tmdb.movies = s.data), (e.next = 11), axios.post(url + "/admin/genres/fetch", t.tmdb);
                                                    case 11:
                                                        (s = e.sent), (t.genres = s.data.body), t.showSuccess(s.data.message), (e.next = 19);
                                                        break;
                                                    case 16:
                                                        (e.prev = 16), (e.t0 = e.catch(0)), t.showError();
                                                    case 19:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 16]]
                                    );
                                })
                            )();
                        },
                        storePoster: function (t) {
                            var e = this;
                            return l(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        if (void 0 === t.target.files[0]) {
                                                            s.next = 15;
                                                            break;
                                                        }
                                                        return (s.prev = 1), (e.poster = t.target.files[0]), (a = new FormData()).append("image", e.poster), (s.next = 7), axios.post(url + "/admin/casts/image/store", a);
                                                    case 7:
                                                        (r = s.sent), (e.form.caster.profile_path = r.data.image_path), e.showSuccess(r.data.message), (s.next = 15);
                                                        break;
                                                    case 12:
                                                        (s.prev = 12), (s.t0 = s.catch(1)), e.showError(s.t0.response);
                                                    case 15:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[1, 12]]
                                    );
                                })
                            )();
                        },
                        update: function () {
                            var t = this;
                            axios
                                .put(url + "/admin/casters/updatecast/" + this.form.caster.id, {
                                    name: this.form.caster.name,
                                    id: this.form.caster.id,
                                    original_name: this.form.caster.original_name,
                                    place_of_birth: this.form.caster.place_of_birth,
                                    profile_path: this.form.caster.profile_path,
                                    biography: this.form.caster.biography,
                                })
                                .then(function (e) {
                                    (t.add = !1),
                                        (t.edit = !1),
                                        (t.index = !0),
                                        (t.form.caster = {}),
                                        t.showSuccess(e.data.message),
                                        axios.get(url + "/admin/casters/datacasters?page=" + t.pageNum).then(function (e) {
                                            t.casters = e.data;
                                        });
                                })
                                .catch(function (e) {
                                    t.showError(e.response);
                                });
                        },
                        cancel: function () {
                            (this.edit = !1), (this.genre = ""), (this.editing = {});
                        },
                        updateSubmit: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.put(url + "/admin/genres/update/" + t.editing.id, { name: t.genre, id: t.editing.id });
                                                    case 3:
                                                        (s = e.sent),
                                                            (t.genres[t.editing.index] = s.data.body),
                                                            (t.paginate.genres.list[t.editing.index] = s.data.body),
                                                            (t.edit = !1),
                                                            (t.genre = ""),
                                                            (t.editing = {}),
                                                            t.showSuccess(s.data.message),
                                                            (e.next = 15);
                                                        break;
                                                    case 12:
                                                        (e.prev = 12), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 15:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 12]]
                                    );
                                })
                            )();
                        },
                    },
                    mixins: [r.a, n.a],
                },
                d = s(4),
                u = Object(d.a)(
                    c,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-md-12 grid-margin" }, [
                                s("div", { staticClass: "d-flex justify-content-between flex-wrap" }, [
                                    t._m(0),
                                    t._v(" "),
                                    s("div", { staticClass: "d-flex justify-content-between align-items-end flex-wrap" }, [
                                        t.index
                                            ? s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.create();
                                                          },
                                                      },
                                                  },
                                                  [t._v("\n          Add Caster\n        ")]
                                              )
                                            : t._e(),
                                        t._v(" "),
                                        t.index
                                            ? t._e()
                                            : s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.back();
                                                          },
                                                      },
                                                  },
                                                  [t._v("\n          Back\n        ")]
                                              ),
                                    ]),
                                ]),
                            ]),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-md-6 grid-margin" }, [
                                      s("ul", { staticClass: "navbar-nav mr-lg-4 w-100" }, [
                                          s("li", { staticClass: "nav-item nav-search d-none d-lg-block w-100" }, [
                                              s("div", { staticClass: "input-group" }, [
                                                  t._m(1),
                                                  t._v(" "),
                                                  s("input", {
                                                      directives: [{ name: "model", rawName: "v-model", value: t.search, expression: "search" }],
                                                      staticClass: "form-control",
                                                      attrs: { type: "search", placeholder: "Search now", "aria-label": "search", "aria-describedby": "search" },
                                                      domProps: { value: t.search },
                                                      on: {
                                                          keyup: t.searchUnit,
                                                          input: function (e) {
                                                              e.target.composing || (t.search = e.target.value);
                                                          },
                                                      },
                                                  }),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s(
                                                  "div",
                                                  { staticClass: "table-responsive" },
                                                  [
                                                      s("table", { staticClass: "table", attrs: { "aria-describedby": "table movies", id: "table movies" } }, [
                                                          t._m(2),
                                                          t._v(" "),
                                                          s(
                                                              "tbody",
                                                              t._l(t.casters.data, function (e) {
                                                                  return s("tr", { key: e.id }, [
                                                                      s("td", { staticClass: "text-center" }, [s("img", { attrs: { src: e.profile_path, alt: "poster path", height: "80", width: "80" } })]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.id))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.name))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [
                                                                          s("div", { staticClass: "list-icons" }, [
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item mr-2",
                                                                                      attrs: { "data-original-title": "Edit", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.editing(e);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-pencil fa-lg", staticStyle: { color: "#4d83ff" } })]
                                                                              ),
                                                                              t._v(" "),
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item text-warning",
                                                                                      attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.destroy(e.id);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                              ),
                                                                          ]),
                                                                      ]),
                                                                  ]);
                                                              }),
                                                              0
                                                          ),
                                                      ]),
                                                      t._v(" "),
                                                      s("pagination", { staticClass: "mb-0", attrs: { data: t.casters, "show-disabled": !1, limit: 5, size: t.size, align: t.align }, on: { "pagination-change-page": t.getResults } }),
                                                  ],
                                                  1
                                              ),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.add || t.edit
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s("section", [
                                                  s("div", { staticClass: "poster-container" }, [
                                                      t.form.caster.profile_path
                                                          ? s("img", { staticClass: "poster", attrs: { src: t.form.caster.profile_path, alt: "movie poster", "data-loaded": "true", height: "316", width: "210" } })
                                                          : t._e(),
                                                      t._v(" "),
                                                      s("div", { staticClass: "many-inputs" }, [
                                                          s("div", { staticClass: "input-container" }, [
                                                              s("div", { staticClass: "form-group" }, [
                                                                  s("div", { staticClass: "input-group" }, [
                                                                      s("input", {
                                                                          directives: [{ name: "model", rawName: "v-model", value: t.form.caster.id, expression: "form.caster.id" }],
                                                                          staticClass: "form-control",
                                                                          attrs: { type: "text", placeholder: "Update Actor From Imdb", "aria-label": "Search Movie" },
                                                                          domProps: { value: t.form.caster.id },
                                                                          on: {
                                                                              input: function (e) {
                                                                                  e.target.composing || t.$set(t.form.caster, "id", e.target.value);
                                                                              },
                                                                          },
                                                                      }),
                                                                  ]),
                                                              ]),
                                                              t._v(" "),
                                                              s("div", { staticClass: "input-container" }, [
                                                                  s("div", { staticClass: "row" }, [
                                                                      s("div", { staticClass: "col-md-4" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "title" } }, [t._v("Actor Name")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.caster.name, expression: "form.caster.name" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "title", type: "text" },
                                                                                  domProps: { value: t.form.caster.name },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.caster, "name", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-4" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "original_name" } }, [t._v("Original Name")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.caster.original_name, expression: "form.caster.original_name" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "original_name", type: "text" },
                                                                                  domProps: { value: t.form.caster.original_name },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.caster, "original_name", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                  ]),
                                                                  t._v(" "),
                                                                  s("div", { staticClass: "col-md-4" }, [
                                                                      s("div", { staticClass: "form-group" }, [
                                                                          s("label", { attrs: { for: "title" } }, [t._v("Place of Birth")]),
                                                                          t._v(" "),
                                                                          s("input", {
                                                                              directives: [{ name: "model", rawName: "v-model", value: t.form.caster.place_of_birth, expression: "form.caster.place_of_birth" }],
                                                                              staticClass: "form-control",
                                                                              attrs: { id: "title", type: "text" },
                                                                              domProps: { value: t.form.caster.place_of_birth },
                                                                              on: {
                                                                                  input: function (e) {
                                                                                      e.target.composing || t.$set(t.form.caster, "place_of_birth", e.target.value);
                                                                                  },
                                                                              },
                                                                          }),
                                                                      ]),
                                                                  ]),
                                                              ]),
                                                              t._v(" "),
                                                              s("div", { staticClass: "input-container" }, [
                                                                  s("div", { staticClass: "row" }, [
                                                                      s("div", { staticClass: "col-md-12" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "overview" } }, [t._v("Biography")]),
                                                                              t._v(" "),
                                                                              s("textarea", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.caster.biography, expression: "form.caster.biography" }],
                                                                                  staticClass: "form-control pb-3",
                                                                                  attrs: { id: "overview", rows: "6", type: "text" },
                                                                                  domProps: { value: t.form.caster.biography },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.caster, "biography", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                  ]),
                                                              ]),
                                                              t._v(" "),
                                                              s("div", { staticClass: "input-container" }, [
                                                                  s("div", { staticClass: "row" }, [
                                                                      s("div", { staticClass: "col-md-8" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "title" } }, [t._v("Poster Path")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.caster.profile_path, expression: "form.caster.profile_path" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "profile_path", type: "text" },
                                                                                  domProps: { value: t.form.caster.profile_path },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.caster, "profile_path", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-8" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", [t._v("Poster upload")]),
                                                                              t._v(" "),
                                                                              s("input", { staticClass: "file-upload-default" }),
                                                                              t._v(" "),
                                                                              s("div", { staticClass: "input-group col-xs-12" }, [
                                                                                  s("input", {
                                                                                      staticClass: "form-control file-upload-info",
                                                                                      attrs: { id: "poster", placeholder: "Upload Image", type: "file" },
                                                                                      on: { change: t.storePoster },
                                                                                  }),
                                                                                  t._v(" "),
                                                                                  t._m(3),
                                                                              ]),
                                                                          ]),
                                                                      ]),
                                                                  ]),
                                                              ]),
                                                              t._v(" "),
                                                              t._m(4),
                                                          ]),
                                                      ]),
                                                      t._v(" "),
                                                      s("div", { staticClass: "d-flex justify-content-end align-items-end flex-wrap" }, [
                                                          t.add
                                                              ? s(
                                                                    "button",
                                                                    {
                                                                        staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                                        attrs: { type: "submit" },
                                                                        on: {
                                                                            click: function (e) {
                                                                                return e.preventDefault(), t.store();
                                                                            },
                                                                        },
                                                                    },
                                                                    [t._v("\n                Save\n              ")]
                                                                )
                                                              : t._e(),
                                                          t._v(" "),
                                                          t.edit
                                                              ? s(
                                                                    "button",
                                                                    {
                                                                        staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                                        attrs: { type: "submit" },
                                                                        on: {
                                                                            click: function (e) {
                                                                                return e.preventDefault(), t.update();
                                                                            },
                                                                        },
                                                                    },
                                                                    [t._v("\n                Update\n              ")]
                                                                )
                                                              : t._e(),
                                                      ]),
                                                  ]),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "d-flex align-items-end flex-wrap" }, [e("div", { staticClass: "d-flex" })]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "input-group-prepend" }, [e("span", { staticClass: "input-group-text", attrs: { id: "search" } }, [e("i", { staticClass: "mdi mdi-magnify" })])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("thead", [
                                e("tr", [
                                    e("th", { staticClass: "text-center", attrs: { id: "cover" } }, [this._v("Cover")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "id" } }, [this._v("Caster ID")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "name" } }, [this._v("Name")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "options" } }, [this._v("Options")]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                              Upload\n                            ")]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "row" }, [e("div", { staticClass: "col-md-12" })]);
                        },
                    ],
                    !1,
                    null,
                    null,
                    null
                );
            e.default = u.exports;
        },
        358: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a),
                r = s(3),
                n = s(6);
            function o(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function l(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var r = t.apply(e, s);
                        function n(t) {
                            o(r, a, i, n, l, "next", t);
                        }
                        function l(t) {
                            o(r, a, i, n, l, "throw", t);
                        }
                        n(void 0);
                    });
                };
            }
            var c = {
                    data: function () {
                        return {
                            index: !0,
                            add: !1,
                            edit: !1,
                            featureds: [],
                            paginate: ["featureds", "filteredFeatureds"],
                            form: { featured: { title: "", featured_id: "", poster_path: "", type: "", genre: "", vote_average: "", release_date: "", custom: "" }, notification: !1 },
                            poster: null,
                            search: "",
                            type_options: ["Movie", "Serie", "Anime", "Streaming", "Custom"],
                            genres: [],
                            fea_id: 0,
                        };
                    },
                    mounted: function () {
                        var t = this;
                        return l(
                            i.a.mark(function e() {
                                var s;
                                return i.a.wrap(function (e) {
                                    for (;;)
                                        switch ((e.prev = e.next)) {
                                            case 0:
                                                return (e.next = 2), axios.get(url + "/admin/featured/data");
                                            case 2:
                                                return (s = e.sent), (t.featureds = s.data), (e.next = 6), axios.get(url + "/admin/genres/data");
                                            case 6:
                                                (s = e.sent), (t.options = s.data);
                                            case 8:
                                            case "end":
                                                return e.stop();
                                        }
                                }, e);
                            })
                        )();
                    },
                    methods: {
                        create: function () {
                            (this.index = !1), (this.edit = !1), (this.add = !0), (this.featured_id = null);
                        },
                        back: function () {
                            (this.form.featured = ""), (this.featured_id = null), (this.add = !1), (this.edit = !1), (this.index = !0);
                        },
                        editing: function (t) {
                            (this.index = !1), (this.add = !1), (this.edit = !0), (this.form.featured = t), (this.fea_id = t.id);
                        },
                        getSearchByName: function (t) {
                            var e = url + "/admin/search_featured?q=" + encodeURI(t);
                            return new Promise(function (s) {
                                if (t.length < 1) return s([]);
                                fetch(e)
                                    .then(function (t) {
                                        return t.json();
                                    })
                                    .then(function (t) {
                                        s(t.search);
                                    });
                            });
                        },
                        getResultValue: function (t) {
                            return "Anime" === t.type ? t.name + " - Anime" : "Serie" === t.type ? t.name + " - Serie" : "Streaming" === t.type ? t.name + " - Streaming" : "Movie" === t.type ? t.title + " - Movie" : void 0;
                        },
                        onSubmit: function (t) {
                            this.getFeatured(t);
                        },
                        getFeatured: function (t) {
                            var e = this;
                            return l(
                                i.a.mark(function s() {
                                    var a, r, n, o, l, c, d, u;
                                    return i.a.wrap(function (s) {
                                        for (;;)
                                            switch ((s.prev = s.next)) {
                                                case 0:
                                                    if ("Anime" !== t.type) {
                                                        s.next = 18;
                                                        break;
                                                    }
                                                    return (s.next = 3), axios.get("admin/animes/show/" + t.id);
                                                case 3:
                                                    (a = s.sent),
                                                        ((r = _.mapKeys(a, function (t, e) {
                                                            return "id" === e ? "tmdb_id" : e;
                                                        })).id = e.fea_id),
                                                        (r.featured_id = t.id),
                                                        (r.title = t.name),
                                                        (r.type = "Anime"),
                                                        (r.poster_path = t.poster_path),
                                                        (r.type = t.type),
                                                        (r.premuim = t.premuim),
                                                        (r.release_date = t.first_air_date),
                                                        (r.vote_average = t.vote_average),
                                                        void 0 !== t.genres[0] && (r.genre = t.genres[0].name),
                                                        (e.form.featured = r),
                                                        (s.next = 70);
                                                    break;
                                                case 18:
                                                    if ("Serie" !== t.type) {
                                                        s.next = 36;
                                                        break;
                                                    }
                                                    return (s.next = 21), http.get("admin/series/show/" + t.id);
                                                case 21:
                                                    (n = s.sent),
                                                        ((o = _.mapKeys(n, function (t, e) {
                                                            return "id" === e ? "tmdb_id" : e;
                                                        })).id = e.fea_id),
                                                        (o.featured_id = t.id),
                                                        (o.title = t.name),
                                                        (o.type = "Serie"),
                                                        (o.poster_path = t.poster_path),
                                                        (o.type = t.type),
                                                        (o.premuim = t.premuim),
                                                        (o.release_date = t.first_air_date),
                                                        (o.vote_average = t.vote_average),
                                                        void 0 !== t.genres[0] && (o.genre = t.genres[0].name),
                                                        (e.form.featured = o),
                                                        (s.next = 70);
                                                    break;
                                                case 36:
                                                    if ("Movie" !== t.type) {
                                                        s.next = 54;
                                                        break;
                                                    }
                                                    return (s.next = 39), http.get("admin/media/detail/" + t.id);
                                                case 39:
                                                    (l = s.sent),
                                                        ((c = _.mapKeys(l, function (t, e) {
                                                            return "id" === e ? "tmdb_id" : e;
                                                        })).id = e.fea_id),
                                                        (c.featured_id = t.id),
                                                        (c.title = t.title),
                                                        (c.type = "Movie"),
                                                        (c.poster_path = t.poster_path),
                                                        (c.type = t.type),
                                                        (c.premuim = t.premuim),
                                                        (c.release_date = t.release_date),
                                                        (c.vote_average = t.vote_average),
                                                        void 0 !== t.genres[0] && (c.genre = t.genres[0].name),
                                                        (e.form.featured = c),
                                                        (s.next = 70);
                                                    break;
                                                case 54:
                                                    if ("Streaming" !== t.type) {
                                                        s.next = 70;
                                                        break;
                                                    }
                                                    return (s.next = 57), http.get("admin/stream/show/" + t.id);
                                                case 57:
                                                    (d = s.sent),
                                                        ((u = _.mapKeys(d, function (t, e) {
                                                            return "id" === e ? "tmdb_id" : e;
                                                        })).id = e.fea_id),
                                                        (u.featured_id = t.id),
                                                        (u.title = t.name),
                                                        (u.type = "Streaming"),
                                                        (u.poster_path = t.poster_path),
                                                        (u.type = t.type),
                                                        null === t.vip ? (u.premuim = 0) : (u.premuim = t.vip),
                                                        (u.release_date = t.release_date),
                                                        (u.vote_average = t.vote_average),
                                                        void 0 !== t.genres[0] && (u.genre = t.genres[0].name),
                                                        (e.form.featured = u);
                                                case 70:
                                                case "end":
                                                    return s.stop();
                                            }
                                    }, s);
                                })
                            )();
                        },
                        storeMiniPoster: function (t) {
                            var e = this;
                            return l(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        if (void 0 === t.target.files[0]) {
                                                            s.next = 15;
                                                            break;
                                                        }
                                                        return (s.prev = 1), (e.poster = t.target.files[0]), (a = new FormData()).append("image", e.poster), (s.next = 7), axios.post(url + "/admin/featureds/image/store", a);
                                                    case 7:
                                                        (r = s.sent), (e.form.featured.miniposter = r.data.image_path), e.showSuccess(r.data.message), (s.next = 15);
                                                        break;
                                                    case 12:
                                                        (s.prev = 12), (s.t0 = s.catch(1)), e.showError(s.t0.response);
                                                    case 15:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[1, 12]]
                                    );
                                })
                            )();
                        },
                        store: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.post(url + "/admin/featured/store", t.form);
                                                    case 3:
                                                        (s = e.sent),
                                                            (t.add = !1),
                                                            (t.edit = !1),
                                                            (t.index = !0),
                                                            (t.form.featured = { title: "", poster_path: "", featured_id: "", miniposter: "", type: "", genre: "", vote_average: "", release_date: "", premuim: 0 }),
                                                            (t.poster = null),
                                                            (t.backdrop = null),
                                                            t.featureds.unshift(s.data.body),
                                                            t.showSuccess(s.data.message),
                                                            (e.next = 17);
                                                        break;
                                                    case 14:
                                                        (e.prev = 14), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 17:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 14]]
                                    );
                                })
                            )();
                        },
                        update: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.put(url + "/admin/featured/update/" + t.form.featured.id, t.form);
                                                    case 3:
                                                        (s = e.sent),
                                                            (t.add = !1),
                                                            (t.edit = !1),
                                                            (t.index = !0),
                                                            (t.form.featured = {}),
                                                            t.showSuccess(s.data.message),
                                                            axios.get(url + "/admin/featured/data").then(function (e) {
                                                                t.featureds = e.data;
                                                            }),
                                                            (e.next = 15);
                                                        break;
                                                    case 12:
                                                        (e.prev = 12), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 15:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 12]]
                                    );
                                })
                            )();
                        },
                        destroy: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                l(
                                    i.a.mark(function a() {
                                        var r, n;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            return (a.prev = 0), (a.next = 3), axios.delete(url + "/admin/featured/destroy/" + t);
                                                        case 3:
                                                            (r = a.sent),
                                                                (n = s.featureds.findIndex(function (e) {
                                                                    return e.id === t;
                                                                })),
                                                                s.featureds.splice(n, 1),
                                                                s.paginate.filteredFeatureds.list.splice(e, 1),
                                                                s.showSuccess(r.data.message),
                                                                (a.next = 13);
                                                            break;
                                                        case 10:
                                                            (a.prev = 10), (a.t0 = a.catch(0)), s.showError();
                                                        case 13:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 10]]
                                        );
                                    })
                                )
                            );
                        },
                        storePoster: function (t) {
                            var e = this;
                            return l(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        if (void 0 === t.target.files[0]) {
                                                            s.next = 14;
                                                            break;
                                                        }
                                                        return (s.prev = 1), (e.poster = t.target.files[0]), (a = new FormData()).append("image", e.poster), (s.next = 7), axios.post(url + "/admin/featured/image/store", a);
                                                    case 7:
                                                        (r = s.sent), (e.form.featured.poster_path = r.data.image_path), (s.next = 14);
                                                        break;
                                                    case 11:
                                                        (s.prev = 11), (s.t0 = s.catch(1)), e.showError(s.t0.response);
                                                    case 14:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[1, 11]]
                                    );
                                })
                            )();
                        },
                        storeBackdrop: function (t) {
                            var e = this;
                            return l(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        if (void 0 === t.target.files[0]) {
                                                            s.next = 14;
                                                            break;
                                                        }
                                                        return (s.prev = 1), (e.backdrop = t.target.files[0]), (a = new FormData()).append("image", e.backdrop), (s.next = 7), axios.post(url + "/admin/featured/image/store", a);
                                                    case 7:
                                                        (r = s.sent), (e.form.featured.backdrop_path = r.data.image_path), (s.next = 14);
                                                        break;
                                                    case 11:
                                                        (s.prev = 11), (s.t0 = s.catch(1)), e.showError(s.t0.response);
                                                    case 14:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[1, 11]]
                                    );
                                })
                            )();
                        },
                    },
                    computed: {
                        filteredFeatureds: function () {
                            var t = this;
                            return this.featureds.filter(function (e) {
                                return e.title.toLowerCase().match(t.search.toLowerCase());
                            });
                        },
                    },
                    mixins: [r.a, n.a],
                },
                d = s(4),
                u = Object(d.a)(
                    c,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-md-12 grid-margin" }, [
                                s("div", { staticClass: "d-flex justify-content-between flex-wrap" }, [
                                    t._m(0),
                                    t._v(" "),
                                    s("div", { staticClass: "d-flex justify-content-between align-items-end flex-wrap" }, [
                                        t.index
                                            ? s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.create();
                                                          },
                                                      },
                                                  },
                                                  [t._v("Add Featured")]
                                              )
                                            : t._e(),
                                        t._v(" "),
                                        t.index
                                            ? t._e()
                                            : s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.back();
                                                          },
                                                      },
                                                  },
                                                  [t._v("Back")]
                                              ),
                                    ]),
                                ]),
                            ]),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-md-6 grid-margin" }, [
                                      s("ul", { staticClass: "navbar-nav mr-lg-4 w-100" }, [
                                          s("li", { staticClass: "nav-item nav-search d-none d-lg-block w-100" }, [
                                              s("div", { staticClass: "input-group" }, [
                                                  t._m(1),
                                                  t._v(" "),
                                                  s("input", {
                                                      directives: [{ name: "model", rawName: "v-model", value: t.search, expression: "search" }],
                                                      staticClass: "form-control",
                                                      attrs: { type: "text", placeholder: "Search now", "aria-label": "search", "aria-describedby": "search" },
                                                      domProps: { value: t.search },
                                                      on: {
                                                          input: function (e) {
                                                              e.target.composing || (t.search = e.target.value);
                                                          },
                                                      },
                                                  }),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s(
                                                  "div",
                                                  { staticClass: "table-responsive" },
                                                  [
                                                      s(
                                                          "table",
                                                          { staticClass: "table", attrs: { "aria-describedby": "table movies", id: "table movies" } },
                                                          [
                                                              t._m(2),
                                                              t._v(" "),
                                                              s(
                                                                  "tbody",
                                                                  t._l(t.paginated("filteredFeatureds"), function (e, a) {
                                                                      return s("tr", { key: a }, [
                                                                          s("td", { staticClass: "text-center" }, [s("img", { attrs: { src: e.poster_path, alt: "poster path", height: "80", width: "80" } })]),
                                                                          t._v(" "),
                                                                          s("td", { staticClass: "text-center" }, [t._v(t._s(e.position))]),
                                                                          t._v(" "),
                                                                          s("td", { staticClass: "text-center" }, [t._v(t._s(e.id))]),
                                                                          t._v(" "),
                                                                          s("td", { staticClass: "text-center" }, [t._v(t._s(e.title))]),
                                                                          t._v(" "),
                                                                          s("td", { staticClass: "text-center" }, [t._v(t._s(e.type))]),
                                                                          t._v(" "),
                                                                          s("td", { staticClass: "text-center" }, [
                                                                              s("div", { staticClass: "list-icons" }, [
                                                                                  s(
                                                                                      "a",
                                                                                      {
                                                                                          staticClass: "list-icons-item mr-2",
                                                                                          attrs: { "data-original-title": "Edit", rel: "tooltip", title: "" },
                                                                                          on: {
                                                                                              click: function (s) {
                                                                                                  return t.editing(e);
                                                                                              },
                                                                                          },
                                                                                      },
                                                                                      [s("em", { staticClass: "mdi mdi-pencil fa-lg", staticStyle: { color: "#4d83ff" } })]
                                                                                  ),
                                                                                  t._v(" "),
                                                                                  s(
                                                                                      "a",
                                                                                      {
                                                                                          staticClass: "list-icons-item text-warning",
                                                                                          attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                          on: {
                                                                                              click: function (s) {
                                                                                                  return t.destroy(e.id, a);
                                                                                              },
                                                                                          },
                                                                                      },
                                                                                      [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                                  ),
                                                                              ]),
                                                                          ]),
                                                                      ]);
                                                                  }),
                                                                  0
                                                              ),
                                                              t._v(" "),
                                                              t.filteredFeatureds.length ? s("paginate", { attrs: { list: t.filteredFeatureds, per: 5, name: "filteredFeatureds", tag: "tbody" } }) : t._e(),
                                                          ],
                                                          1
                                                      ),
                                                      t._v(" "),
                                                      t.filteredFeatureds.length
                                                          ? s("paginate-links", {
                                                                staticClass: "float-right",
                                                                attrs: {
                                                                    async: !0,
                                                                    classes: { ul: "pagination", li: "page-item", a: "page-link", ".next > a": "next-link", ".prev > a": "prev-link" },
                                                                    "hide-single-page": !0,
                                                                    limit: 5,
                                                                    "show-step-links": !0,
                                                                    for: "filteredFeatureds",
                                                                },
                                                            })
                                                          : t._e(),
                                                  ],
                                                  1
                                              ),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.add || t.edit
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s("section", [
                                                  t.form.featured.custom
                                                      ? t._e()
                                                      : s(
                                                            "div",
                                                            { staticClass: "form-group" },
                                                            [
                                                                s("autocomplete", {
                                                                    attrs: {
                                                                        search: t.getSearchByName,
                                                                        placeholder: "Search Movie by Name",
                                                                        "aria-label": "Search Movie by Name",
                                                                        "data-loading": "true",
                                                                        "data-position": "above",
                                                                        "get-result-value": t.getResultValue,
                                                                    },
                                                                    on: { submit: t.onSubmit },
                                                                }),
                                                            ],
                                                            1
                                                        ),
                                                  t._v(" "),
                                                  s("div", { staticClass: "col-md-3" }, [
                                                      s("div", { staticClass: "form-group" }, [
                                                          s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.featured.custom, expression: "form.featured.custom" }],
                                                                  staticClass: "custom-control-input",
                                                                  attrs: { id: "custom", type: "checkbox" },
                                                                  domProps: { checked: Array.isArray(t.form.featured.custom) ? t._i(t.form.featured.custom, null) > -1 : t.form.featured.custom },
                                                                  on: {
                                                                      change: function (e) {
                                                                          var s = t.form.featured.custom,
                                                                              a = e.target,
                                                                              i = !!a.checked;
                                                                          if (Array.isArray(s)) {
                                                                              var r = t._i(s, null);
                                                                              a.checked ? r < 0 && t.$set(t.form.featured, "custom", s.concat([null])) : r > -1 && t.$set(t.form.featured, "custom", s.slice(0, r).concat(s.slice(r + 1)));
                                                                          } else t.$set(t.form.featured, "custom", i);
                                                                      },
                                                                  },
                                                              }),
                                                              t._v(" "),
                                                              s("label", { staticClass: "custom-control-label", attrs: { for: "custom" } }, [t._v("Custom")]),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  t.form.featured.custom
                                                      ? s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-12" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "custom_link" } }, [t._v("Featured Custom Link")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.form.featured.custom_link, expression: "form.featured.custom_link" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "custom_link", type: "text" },
                                                                        domProps: { value: t.form.featured.custom_link },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.form.featured, "custom_link", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ])
                                                      : t._e(),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "title" } }, [t._v("Order")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.featured.position, expression: "form.featured.position" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "position", name: "position", placeholder: "Media Position", required: "", type: "text" },
                                                                  domProps: { value: t.form.featured.position },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.featured, "position", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  t.form.featured.custom
                                                      ? t._e()
                                                      : s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-12" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "title" } }, [t._v("Featured ID")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.form.featured.id, expression: "form.featured.id" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "title", type: "text" },
                                                                        domProps: { value: t.form.featured.id },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.form.featured, "id", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                  t._v(" "),
                                                  t.form.featured.custom
                                                      ? t._e()
                                                      : s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-12" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "title" } }, [t._v("Featured Media ID")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.form.featured.featured_id, expression: "form.featured.featured_id" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "title", type: "text" },
                                                                        domProps: { value: t.form.featured.featured_id },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.form.featured, "featured_id", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "title" } }, [t._v("Featured Title")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.featured.title, expression: "form.featured.title" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "title", type: "text" },
                                                                  domProps: { value: t.form.featured.title },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.featured, "title", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "title" } }, [t._v("Poster Path")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.featured.poster_path, expression: "form.featured.poster_path" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "poster_path", name: "poster_path", placeholder: "Poster Image Link", required: "", type: "text" },
                                                                  domProps: { value: t.form.featured.poster_path },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.featured, "poster_path", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              t.form.featured.poster_path
                                                                  ? s("img", { staticClass: "poster", attrs: { src: t.form.featured.poster_path, alt: "poster path", "data-loaded": "true", height: "316", width: "210" } })
                                                                  : t._e(),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  t.form.featured.custom
                                                      ? t._e()
                                                      : s("div", { staticClass: "col-md-3" }, [
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.form.featured.enable_miniposter, expression: "form.featured.enable_miniposter" }],
                                                                        staticClass: "custom-control-input",
                                                                        attrs: { id: "enable_miniposter", type: "checkbox" },
                                                                        domProps: { checked: Array.isArray(t.form.featured.enable_miniposter) ? t._i(t.form.featured.enable_miniposter, null) > -1 : t.form.featured.enable_miniposter },
                                                                        on: {
                                                                            change: function (e) {
                                                                                var s = t.form.featured.enable_miniposter,
                                                                                    a = e.target,
                                                                                    i = !!a.checked;
                                                                                if (Array.isArray(s)) {
                                                                                    var r = t._i(s, null);
                                                                                    a.checked
                                                                                        ? r < 0 && t.$set(t.form.featured, "enable_miniposter", s.concat([null]))
                                                                                        : r > -1 && t.$set(t.form.featured, "enable_miniposter", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                } else t.$set(t.form.featured, "enable_miniposter", i);
                                                                            },
                                                                        },
                                                                    }),
                                                                    t._v(" "),
                                                                    s("label", { staticClass: "custom-control-label", attrs: { for: "enable_miniposter" } }, [t._v("Enable Miniposter")]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                  t._v(" "),
                                                  t.form.featured.custom
                                                      ? t._e()
                                                      : s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-12" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "title" } }, [t._v("MiniPoster Path (PNG FORMAT ONLY)")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.form.featured.miniposter, expression: "form.featured.miniposter" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "miniposter", name: "miniposter", placeholder: "Poster Image Link", required: "", type: "text" },
                                                                        domProps: { value: t.form.featured.miniposter },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.form.featured, "miniposter", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                  t._v(" "),
                                                  t.form.featured.custom
                                                      ? t._e()
                                                      : s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-12" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    t.form.featured.miniposter
                                                                        ? s("img", { staticClass: "poster_featured", attrs: { src: t.form.featured.miniposter, alt: "miniposter path", "data-loaded": "true", height: "200", width: "200" } })
                                                                        : t._e(),
                                                                ]),
                                                            ]),
                                                        ]),
                                                  t._v(" "),
                                                  t.form.featured.custom
                                                      ? t._e()
                                                      : s("div", { staticClass: "col-md-4" }, [
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("label", [t._v("MiniPoster upload")]),
                                                                t._v(" "),
                                                                s("input", { staticClass: "file-upload-default" }),
                                                                t._v(" "),
                                                                s("div", { staticClass: "input-group col-xs-12" }, [
                                                                    s("input", { staticClass: "form-control file-upload-info", attrs: { id: "poster", placeholder: "Upload Image", type: "file" }, on: { change: t.storeMiniPoster } }),
                                                                    t._v(" "),
                                                                    t._m(3),
                                                                ]),
                                                            ]),
                                                        ]),
                                                  t._v(" "),
                                                  t.form.featured.custom
                                                      ? t._e()
                                                      : s("div", { staticClass: "col-md-3" }, [
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.form.featured.premuim, expression: "form.featured.premuim" }],
                                                                        staticClass: "custom-control-input",
                                                                        attrs: { id: "premuim", type: "checkbox" },
                                                                        domProps: { checked: Array.isArray(t.form.featured.premuim) ? t._i(t.form.featured.premuim, null) > -1 : t.form.featured.premuim },
                                                                        on: {
                                                                            change: function (e) {
                                                                                var s = t.form.featured.premuim,
                                                                                    a = e.target,
                                                                                    i = !!a.checked;
                                                                                if (Array.isArray(s)) {
                                                                                    var r = t._i(s, null);
                                                                                    a.checked
                                                                                        ? r < 0 && t.$set(t.form.featured, "premuim", s.concat([null]))
                                                                                        : r > -1 && t.$set(t.form.featured, "premuim", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                } else t.$set(t.form.featured, "premuim", i);
                                                                            },
                                                                        },
                                                                    }),
                                                                    t._v(" "),
                                                                    s("label", { staticClass: "custom-control-label", attrs: { for: "premuim" } }, [t._v("Premuim")]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s(
                                                              "div",
                                                              { staticClass: "form-group" },
                                                              [
                                                                  s("label", { attrs: { for: "lang" } }, [t._v("Type")]),
                                                                  t._v(" "),
                                                                  s("multiselect", {
                                                                      attrs: { "clear-on-select": !1, options: t.type_options },
                                                                      model: {
                                                                          value: t.form.featured.type,
                                                                          callback: function (e) {
                                                                              t.$set(t.form.featured, "type", e);
                                                                          },
                                                                          expression: "form.featured.type",
                                                                      },
                                                                  }),
                                                              ],
                                                              1
                                                          ),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  t.form.featured.custom
                                                      ? t._e()
                                                      : s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-12" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "genre" } }, [t._v("Genre")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.form.featured.genre, expression: "form.featured.genre" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "genre", type: "text" },
                                                                        domProps: { value: t.form.featured.genre },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.form.featured, "genre", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                  t._v(" "),
                                                  t.form.featured.custom
                                                      ? t._e()
                                                      : s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-12" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "release_date" } }, [t._v("Release Date")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.form.featured.release_date, expression: "form.featured.release_date" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "release_date", type: "text" },
                                                                        domProps: { value: t.form.featured.release_date },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.form.featured, "release_date", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                  t._v(" "),
                                                  t.form.featured.custom
                                                      ? t._e()
                                                      : s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-12" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "vote_average" } }, [t._v("Vote Average")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.form.featured.vote_average, expression: "form.featured.vote_average" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "vote_average", type: "text" },
                                                                        domProps: { value: t.form.featured.vote_average },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.form.featured, "vote_average", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row justify-content-end" }, [
                                                      s("div", { staticClass: "col-auto" }, [
                                                          t.add
                                                              ? s(
                                                                    "button",
                                                                    {
                                                                        staticClass: "btn btn-primary mr-2",
                                                                        attrs: { type: "submit" },
                                                                        on: {
                                                                            click: function (e) {
                                                                                return e.preventDefault(), t.store();
                                                                            },
                                                                        },
                                                                    },
                                                                    [t._v("Save")]
                                                                )
                                                              : t._e(),
                                                          t._v(" "),
                                                          t.edit
                                                              ? s(
                                                                    "button",
                                                                    {
                                                                        staticClass: "btn btn-primary mr-2",
                                                                        attrs: { type: "submit" },
                                                                        on: {
                                                                            click: function (e) {
                                                                                return e.preventDefault(), t.update();
                                                                            },
                                                                        },
                                                                    },
                                                                    [t._v("Update")]
                                                                )
                                                              : t._e(),
                                                      ]),
                                                  ]),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "d-flex align-items-end flex-wrap" }, [e("div", { staticClass: "d-flex" })]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "input-group-prepend" }, [e("span", { staticClass: "input-group-text", attrs: { id: "search" } }, [e("i", { staticClass: "mdi mdi-magnify" })])]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { staticClass: "text-center", attrs: { id: "cover" } }, [t._v("Cover")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "id" } }, [t._v("Media Order")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "id" } }, [t._v("Media ID")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "id" } }, [t._v("Title")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "id" } }, [t._v("Media Type")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "options" } }, [t._v("Options")]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                              Upload\n                            ")]),
                            ]);
                        },
                    ],
                    !1,
                    null,
                    null,
                    null
                );
            e.default = u.exports;
        },
        359: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a),
                r = s(3),
                n = s(6);
            function o(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function l(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var r = t.apply(e, s);
                        function n(t) {
                            o(r, a, i, n, l, "next", t);
                        }
                        function l(t) {
                            o(r, a, i, n, l, "throw", t);
                        }
                        n(void 0);
                    });
                };
            }
            var c = {
                    data: function () {
                        return { networks: [], network: "", image: "", origin_country: "", paginate: ["networks"], edit: !1, editing: {} };
                    },
                    mounted: function () {
                        var t = this;
                        return l(
                            i.a.mark(function e() {
                                var s;
                                return i.a.wrap(function (e) {
                                    for (;;)
                                        switch ((e.prev = e.next)) {
                                            case 0:
                                                return (e.next = 2), axios.get(url + "/admin/networks/datanetworks");
                                            case 2:
                                                (s = e.sent), (t.networks = s.data);
                                            case 4:
                                            case "end":
                                                return e.stop();
                                        }
                                }, e);
                            })
                        )();
                    },
                    methods: {
                        store: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.post(url + "/admin/networks/store", { name: t.network });
                                                    case 3:
                                                        (s = e.sent), t.networks.unshift(s.data.body), (t.network = ""), t.showSuccess(s.data.message), (e.next = 12);
                                                        break;
                                                    case 9:
                                                        (e.prev = 9), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 12:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 9]]
                                    );
                                })
                            )();
                        },
                        destroy: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                l(
                                    i.a.mark(function a() {
                                        var r, n;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            return (a.prev = 0), (a.next = 3), axios.delete(url + "/admin/networks/destroy/" + t);
                                                        case 3:
                                                            (r = a.sent),
                                                                (n = s.networks.findIndex(function (e) {
                                                                    return e.id === t;
                                                                })),
                                                                s.networks.splice(n, 1),
                                                                s.paginate.networks.list.splice(e, 1),
                                                                s.showSuccess(r.data.message),
                                                                (a.next = 13);
                                                            break;
                                                        case 10:
                                                            (a.prev = 10), (a.t0 = a.catch(0)), s.showError();
                                                        case 13:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 10]]
                                        );
                                    })
                                )
                            );
                        },
                        storePoster: function (t) {
                            var e = this;
                            return l(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        if (void 0 === t.target.files[0]) {
                                                            s.next = 15;
                                                            break;
                                                        }
                                                        return (s.prev = 1), (e.poster = t.target.files[0]), (a = new FormData()).append("image", e.poster), (s.next = 7), axios.post(url + "/admin/movies/image/store", a);
                                                    case 7:
                                                        (r = s.sent), (e.image = r.data.image_path), e.showSuccess(r.data.message), (s.next = 15);
                                                        break;
                                                    case 12:
                                                        (s.prev = 12), (s.t0 = s.catch(1)), e.showError(s.t0.response);
                                                    case 15:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[1, 12]]
                                    );
                                })
                            )();
                        },
                        update: function (t, e) {
                            (this.edit = !0), (this.network = t.name), (this.image = t.logo_path), (this.origin_country = t.origin_country), (this.editing = t), (this.editing.index = e), window.scrollTo(0, 0);
                        },
                        cancel: function () {
                            (this.edit = !1), (this.network = ""), (this.image = ""), (this.editing = {});
                        },
                        updateSubmit: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    return i.a.wrap(function (e) {
                                        for (;;)
                                            switch ((e.prev = e.next)) {
                                                case 0:
                                                    axios
                                                        .put(url + "/admin/networks/update/" + t.editing.id, { name: t.network, id: t.editing.id, logo_path: t.image, origin_country: t.origin_country })
                                                        .then(function (e) {
                                                            (t.networks[t.editing.index] = e.data.body),
                                                                (t.paginate.networks.list[t.editing.index] = e.data.body),
                                                                (t.edit = !1),
                                                                (t.network = ""),
                                                                (t.image = ""),
                                                                (t.origin_country = ""),
                                                                (t.editing = {}),
                                                                t.showSuccess(e.data.message),
                                                                axios.get(url + "/admin/movies/dataweb?page=" + t.pageNum).then(function (e) {
                                                                    t.movies = e.data;
                                                                });
                                                        })
                                                        .catch(function (e) {
                                                            t.showError(e.message.message);
                                                        });
                                                case 1:
                                                case "end":
                                                    return e.stop();
                                            }
                                    }, e);
                                })
                            )();
                        },
                    },
                    mixins: [r.a, n.a],
                },
                d = s(4),
                u = Object(d.a)(
                    c,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                s("div", { staticClass: "card" }, [
                                    s("div", { staticClass: "card-body" }, [
                                        s("div", { staticClass: "row" }, [
                                            s("div", { staticClass: "col-12" }, [
                                                s("div", { staticClass: "form-group" }, [
                                                    s("label", { attrs: { for: "genre" } }, [t._v("Network")]),
                                                    t._v(" "),
                                                    s("input", {
                                                        directives: [{ name: "model", rawName: "v-model", value: t.network, expression: "network" }],
                                                        staticClass: "form-control",
                                                        attrs: { id: "network", placeholder: "Network name", type: "text" },
                                                        domProps: { value: t.network },
                                                        on: {
                                                            input: function (e) {
                                                                e.target.composing || (t.network = e.target.value);
                                                            },
                                                        },
                                                    }),
                                                ]),
                                                t._v(" "),
                                                t.edit
                                                    ? t._e()
                                                    : s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-info",
                                                              attrs: { disabled: !t.network, type: "submit" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.store();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Add")]
                                                      ),
                                                t._v(" "),
                                                s("div", { staticClass: "row" }, [
                                                    s("div", { staticClass: "col-md-12" }, [
                                                        s("div", { staticClass: "form-group" }, [
                                                            t.image ? s("img", { staticClass: "poster_networks", attrs: { src: t.image, alt: "poster path", "data-loaded": "true", height: "150", width: "250" } }) : t._e(),
                                                        ]),
                                                    ]),
                                                ]),
                                                t._v(" "),
                                                t.edit
                                                    ? s("div", { staticClass: "form-group" }, [
                                                          s("label", { attrs: { for: "genre" } }, [t._v("Network Image")]),
                                                          t._v(" "),
                                                          t.edit
                                                              ? s("input", {
                                                                    directives: [{ name: "model", rawName: "v-model", value: t.image, expression: "image" }],
                                                                    staticClass: "form-control",
                                                                    attrs: { id: "network", placeholder: "Network Image", type: "text" },
                                                                    domProps: { value: t.image },
                                                                    on: {
                                                                        input: function (e) {
                                                                            e.target.composing || (t.image = e.target.value);
                                                                        },
                                                                    },
                                                                })
                                                              : t._e(),
                                                      ])
                                                    : t._e(),
                                                t._v(" "),
                                                t.edit
                                                    ? s("div", { staticClass: "form-group" }, [
                                                          s("label", [t._v("Network Image Upload")]),
                                                          t._v(" "),
                                                          s("input", { staticClass: "file-upload-default" }),
                                                          t._v(" "),
                                                          s("div", { staticClass: "input-group col-xs-12" }, [
                                                              s("input", { staticClass: "form-control file-upload-info", attrs: { id: "poster", placeholder: "Upload Image", type: "file" }, on: { change: t.storePoster } }),
                                                              t._v(" "),
                                                              t._m(0),
                                                          ]),
                                                      ])
                                                    : t._e(),
                                                t._v(" "),
                                                t.edit
                                                    ? s("div", { staticClass: "form-group" }, [
                                                          s("label", { attrs: { for: "origin_country" } }, [t._v("Network Origin Country")]),
                                                          t._v(" "),
                                                          t.edit
                                                              ? s("input", {
                                                                    directives: [{ name: "model", rawName: "v-model", value: t.origin_country, expression: "origin_country" }],
                                                                    staticClass: "form-control",
                                                                    attrs: { id: "origin_country", placeholder: "origin_country", type: "text" },
                                                                    domProps: { value: t.origin_country },
                                                                    on: {
                                                                        input: function (e) {
                                                                            e.target.composing || (t.origin_country = e.target.value);
                                                                        },
                                                                    },
                                                                })
                                                              : t._e(),
                                                      ])
                                                    : t._e(),
                                                t._v(" "),
                                                t.edit
                                                    ? s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-info",
                                                              attrs: { disabled: !t.network, type: "button" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.updateSubmit();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Update")]
                                                      )
                                                    : t._e(),
                                                t._v(" "),
                                                t.edit
                                                    ? s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-light",
                                                              attrs: { disabled: !t.network, type: "button" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.cancel();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Cancel")]
                                                      )
                                                    : t._e(),
                                            ]),
                                        ]),
                                        t._v(" "),
                                        s(
                                            "div",
                                            { staticClass: "table-responsive" },
                                            [
                                                s(
                                                    "table",
                                                    { staticClass: "table", attrs: { "aria-describedby": "Network Table" } },
                                                    [
                                                        t._m(1),
                                                        t._v(" "),
                                                        s(
                                                            "tbody",
                                                            t._l(t.paginated("networks"), function (e, a) {
                                                                return s("tr", { key: a }, [
                                                                    s("td", [e.logo_path ? s("img", { staticClass: "poster", attrs: { src: e.logo_path, alt: "poster path", "data-loaded": "true", height: "316", width: "210" } }) : t._e()]),
                                                                    t._v(" "),
                                                                    s("td", [t._v(t._s(e.name))]),
                                                                    t._v(" "),
                                                                    s("td", [
                                                                        s("div", { staticClass: "list-icons" }, [
                                                                            s(
                                                                                "a",
                                                                                {
                                                                                    staticClass: "list-icons-item mr-2",
                                                                                    attrs: { "data-original-title": "Edit", rel: "tooltip", title: "" },
                                                                                    on: {
                                                                                        click: function (s) {
                                                                                            return t.update(e, a);
                                                                                        },
                                                                                    },
                                                                                },
                                                                                [s("em", { staticClass: "mdi mdi-pencil fa-lg", staticStyle: { color: "#4d83ff" } })]
                                                                            ),
                                                                            t._v(" "),
                                                                            s(
                                                                                "a",
                                                                                {
                                                                                    staticClass: "list-icons-item text-warning",
                                                                                    attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                    on: {
                                                                                        click: function (s) {
                                                                                            return t.destroy(e.id, a);
                                                                                        },
                                                                                    },
                                                                                },
                                                                                [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                            ),
                                                                        ]),
                                                                    ]),
                                                                ]);
                                                            }),
                                                            0
                                                        ),
                                                        t._v(" "),
                                                        t.networks && t.networks.length ? s("paginate", { attrs: { list: t.networks, per: 10, name: "networks", tag: "tbody" } }) : t._e(),
                                                    ],
                                                    1
                                                ),
                                                t._v(" "),
                                                s("paginate-links", {
                                                    staticClass: "float-right",
                                                    attrs: {
                                                        async: !0,
                                                        classes: { ul: "pagination", li: "page-item", a: "page-link", ".next > a": "next-link", ".prev > a": "prev-link" },
                                                        "hide-single-page": !0,
                                                        limit: 5,
                                                        "show-step-links": !0,
                                                        for: "networks",
                                                    },
                                                }),
                                            ],
                                            1
                                        ),
                                    ]),
                                ]),
                            ]),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                              Upload\n                            ")]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("thead", [
                                e("tr", [
                                    e("th", { attrs: { id: "name" } }, [this._v("Image")]),
                                    this._v(" "),
                                    e("th", { attrs: { id: "name" } }, [this._v("Names")]),
                                    this._v(" "),
                                    e("th", { attrs: { id: "Action" } }, [this._v("Actions")]),
                                ]),
                            ]);
                        },
                    ],
                    !1,
                    null,
                    null,
                    null
                );
            e.default = u.exports;
        },
        360: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a);
            function r(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function n(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var n = t.apply(e, s);
                        function o(t) {
                            r(n, a, i, o, l, "next", t);
                        }
                        function l(t) {
                            r(n, a, i, o, l, "throw", t);
                        }
                        o(void 0);
                    });
                };
            }
            var o = {
                    data: function () {
                        return {
                            size: "default",
                            align: "right",
                            form: { name: "", id: "" },
                            formuseragent: { name: "", id: "" },
                            headers: [],
                            useragents: {},
                            paginate: ["headers"],
                            edit: !1,
                            edituseragent: !1,
                            editing: { header: "", index: "" },
                            editinguseragent: { useragent: "", indexuseragent: "" },
                        };
                    },
                    mounted: function () {
                        var t = this;
                        return n(
                            i.a.mark(function e() {
                                var s;
                                return i.a.wrap(function (e) {
                                    for (;;)
                                        switch ((e.prev = e.next)) {
                                            case 0:
                                                return (e.next = 2), axios.get(url + "/admin/headers/dataheaders");
                                            case 2:
                                                (s = e.sent),
                                                    (t.headers = s.data),
                                                    axios
                                                        .get(url + "/admin/useragents/datausersagent")
                                                        .then(function (e) {
                                                            200 === s.status && (t.useragents = e.data);
                                                        })
                                                        .catch(function (t) {});
                                            case 5:
                                            case "end":
                                                return e.stop();
                                        }
                                }, e);
                            })
                        )();
                    },
                    methods: {
                        getUserAgentResults: function () {
                            var t = this,
                                e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
                            axios.get(url + "/admin/useragents/datausersagent?page=" + e).then(function (e) {
                                t.useragents = e.data;
                            });
                        },
                        store: function () {
                            var t = this;
                            return n(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.post(url + "/admin/headers/store", t.form);
                                                    case 3:
                                                        (s = e.sent), t.headers.unshift(s.data.body), (t.form.name = ""), t.showSuccess(s.data.message), (e.next = 12);
                                                        break;
                                                    case 9:
                                                        (e.prev = 9), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 12:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 9]]
                                    );
                                })
                            )();
                        },
                        useragentsstore: function () {
                            var t = this;
                            return n(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.post(url + "/admin/useragents/store", t.formuseragent);
                                                    case 3:
                                                        (s = e.sent), t.useragents.data.unshift(s.data.body), (t.formuseragent.name = ""), t.showSuccess(s.data.message), (e.next = 12);
                                                        break;
                                                    case 9:
                                                        (e.prev = 9), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 12:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 9]]
                                    );
                                })
                            )();
                        },
                        destroy: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                n(
                                    i.a.mark(function a() {
                                        var r;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            return (a.prev = 0), (a.next = 3), axios.delete(url + "/admin/headers/destroy/" + t);
                                                        case 3:
                                                            (r = a.sent), console.log(e), s.headers.splice(e, 1), s.showSuccess(r.data.message), (a.next = 12);
                                                            break;
                                                        case 9:
                                                            (a.prev = 9), (a.t0 = a.catch(0)), s.showError();
                                                        case 12:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 9]]
                                        );
                                    })
                                )
                            );
                        },
                        destroyUseragent: function (t) {
                            var e = this;
                            this.showConfirm(
                                n(
                                    i.a.mark(function s() {
                                        var a, r;
                                        return i.a.wrap(
                                            function (s) {
                                                for (;;)
                                                    switch ((s.prev = s.next)) {
                                                        case 0:
                                                            return (s.prev = 0), (s.next = 3), axios.delete(url + "/admin/useragents/destroy/" + t);
                                                        case 3:
                                                            (a = s.sent),
                                                                (r = e.useragents.data.findIndex(function (e) {
                                                                    return e.id === t;
                                                                })),
                                                                e.useragents.data.splice(r, 1),
                                                                e.showSuccess(a.data.message),
                                                                (s.next = 12);
                                                            break;
                                                        case 9:
                                                            (s.prev = 9), (s.t0 = s.catch(0)), e.showError();
                                                        case 12:
                                                        case "end":
                                                            return s.stop();
                                                    }
                                            },
                                            s,
                                            null,
                                            [[0, 9]]
                                        );
                                    })
                                )
                            );
                        },
                        update: function (t, e) {
                            (this.form.name = t.name), (this.edit = !0), (this.editing.header = t), (this.editing.index = e);
                        },
                        updateUseragent: function (t, e) {
                            (this.formuseragent.name = t.name), (this.edituseragent = !0), (this.editinguseragent.useragent = t), (this.editinguseragent.index = e);
                        },
                        updateSubmit: function () {
                            var t = this;
                            return n(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (t.form.id = t.editing.header.id), (e.next = 4), axios.put(url + "/admin/headers/update/" + t.editing.header.id, t.form);
                                                    case 4:
                                                        (s = e.sent),
                                                            (t.headers[t.editing.index] = s.data.body),
                                                            (t.paginate.headers.list[t.editing.index] = s.data.body),
                                                            (t.form.name = ""),
                                                            (t.edit = !1),
                                                            t.showSuccess(s.data.message),
                                                            (e.next = 15);
                                                        break;
                                                    case 12:
                                                        (e.prev = 12), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 15:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 12]]
                                    );
                                })
                            )();
                        },
                        updateSubmitUserAgent: function () {
                            var t = this;
                            return n(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (
                                                            (e.prev = 0), (t.formuseragent.id = t.editinguseragent.useragent.id), (e.next = 4), axios.put(url + "/admin/useragents/update/" + t.editinguseragent.useragent.id, t.formuseragent)
                                                        );
                                                    case 4:
                                                        (s = e.sent),
                                                            axios.get(url + "/admin/useragents/datausersagent?page=1").then(function (e) {
                                                                t.useragents = e.data;
                                                            }),
                                                            (t.formuseragent.name = ""),
                                                            (t.edituseragent = !1),
                                                            t.showSuccess(s.data.message),
                                                            (e.next = 14);
                                                        break;
                                                    case 11:
                                                        (e.prev = 11), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 14:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 11]]
                                    );
                                })
                            )();
                        },
                        cancel: function () {
                            (this.edit = !1), (this.form.name = "");
                        },
                        cancelUseragent: function () {
                            (this.edituseragent = !1), (this.formuseragent.name = "");
                        },
                    },
                    mixins: [s(3).a],
                },
                l = s(4),
                c = Object(l.a)(
                    o,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                s("div", { staticClass: "card" }, [
                                    s("div", { staticClass: "card-body" }, [
                                        s("div", { staticClass: "row" }, [
                                            s("div", { staticClass: "col-12" }, [
                                                s("div", { staticClass: "form-group" }, [
                                                    s("p", { staticClass: "card-title" }, [t._v("Headers")]),
                                                    t._v(" "),
                                                    s("input", {
                                                        directives: [{ name: "model", rawName: "v-model", value: t.form.name, expression: "form.name" }],
                                                        staticClass: "form-control",
                                                        attrs: { placeholder: "Server name", type: "text" },
                                                        domProps: { value: t.form.name },
                                                        on: {
                                                            input: function (e) {
                                                                e.target.composing || t.$set(t.form, "name", e.target.value);
                                                            },
                                                        },
                                                    }),
                                                ]),
                                                t._v(" "),
                                                t.edit
                                                    ? t._e()
                                                    : s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-info",
                                                              attrs: { disabled: !t.form.name, type: "submit" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.store();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Add")]
                                                      ),
                                                t._v(" "),
                                                t.edit
                                                    ? s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-info",
                                                              attrs: { disabled: !t.form.name, type: "button" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.updateSubmit();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Update")]
                                                      )
                                                    : t._e(),
                                                t._v(" "),
                                                t.edit
                                                    ? s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-light",
                                                              attrs: { type: "button" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.cancel();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Cancel")]
                                                      )
                                                    : t._e(),
                                            ]),
                                        ]),
                                        t._v(" "),
                                        s(
                                            "div",
                                            { staticClass: "table-responsive" },
                                            [
                                                s(
                                                    "table",
                                                    { staticClass: "table", attrs: { "aria-describedby": "Streaming Links Table" } },
                                                    [
                                                        t._m(0),
                                                        t._v(" "),
                                                        s(
                                                            "tbody",
                                                            t._l(t.paginated("headers"), function (e, a) {
                                                                return s("tr", { key: a }, [
                                                                    s("td", [t._v(t._s(e.name))]),
                                                                    t._v(" "),
                                                                    s("td", [
                                                                        s("div", { staticClass: "list-icons" }, [
                                                                            s(
                                                                                "a",
                                                                                {
                                                                                    staticClass: "list-icons-item mr-2",
                                                                                    attrs: { "data-original-title": "Edit", rel: "tooltip", title: "" },
                                                                                    on: {
                                                                                        click: function (s) {
                                                                                            return t.update(e, a);
                                                                                        },
                                                                                    },
                                                                                },
                                                                                [s("em", { staticClass: "mdi mdi-pencil fa-lg", staticStyle: { color: "#4d83ff" } })]
                                                                            ),
                                                                            t._v(" "),
                                                                            s(
                                                                                "a",
                                                                                {
                                                                                    staticClass: "list-icons-item text-warning",
                                                                                    attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                    on: {
                                                                                        click: function (s) {
                                                                                            return t.destroy(e.id, a);
                                                                                        },
                                                                                    },
                                                                                },
                                                                                [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                            ),
                                                                        ]),
                                                                    ]),
                                                                ]);
                                                            }),
                                                            0
                                                        ),
                                                        t._v(" "),
                                                        t.headers && t.headers.length ? s("paginate", { attrs: { list: t.headers, per: 5, name: "headers", tag: "tbody" } }) : t._e(),
                                                    ],
                                                    1
                                                ),
                                                t._v(" "),
                                                s("paginate-links", {
                                                    staticClass: "float-right",
                                                    attrs: {
                                                        async: !0,
                                                        classes: { ul: "pagination", li: "page-item", a: "page-link", ".next > a": "next-link", ".prev > a": "prev-link" },
                                                        "hide-single-page": !0,
                                                        limit: 5,
                                                        "show-step-links": !0,
                                                        for: "headers",
                                                    },
                                                }),
                                            ],
                                            1
                                        ),
                                    ]),
                                ]),
                            ]),
                            t._v(" "),
                            s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                s("div", { staticClass: "card" }, [
                                    s("div", { staticClass: "card-body" }, [
                                        s("div", { staticClass: "row" }, [
                                            s("div", { staticClass: "col-12" }, [
                                                s("div", { staticClass: "form-group" }, [
                                                    s("p", { staticClass: "card-title" }, [t._v("User Agents")]),
                                                    t._v(" "),
                                                    s("input", {
                                                        directives: [{ name: "model", rawName: "v-model", value: t.formuseragent.name, expression: "formuseragent.name" }],
                                                        staticClass: "form-control",
                                                        attrs: { placeholder: "Server name", type: "text" },
                                                        domProps: { value: t.formuseragent.name },
                                                        on: {
                                                            input: function (e) {
                                                                e.target.composing || t.$set(t.formuseragent, "name", e.target.value);
                                                            },
                                                        },
                                                    }),
                                                ]),
                                                t._v(" "),
                                                t.edituseragent
                                                    ? t._e()
                                                    : s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-info",
                                                              attrs: { disabled: !t.formuseragent.name, type: "submit" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.useragentsstore();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Add")]
                                                      ),
                                                t._v(" "),
                                                t.edituseragent
                                                    ? s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-info",
                                                              attrs: { disabled: !t.formuseragent.name, type: "button" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.updateSubmitUserAgent();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Update")]
                                                      )
                                                    : t._e(),
                                                t._v(" "),
                                                t.edituseragent
                                                    ? s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-light",
                                                              attrs: { type: "button" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.cancelUseragent();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Cancel")]
                                                      )
                                                    : t._e(),
                                            ]),
                                        ]),
                                        t._v(" "),
                                        s(
                                            "div",
                                            { staticClass: "table-responsive" },
                                            [
                                                s("table", { staticClass: "table", attrs: { "aria-describedby": "Streaming Links Table" } }, [
                                                    t._m(1),
                                                    t._v(" "),
                                                    s(
                                                        "tbody",
                                                        t._l(t.useragents.data, function (e) {
                                                            return s("tr", { key: e.id }, [
                                                                s("td", [t._v(t._s(e.name))]),
                                                                t._v(" "),
                                                                s("td", [
                                                                    s("div", { staticClass: "list-icons" }, [
                                                                        s(
                                                                            "a",
                                                                            {
                                                                                staticClass: "list-icons-item mr-2",
                                                                                attrs: { "data-original-title": "Edit", rel: "tooltip", title: "" },
                                                                                on: {
                                                                                    click: function (s) {
                                                                                        return t.updateUseragent(e, t.index);
                                                                                    },
                                                                                },
                                                                            },
                                                                            [s("em", { staticClass: "mdi mdi-pencil fa-lg", staticStyle: { color: "#4d83ff" } })]
                                                                        ),
                                                                        t._v(" "),
                                                                        s(
                                                                            "a",
                                                                            {
                                                                                staticClass: "list-icons-item text-warning",
                                                                                attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                on: {
                                                                                    click: function (s) {
                                                                                        return t.destroyUseragent(e.id, t.index);
                                                                                    },
                                                                                },
                                                                            },
                                                                            [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                        ),
                                                                    ]),
                                                                ]),
                                                            ]);
                                                        }),
                                                        0
                                                    ),
                                                ]),
                                                t._v(" "),
                                                s("pagination", {
                                                    staticClass: "pagination flex-wrap pagination-flat pagination-success",
                                                    attrs: { data: t.useragents, "show-disabled": !1, limit: 5, size: t.size, align: t.align },
                                                    on: { "pagination-change-page": t.getUserAgentResults },
                                                }),
                                            ],
                                            1
                                        ),
                                    ]),
                                ]),
                            ]),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("thead", [e("tr", [e("th", { attrs: { id: "actions" } }, [this._v("Name")]), this._v(" "), e("th", { attrs: { id: "names" } }, [this._v("Actions")])])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("thead", [e("tr", [e("th", { attrs: { id: "actions" } }, [this._v("Name")]), this._v(" "), e("th", { attrs: { id: "names" } }, [this._v("Actions")])])]);
                        },
                    ],
                    !1,
                    null,
                    "01543446",
                    null
                );
            e.default = c.exports;
        },
        361: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a),
                r = s(3),
                n = s(6);
            function o(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function l(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var r = t.apply(e, s);
                        function n(t) {
                            o(r, a, i, n, l, "next", t);
                        }
                        function l(t) {
                            o(r, a, i, n, l, "throw", t);
                        }
                        n(void 0);
                    });
                };
            }
            var c = {
                    data: function () {
                        return {
                            optionsDownloads: ["admin", "user"],
                            baseUrl: url,
                            index: !0,
                            add: !1,
                            edit: !1,
                            search: "",
                            currentpackname: "",
                            pageNum: null,
                            plans: [],
                            showModalUserEdit: !1,
                            showModal: !1,
                            customUser: { name: "", email: "", password: "", role: "" },
                            comments: {},
                            loading: !1,
                            paginate: ["filteredComments"],
                        };
                    },
                    mounted: function () {
                        var t = this;
                        return l(
                            i.a.mark(function e() {
                                var s;
                                return i.a.wrap(function (e) {
                                    for (;;)
                                        switch ((e.prev = e.next)) {
                                            case 0:
                                                return (e.next = 2), axios.get(url + "/admin/comments/allcomments");
                                            case 2:
                                                return (s = e.sent), (t.comments = s.data), (e.next = 6), axios.get(url + "/admin/plans/data");
                                            case 6:
                                                (s = e.sent), (t.plans = s.data);
                                            case 8:
                                            case "end":
                                                return e.stop();
                                        }
                                }, e);
                            })
                        )();
                    },
                    methods: {
                        destroy: function (t) {
                            var e = this;
                            this.showConfirm(
                                l(
                                    i.a.mark(function s() {
                                        var a, r;
                                        return i.a.wrap(
                                            function (s) {
                                                for (;;)
                                                    switch ((s.prev = s.next)) {
                                                        case 0:
                                                            return (s.prev = 0), (s.next = 3), axios.delete(url + "/admin/media/delete/comments/" + t);
                                                        case 3:
                                                            (a = s.sent),
                                                                (r = e.comments.data.findIndex(function (e) {
                                                                    return e.id === t;
                                                                })),
                                                                e.comments.data.splice(r, 1),
                                                                e.showSuccess(a.data.message),
                                                                (s.next = 12);
                                                            break;
                                                        case 9:
                                                            (s.prev = 9), (s.t0 = s.catch(0)), e.showError();
                                                        case 12:
                                                        case "end":
                                                            return s.stop();
                                                    }
                                            },
                                            s,
                                            null,
                                            [[0, 9]]
                                        );
                                    })
                                )
                            );
                        },
                        getResults: function () {
                            var t = this,
                                e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
                            axios.get(url + "/admin/comments/allcomments?page=" + e).then(function (s) {
                                (t.comments = s.data), (t.pageNum = e);
                            });
                        },
                        create: function () {
                            (this.index = !1), (this.edit = !1), (this.add = !0);
                        },
                        back: function () {
                            (this.form.comment = ""), (this.add = !1), (this.edit = !1), (this.index = !0);
                        },
                    },
                    computed: { filteredComments: function () {} },
                    mixins: [r.a, n.a],
                },
                d = (s(336), s(4)),
                u = Object(d.a)(
                    c,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            t.index
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s(
                                                  "div",
                                                  { staticClass: "table-responsive" },
                                                  [
                                                      s("table", { staticClass: "table", attrs: { "aria-describedby": "Users Table" } }, [
                                                          t._m(0),
                                                          t._v(" "),
                                                          s(
                                                              "tbody",
                                                              t._l(t.comments.data, function (e) {
                                                                  return s("tr", { key: e.id }, [
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.id))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.title))]),
                                                                      t._v(" "),
                                                                      null === e.user_image
                                                                          ? s("td", { staticClass: "text-center avatar" }, [
                                                                                s("img", { attrs: { src: t.baseUrl + "/api/avatars/image/avatar_default.png", alt: "poster path", height: "250", width: "150" } }),
                                                                            ])
                                                                          : s("td", { staticClass: "text-center avatar" }, [s("img", { attrs: { src: e.user_image, alt: "poster path", height: "250", width: "150" } })]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.user_name))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.comment))]),
                                                                      t._v(" "),
                                                                      "admin" === e.role && 1 === e.id
                                                                          ? s("td", { staticClass: "text-center" })
                                                                          : s("td", { staticClass: "text-center" }, [
                                                                                s("div", { staticClass: "list-icons" }, [
                                                                                    s(
                                                                                        "a",
                                                                                        {
                                                                                            staticClass: "list-icons-item text-warning",
                                                                                            attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                            on: {
                                                                                                click: function (s) {
                                                                                                    return t.destroy(e.id);
                                                                                                },
                                                                                            },
                                                                                        },
                                                                                        [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                                    ),
                                                                                ]),
                                                                            ]),
                                                                  ]);
                                                              }),
                                                              0
                                                          ),
                                                      ]),
                                                      t._v(" "),
                                                      s("pagination", { staticClass: "mb-0", attrs: { data: t.comments, "show-disabled": !1, limit: 5 }, on: { "pagination-change-page": t.getResults } }),
                                                  ],
                                                  1
                                              ),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                        ]);
                    },
                    [
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { staticClass: "text-center", attrs: { id: "id" } }, [t._v("Media ID")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "id" } }, [t._v("Media Title")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "id" } }, [t._v("Avatar")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "email" } }, [t._v("User Name")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "name" } }, [t._v("comment")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "actions" } }, [t._v("Actions")]),
                                ]),
                            ]);
                        },
                    ],
                    !1,
                    null,
                    "6eab764f",
                    null
                );
            e.default = u.exports;
        },
        6: function (t, e, s) {
            "use strict";
            s.d(e, "a", function () {
                return n;
            });
            var a = s(0),
                i = s.n(a);
            function r(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            var n = {
                data: function () {
                    return { settings: {}, langs: [], lang: "", langsubs: [], langsub: "", langdownload: "", substitles_langs: [] };
                },
                mounted: function () {
                    var t,
                        e = this;
                    return ((t = i.a.mark(function t() {
                        var s;
                        return i.a.wrap(function (t) {
                            for (;;)
                                switch ((t.prev = t.next)) {
                                    case 0:
                                        return (t.next = 2), axios.get(url + "/admin/settings/data");
                                    case 2:
                                        return (s = t.sent), (e.settings = s.data), (t.next = 6), http.get("https://api.themoviedb.org/3/configuration/languages?api_key=" + e.settings.tmdb_api_key);
                                    case 6:
                                        return (
                                            (s = t.sent),
                                            (e.langs = s.data),
                                            e.langs.push(
                                                ((r = "pt-br"),
                                                (i = "iso_639_1") in (a = { iso_639_1: "pt-br", english_name: "Portuguese (Brazil)" }) ? Object.defineProperty(a, i, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : (a[i] = r),
                                                a)
                                            ),
                                            (t.next = 11),
                                            http.get("https://api.themoviedb.org/3/configuration/languages?api_key=" + e.settings.tmdb_api_key)
                                        );
                                    case 11:
                                        (s = t.sent), (e.langsubs = s.data);
                                    case 13:
                                    case "end":
                                        return t.stop();
                                }
                            var a, i, r;
                        }, t);
                    })),
                    function () {
                        var e = this,
                            s = arguments;
                        return new Promise(function (a, i) {
                            var n = t.apply(e, s);
                            function o(t) {
                                r(n, a, i, o, l, "next", t);
                            }
                            function l(t) {
                                r(n, a, i, o, l, "throw", t);
                            }
                            o(void 0);
                        });
                    })();
                },
            };
        },
    },
    [[168, 1, 2]],
]);
